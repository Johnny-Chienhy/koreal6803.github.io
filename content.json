{"meta":{"title":"FinLab 量化實驗室","subtitle":"用統計、回測的方式教你如何買股票","description":"如何買股票？網路上一堆教學，到底誰說了算？股海茫茫如何撈股票？我們利用財報、股價等統計資訊幫助投資人在買股票時做出正確的判斷！","author":"koreal6803","url":"https://koreal6803.github.io"},"pages":[{"title":"關於","date":"2017-10-01T12:36:01.000Z","updated":"2017-10-03T14:35:23.000Z","comments":true,"path":"關於/index.html","permalink":"https://koreal6803.github.io/關於/index.html","excerpt":"","text":"FinLab的理念FinLab，聽起來很學術，但內容非常實際，一般報章雜誌上看不到的技巧，看不到的統計結果，在這邊完全不私藏，通通秀給大家看！ 以為這樣就結束了嗎？往後的文章也會讓各位創造屬於自己的策略，並且有能力照顧自己的財產，不用在外買明牌被坑。 一般財經平台，有網站前端、後端、軟體人員、業務、財經專家，部落格小編，大家買他們的程式、社團的錢，有很大的部分都是花在他們的人力成本，最重要的是都花大錢了，有時候還是無法獲利。 FinLab讓大家0成本複製我這兩年在財經的路上所學到的東西。 根據統計，世界上有80％的人不喜歡自己的工作，假如你也是其中之一的話，更應該懂得理財，讓自己不再為錢庸碌，活出自己的人生！ 創這個blog的動機為什麼會踏上這條路？可以其實原本想來玩玩大數據，順便學習理財的概念，其實人的志向，一直都不是啊哈！一下突然就繃出來了，一定是自己的投入後，有了小小的成就，又使你更投入，這樣一個不斷循環的過程。 假如遠在天邊的上帝手上有張手牌，上面寫著成功或失敗，創業就是窮極一切爬到祂的腳邊，把祂手裡的那張牌翻開看一下，這樣就足夠了！","raw":null,"content":null}],"posts":[{"title":"利用Pandas輕鬆取得股價並回測","slug":"利用Pandas輕鬆取得歷史股價","date":"2017-12-11T21:19:49.000Z","updated":"2017-12-12T02:59:10.000Z","comments":true,"path":"利用Pandas輕鬆取得歷史股價/","link":"","permalink":"https://koreal6803.github.io/利用Pandas輕鬆取得歷史股價/","excerpt":"","text":"我們之前有交過怎麼樣取當日所有股票股價的方法，但是假如我們想要做歷史回測，除了慢慢一天天抓，也可以使用 pandas_datareader 這個 package（可以用pip install pandas_datareader來安裝） 跟之前股價爬蟲的比較之前我們教的股價爬蟲，是採取一天天下載的方式，今天教的方法是幾支股票，一次下載全部歷史股價！這個方法的優點是超簡單，而且下載速度又快，缺點是有些下市的股票的股價沒有辦法取得，會有生存者偏差，而且資料比較不齊全，但偶爾玩玩，練習一下 pandas 是很不錯的！ 首先先用 pandas_datareader 取得資料取得資料又更簡單了！先匯入要用的包 import1234from pandas_datareader import data # pip install pandas_datareaderimport matplotlib.pyplot as plt # pip install matplotlibimport pandas as pd # pip install pandas%matplotlib inline # show figures in jupyter notebook 然後： get data123data = data.DataReader(\"^TWII\", \"yahoo\", \"2000-01-01\",\"2018-01-01\")c = data['Close']c.plot() 就這樣，真的超簡單吧！假如你之前不會…現在跟你講了，別打我XDD 這個方法爬到的資料真的比較不齊全啦！ 用 pandas 計算 60日收盤價格如何用 pandas 快速算出平均線呢？get data123456# 近60日收盤c60 = c.rolling(60, min_periods=1).mean()# 畫圖c['2015':].plot()c60['2015':].plot() 第二行的 c 就是收盤價 close 的簡稱，是一個 series ，代表每一天收盤價的時間序列，可以上 pandas 官網上查詢 相關的用法，其中有一個好用的 function 叫做 rolling 其實它的含意就是隨時間移動窗格，將窗格中的收盤價取： 60天最大值（c.rolling(60).max()） 60天平均（c.rolling(60).mean()） 60天最小值（c.rolling(60).min()） 那為何我們還需要一個min_periods=1這個參數呢？因為照原本的設定，60天內只要有一個值是NaN，則平均值就是NaN，隨便放一個假，你就有60天算不出平均值，所以 min_periods=1 就是在說，只要60天裡面有一天不是 NaN 就算平均的意思。 第五行跟第六行是畫圖，因為我們不想畫整整18年的圖，畫最近三年就好了，所以利用 [start:end] 來選擇時間，我們希望從 2015年到此資料的最後一筆，所以end放空白（跟python array一樣的選取方式，只是改用日期）。 用pandas算出買入訊號假如當日收盤 &gt; 近60日收盤，則當日收盤瞬間買，不然則空手 這樣子的回測要怎麼寫呢？三行解決，有沒有比multichart還簡單！？ backtest12345678910# 進60日收盤c60 = c.rolling(60, min_periods=1).mean()# 買入訊號signal = (c &gt; c60)# 回測並跟大盤比較(c.shift(-1) / c)[signal].cumprod().plot(color='red')(c.shift(-1) / c).cumprod().plot(color='blue') 買入訊號（line 5）是如何建立的呢？原本的 c 和 c60 都是 float series，然而這邊的 signal 是一個 boolean series，代表當天的c 比 c60還要大，每一天都會有一個布林值，True 代表要在收盤價買入，而 False 代表在收盤價空手 為何我們用一行（line 8）就可以回測呢？首先，我們將數值變成成長率 c.shift(-1)/c，其中c.shift(-1)代表明天的收盤價，而c代表今天的收盤價。這個成長率是一個近似於 1 的數值，大於1代表明天漲，小於1代表明天跌。我們將所有的成長率照著時間乘起來，就會還原成原本的大盤 c，然而我們只有在 signal = True 的時候持有大盤，資產才會隨著增長率變動。xx[signal]的意思就是選取一個 sub-series，將signal = False的天給去除。所以我們只選 signal = True 的每一天相對應的成長率乘起來（cumprod()），就會是回測結果了！ 最後一行（line 9）是做什麼的？用來畫出大盤的，假設我們沒有用xx[signal]篩選，等於每天都買入的狀況，利用 cumprod 把每一天的成長率都乘起來。其實這行也可以寫成 (c/c[0]).plot(color=&#39;blue&#39;) 都是互通的，各位可以試試看。 這邊比較複雜，建議把 c、(c.shift(-1)/c)、signal，這些數值都print出來比較一番吧！get data1pd.DataFrame(&#123;'c':c, 'c60':c60, '增長率':c.shift(-1)/c, 'signal':signal&#125;).head() 小總結 我沒有考慮手續費喔！考慮了以後，這個方法應該不會太好，這篇主要是帶大家練習pandas！ 利用 Pandas 來攝取資料 1 行 利用 Pandas 簡易回測 3 行 學習 series 的操作 第一次看，應該會覺得pandas怎麼這麼厲害，但又很無奈自己無法玩轉操弄它。不用擔心，只要常常看這個系列，就會慢慢對pandas有感覺囉！","raw":null,"content":null,"categories":[{"name":"財經Python教學","slug":"財經Python教學","permalink":"https://koreal6803.github.io/categories/財經Python教學/"}],"tags":[{"name":"python","slug":"python","permalink":"https://koreal6803.github.io/tags/python/"},{"name":"大盤","slug":"大盤","permalink":"https://koreal6803.github.io/tags/大盤/"}]},{"title":"坊間沒在教的RSI選股技巧","slug":"坊間沒在教的RSI-選股技巧","date":"2017-12-10T19:35:51.000Z","updated":"2017-12-11T09:42:35.000Z","comments":true,"path":"坊間沒在教的RSI-選股技巧/","link":"","permalink":"https://koreal6803.github.io/坊間沒在教的RSI-選股技巧/","excerpt":"","text":"RSI在個股預測上，都還算滿准的，有很多台指期策略都是使用RSI，但是在選股的時候，假如還是用一樣的方法囫圇吞棗，則會悽慘無比，就算不算手續費好了，經過我的實測，RSI黃金交叉死亡交叉的選股買賣，效果非常不好，甚至落後大盤。要如何改進呢？請接著看： RSI 超直覺介紹！RSI到底要怎麼用在選股上呢？首先讓我們來簡單複習一下RSI： 上圖中，紅色跟綠色代表漲跟跌，長度代表漲跌幅。可以發現，當股價上漲時，雖然細部漲跌互見，但紅色線條的總長度大於綠色線條總長度，而下跌時正好相反。實際上RSI就只是這樣算而已： $$RSI = \\frac{n天內紅色總長}{n天內紅色總長 + n天內綠色總長} \\times 100 \\% $$ 所以當 RSI = 100 時，代表近 n 天每一天都漲，而 RSI = 0 時，代表近 n 天每天都跌。RSI厲害的地方在於它考慮了股價移動的方向，而且不管任何股票，RSI永遠介於 0 ~ 1 之間。 RSI 用在選股上的難題然而它的壞處是：每個股票漲跌的週期不同，例如有些股票跌5％會跌深反彈，但有些可能要道10%，每一支股票股性質不同。不能直接用，每個股票的 n 可能都不一樣，硬是將所有股票都用同一個 n 的 RSI 效果都非常差！ 這就是為什麼明明同樣的 RSI ，有些人會說要追漲、又有人會說止跌！只能說股票特性不一樣，用法也不一樣，沒有什麼誰對誰錯的問題，也沒有說哪種比較好，完全看你的 n 值怎麼設定，所以這也是我說 RSI 用在期貨、外匯上比較好，因為可以針對同一個商品客製化參數 n，然而選股就沒辦法了。 所以靠 RSI 選股就是個玄學！？要如何用同一個 n 來選股呢？老實說半年前我就在琢磨這個問題，研究一直滿失敗的，但最近終於有所突破，而且方法很簡單，接下來的內容，集結了我好幾個月的研究，各位假如還滿意可以使用我們新的 email 訂閱我們的新文章喔！我們的文章含金量都很高XD（自己覺得）！ 在每個股票之間找尋統一的 n，實現 RSI 追漲策略我們硬是讓 n=定值，怎麼做好呢？於是我做了很多的測試，結論是：長週期的股票RSI有共通性！ 以下面這個例子舉例： 上圖中我只用了一個簡單的選股策略： 當 RSI &gt; 55 且 ROE &gt; 0 時買入。 當 買超過60天 或 跌破季線 賣出。 （不考慮手續費，純實驗性質） 可以發現週期越長，股票越有共通性，RSI 越能在不同的股票間都有一致的作用！ 而當這種長週期 RSI 有點高時（55左右），代表股價正在上漲，此時跟風會有滿不錯的收穫！ 尤其是 RSI 週期 n = 60 以上，讓然感覺滿驚艷的！ 小結論網路上沒有任何地方有教你，RSI選股要用這麼長的週期，可以自己找幾支股票追蹤看看，或許你跟我會得到類似的答案喔！ 還是提醒一下大家，投資風散風險，這個方法不可能就這麼厲害，只是說上漲的期望值比較大而已，真正操作一個月，感受絕對是五五波，冷暖夾雜的啦XD，可以再多用點指標去過濾看看！","raw":null,"content":null,"categories":[{"name":"指標分析","slug":"指標分析","permalink":"https://koreal6803.github.io/categories/指標分析/"},{"name":"技術面","slug":"指標分析/技術面","permalink":"https://koreal6803.github.io/categories/指標分析/技術面/"}],"tags":[{"name":"選股","slug":"選股","permalink":"https://koreal6803.github.io/tags/選股/"},{"name":"RSI","slug":"RSI","permalink":"https://koreal6803.github.io/tags/RSI/"}]},{"title":"腦力激盪的外資策略！","slug":"腦力激盪的外資策略！","date":"2017-12-08T12:13:29.000Z","updated":"2017-12-08T13:12:22.000Z","comments":true,"path":"腦力激盪的外資策略！/","link":"","permalink":"https://koreal6803.github.io/腦力激盪的外資策略！/","excerpt":"","text":"最近跟大家用email討論感覺很趣的！而且最近也比較忙，所以比較少時間寫blog跟大家道歉！這個週末我會利用假日來研究一下巴菲特選股！敬請期待～～ 以下是其中一篇email，我們在討論一個外資策略，從原本一個普通的策略，變得可以很有效的避開大盤大跌，成為長年穩定獲利的投資方法！有時候真的是要互相討論，互相切磋，從大家身上學到很多東西！真的非常謝謝各位！ 然而有時候回信比較慢，請見諒，手邊事情有點多，因為歐洲要放聖誕節了，最近會特別忙！ 也歡迎大家跟我一起討論策略，我可以幫你回測跟優化，也不會隨意公布，除非你同意，我回信時間比較不固定，但我一定盡量早點回！ P大：最近在觀察一個選股邏輯，法人連買10日以上，且股價還沒漲多，通常之後會有不錯的漲勢～或許你有系統可以研究或是討論看看 我：我幫你做了一下回測： 的確是會比大盤好，我用的是外資買賣正的超過十天以上，且十天內報酬率不超過5%時買入，持有20天或是60天，都會比大盤還好喔！我比較喜歡持有60的版本，因為效果差不多，且手續費比較便宜。 這個方法有時候還是會同時出現100檔股票，感覺還可以再增加條件篩選出優質股，我們可以用email來回討論你的想法！讓這個策略越來越好。 P大：遇到好人可以討論真的太好了～沒關係，要怎麼運用都可以，一起進步，一起賺錢～我也不太好意思，因為不知道怎麼回測，所以還請您幫忙，不過儘量提供出一些假設性的問題。～關於這個策略，或許可以再加上price大於ma60，本益比小於15，或是股價淨值小於0.8之類的呢？承佑什麼想法建議的嗎？ 對了 想請叫一下 怎麼不繼續使用14年那邊的策略呢？ 我：最近比較忙，拖了一下才回信，為什麼我不用14年那個策略呢？因為很多策略都很猛呀XDD，14年那個只是還好而已。我剛剛幫你設計一下，加了一些條件，不算手續費也14倍呀。但計算了手續費後，獲利只剩下六倍，也不錯啦XD。這個策略的優點是下跌幅度滿小的，都在15%以內！金融海嘯那年竟然還賺錢。很適合穩健型的投資！我是用100萬去模擬的。 這個策略的思路就像你說的，加了 本益比&lt;20 股價淨值比&lt;0.8 另外還加了測試後發現有用的： 市值小於5000千：選擇一些外資喜歡但市值還不會太大的小型股（外資比較好操弄）。 避開大盤大跌的方法 當中提到的大盤濾網（在此策略調整成25天均線）。當反向條件成立時，立刻賣出手中所有持股。 另外外資連買10天改成5天。 我覺得這幾封信的內容很有價值，我們將一個構想中的策略實現，並且回測，適合放在blog中，你覺得呢？有什麼其它想法歡迎跟我討論喔！ P 大如果可以成為您其中一篇文章的構想覺得榮幸哈哈哈～ 歡迎大家跟我討論策略喔！這個大概就是我們討論的經過，最後P大也同意把討論的過程放上blog，歡迎對策略有興趣的人也可以跟我一起討論喔！這也是督促我研發新策略的一個動力！新策略研發最主要是幫助你可以更確定策略的有效性，而我獲得的好處就是多一點寫blog的靈感，當然我一定會詢問經過你的同意，才把策略放上blog，目前手邊有很多策略了，不缺策略，只缺本金阿XDD。","raw":null,"content":null,"categories":[{"name":"指標分析","slug":"指標分析","permalink":"https://koreal6803.github.io/categories/指標分析/"},{"name":"籌碼面","slug":"指標分析/籌碼面","permalink":"https://koreal6803.github.io/categories/指標分析/籌碼面/"}],"tags":[{"name":"外資","slug":"外資","permalink":"https://koreal6803.github.io/tags/外資/"}]},{"title":"Python 簡單選股和回測","slug":"Python-簡單選股和回測","date":"2017-11-30T12:21:38.000Z","updated":"2017-12-12T10:19:15.000Z","comments":true,"path":"Python-簡單選股和回測/","link":"","permalink":"https://koreal6803.github.io/Python-簡單選股和回測/","excerpt":"","text":"最近在看一些比較古典而學術的策略文章，雖然已經眾所皆知，但是好像很少人用，所以今天來介紹一下，如何利用 python 實做 portfolio trading。 Portfolio Trading 的意思就是選擇一籃子股票，並且照著一定的比例買入，今天我就不介紹太詳細，先用最簡單的篩選法，選出一些股票，並觀察買入一兩年後的變化。 首先，大家必須要把之前的 Python-時間序列實作！ 那一篇複習下，我們會用到當中的 close 這個成品，最好是跑五年以上的資料，會比較有可靠性。 先寫好策略框架在開始寫策略時，先用簡單的兩三句話，來闡述所有的code在做什麼，並且逐段擴寫： pseudo code1234for 每年: 1. 先看前三年每個股票的表現 2. 篩選股票 3. 回測當年的狀況 於是接下來我們就依照這三點來建構回測。 前三年股票的狀況假設我們目前在第year年，，我們把最近lookback_period年所有股票的股價選取出來 lookback three years1234567891011# 拿取近n年股票c = close.truncate(str(year-lookback_period), str(year))# 計算近n年最大下跌幅度dropdown = (c.cummax() - c).max()/c.max()*100# 計算近n年報酬率profit = (c.iloc[-1] / c.iloc[0] - 1) * 100# 計算近n年標準差(波動率)std = (c/c.shift()).std() * 200 第5、8、11行是計算三個指標，當然你也可以建構自己的一些指標，我這邊就先舉這三個例子，這邊的每一行都很值得玩味，假如你都看不懂，建議你先去看 pandas 的新手教學。 篩選股票這邊我們就用剛剛計算的三個指標來選股： select stocks123constraint = (std[std &lt; 2].index &amp; profit[profit &gt; 10].index &amp; dropdown[dropdown &lt; 50].index) 這邊顧名思義，我們希望選取： 波動率 &lt; 2％：波動率越大代表股價變化幅度越大，我們只選波動率小的股票 獲利 &gt; 10%：近三年報酬率大於10的股票 最大下跌幅度 &lt; 50%：下跌幅度也不能太大 回測接著就是回測，這邊的回測只求簡單算算，跟實際情況一定不一樣，這邊我們將資產均勻分佈於選出來的股票，不計算手續費，也不計算除權息、減資等等。建議有餘力的人可以用 adjust close取代普通的 close price，結果會比較準確。 backtest1234567891011121314# 取出今年的股價c2 = stocks.close.truncate(str(year), str(year + 1))# 依照剛剛的條件選取股票selected_stocks = constraint &amp; c2.columnsprint(year, '年買了',len(selected_stocks),'支股票')# 回測equality = c2[selected_stocks].dropna(axis=1).mean(axis=1)total_equality = (equality / equality[0] * start_capital)total_equality.plot(color='blue')# 今年底的資產，變成明年初的資產start_capital = total_equality[-1] 什麼！回測竟然只要這麼少行！！是的因為我們是平均分散所有要買的股票，所以只要把選出來的股價做平均，買入這個平均指數就可以了。由於有了前面的假設，結果會是一樣的。 完整的範例1234567891011121314151617181920212223242526272829303132333435363738394041424344454647import pandas as pd%matplotlib inlinelookback_period = 3start_capital = 1for year in range(2010, 2018): # calculate performance of stocks # ------------------------------- # 拿取近n年股票 c = close.truncate(str(year-lookback_period), str(year)) # 計算近n年最大下跌幅度 dropdown = (c.cummax() - c).max()/c.max()*100 # 計算近n年報酬率 profit = (c.iloc[-1] / c.iloc[0] - 1) * 100 # 計算近n年標準差(波動率) std = (c/c.shift()).std() # constraint # ---------- constraint = (std[std &lt; 0.02].index &amp; profit[profit &gt; 10].index &amp; dropdown[dropdown &lt; 50].index) # backtest # -------- # 取出今年的股價 c2 = stocks.close.truncate(str(year), str(year + 1)) # 依照剛剛的條件選取股票 selected_stocks = constraint &amp; c2.columns print(year, '年買了',len(selected_stocks),'支股票') # 回測 equality = c2[selected_stocks].dropna(axis=1).mean(axis=1) total_equality = (equality / equality[0] * start_capital) total_equality.plot(color='blue') # 今年底的資產，變成明年初的資產 start_capital = total_equality[-1] 這邊已知的問題是，假如你當年沒有任何股票的話，回測會有點問題喔！盡量讓每一年都持有一些股票吧！（或者debug一下XD）可以看出前幾年獲利滿好的，近年來獲利普普，感覺還得加入其它的條件吧？大家可以新增一些指標，並且用類似的方法做回測喔！","raw":null,"content":null,"categories":[{"name":"財經Python教學","slug":"財經Python教學","permalink":"https://koreal6803.github.io/categories/財經Python教學/"}],"tags":[{"name":"python","slug":"python","permalink":"https://koreal6803.github.io/tags/python/"},{"name":"程式設計","slug":"程式設計","permalink":"https://koreal6803.github.io/tags/程式設計/"}]},{"title":"威廉．納葛維茲-價值型選股策略","slug":"威廉．納葛維茲-價值型選股策略","date":"2017-11-28T16:46:51.000Z","updated":"2017-11-29T00:01:16.000Z","comments":true,"path":"威廉．納葛維茲-價值型選股策略/","link":"","permalink":"https://koreal6803.github.io/威廉．納葛維茲-價值型選股策略/","excerpt":"","text":"最近偶然看到了TEJ網頁中，有很多策略，公式都寫好了，只要無腦回測！好開心XD，但裡面策略也太多了吧！有些有用，有些沒用，還是要慢慢撈珍，原本在大海裡撈珍，現在在河川裡撈珍，輕鬆多了。 今天要介紹的是裡面的 威廉．納葛維茲-價值型選股策略 然而為了讓回測更有用，我有做了一些小調整，條件做了一些更動，以下是這篇策略的思路： 營運合格的小市值股票這個價值型策略，尋找的標的是小而美的股票，價格都在五十塊以下，然而小市值的公司通常風險比較高，所以此策略利用了 自由現金流 跟 負債比率，來觀察此公司的營運狀況，營運狀況不用到非常好，只求不要太差就可以了： 市值 &lt; 10000（千） 近四季自由現金流量&gt; 0 負債比率 &lt; 70 很多網站都會說 負債比率 是個很重要的指標，但我多次測試，發現它在很多策略中都無法增加獲利，甚至還會減少…，然而這只是我的經驗，不代表 負債比率 真的不用看，還是請各位自行斟酌。除了我這麼說外，原來Mr. Market跟我看法有志一同：你覺得「負債比率」越低越好嗎？其實，它沒有想像中這麼有效！ 營收高是王道！以上的條件看起來都挺保守的，接下來才是比較積極的指標，以下的指標都是用來觀察一家公司的營收跟淨利！假如一家正常營運的公司獲利比其它公司好，那沒理由不投資呀！所以這個策略用了 市值營收比 、 本益比 、營業利益成長率，來觀察公司是否持續獲利，並且獲利越來越高。 市值營收比 = 市值 / 月營收 &gt; 3 本益比 &lt; 20 營業利益成長率 &gt; 0 市值營收比也是一個很好用的財務指標，可以參考我的文章。 稅後淨利要考慮！一家獲利良好的公司，獲利持續成長，固然是好事，但不能只是獲利表面上成長，而稅後淨利卻很少，那也不行！所以這邊就用了額外的一個指標，來判斷稅後淨利的大小： 股東權益報酬率 = 稅後淨利 / 股東權益總額 &gt; 市場均值 這邊的 除 股東權益總額 是用來對整個市場做一個公平的比較，例如某公司發行很多股票，且股價很高，那就更應該有很好的 稅後淨利 ，不然投資人為何要拿錢給你呢？ 思路總結：這個策略基本上就是找小巧、獲利高的股票，我覺得其中很棒的概念是 用市值營收比，而不是單純的營收 用股東權益報酬率，而不是單純的毛利率或稅後淨利 利用上述兩個指標，才能將每家公司更公平的做比較，進而找出小而美的股票！ 回測結果符合上述條件，持有60天，每60天換一輪股票： 由於很久沒有介紹回測結果了，這邊在重新複習一下，藍色的就是不含手續費，紅色的是有含手續費，灰色的是台股。看起來領先台股非常多，代表這個TEJ策略裡面真的有些黃金可以挖寶，然而調整參數還是滿必要的就是了，照著TEJ直接使用，效果沒那麼好。 買股數量 每次換股的時候，我們就盡量平均自己的資產，當然每張股票價格都不一樣，所以不可能會超級平均，只求盡量。另外我們可以看到，金融海嘯的時候，藍色線買了將近150支股票，而紅色線只買了80種不同的股票，為什麼會這樣呢？因為藍色曲線是最理想的狀況，也就是全部都買，全部超級平均分散，而紅色的就是只看現有資產是多少，盡量分散，買不起就放棄。 為何金融海嘯時，有那麼多股票？因為金融海嘯不管好股壞股，都跌到了很低的價位，於是市值變小，此策略就會撈出比較多股票。 跌幅 此策略在金融海嘯時讓你的資產虧損一半多，但一般狀況表現非常傑出，約有20％的回撤，但不算太大，算是滿傑出的。 總結： 用自由現金流來、負債比率來看公司體質 用營收增長率及股東報酬率來衡量公司的獲利能力 分享TEJ網站中的策略 外部延伸閱讀：黃國華：市值跟營收之間的合理關係 今天介紹了TEJ網頁中的策略，發現滿有用的，想在多寫點，不知到大家最有興趣的是其中的哪一個策略呢？","raw":null,"content":null,"categories":[{"name":"選股策略","slug":"選股策略","permalink":"https://koreal6803.github.io/categories/選股策略/"}],"tags":[{"name":"選股策略","slug":"選股策略","permalink":"https://koreal6803.github.io/tags/選股策略/"},{"name":"歷史回測","slug":"歷史回測","permalink":"https://koreal6803.github.io/tags/歷史回測/"},{"name":"選股","slug":"選股","permalink":"https://koreal6803.github.io/tags/選股/"},{"name":"市值營收比","slug":"市值營收比","permalink":"https://koreal6803.github.io/tags/市值營收比/"}]},{"title":"市值營收比-幫你找到便宜獲利股","slug":"市值營收比","date":"2017-11-24T09:19:11.000Z","updated":"2017-11-24T11:36:14.000Z","comments":true,"path":"市值營收比/","link":"","permalink":"https://koreal6803.github.io/市值營收比/","excerpt":"","text":"我才疏學淺，最近才發現這個指標，一用之下大為驚嘆，回測的效果還滿好的，今天分享給大家。網路上有各種算法，究竟要用財報上的營收總額算，還是直接用月營收算？用月營收算的話，要加總幾個月比較好？在這篇做簡單的分析。 市值營收比的計算方式如下： $$ 市值營收比 = 市值 / n個月營收總和 $$ 一般來說，我們都是希望 市值營收比 越小越好，因為 市值營收比 越小代表市值越小，而營收越高，也代表較便宜的高營收股。市值營收比 有很多好處，它的變化速度非常快，市值是每個交易日都會變動，而月營收也是每個月都有新的數字，讓它的反應速度比其它的基本面指數再快一些。 也有人會把分母換成每季的營收總額，但我實測後發現效果沒有用月營收好。 分母中的 n 是個使用者決定的數字，例如你想計算每一季的 市值營收比，那就帶入4，這邊以4為例子。 首先我們來看 市值營收比 分佈圖： 可以發現這又是一個類似於1/x曲線的分佈圖，\b我們將其照高低分成四組去持有，每60天換一次股，不計算手續費： 很漂亮的一字排開！我發現120天換一次股，效果比60天或是240天都還要好（無論n＝4，6，12，24，36）。然而這邊的回測只是建立在一次持有幾百種不同股票的狀況下，真實的情況，我們沒有那麼多錢去分散投資時，不能只看 市值營收比 來選股，不然漲跌機率還是跟擲銅板的機率沒兩樣，還必須做更多的篩選。 市值營收比 的缺點是，營收不代表稅後淨利，可能有些公司表面上賣出很多產品，但都是賠本生意，這種公司沒辦法被過濾，所以下一篇我們就來看看 市值營收比 搭配其它指標來做回測吧！ 計算 市值營收比 時，用月營收計算獲利效果比較好！ 市值營收比（季）還滿好用的，是我認為排名前十的基本面指標 市值營收比找出來的股票，小型股偏多 可以用 3.77（50％）當作 市值營收比 的中位數，作為選股的依據，越低越好。","raw":null,"content":null,"categories":[{"name":"指標分析","slug":"指標分析","permalink":"https://koreal6803.github.io/categories/指標分析/"},{"name":"基本面","slug":"指標分析/基本面","permalink":"https://koreal6803.github.io/categories/指標分析/基本面/"}],"tags":[{"name":"選股","slug":"選股","permalink":"https://koreal6803.github.io/tags/選股/"},{"name":"市值營收比","slug":"市值營收比","permalink":"https://koreal6803.github.io/tags/市值營收比/"},{"name":"指標","slug":"指標","permalink":"https://koreal6803.github.io/tags/指標/"}]},{"title":"避開大盤大跌的方法！","slug":"過濾大盤的簡單方法！","date":"2017-11-21T13:37:34.000Z","updated":"2017-11-22T01:27:17.000Z","comments":true,"path":"過濾大盤的簡單方法！/","link":"","permalink":"https://koreal6803.github.io/過濾大盤的簡單方法！/","excerpt":"","text":"目前這個blog上的策略大部分都是一直持股，就算大盤跌到慘慘慘，反正就繼續持有就對了！我們能不能想一個過濾的方法，讓我們躲避掉大盤下跌的時候呢？其實是可以辦到的，這篇文章就是討論大盤過濾的效果和得失。 何時該用大盤過濾？使用時機，最白話的說法就是：你不希望賺錢之後連本帶利虧回去，但是如何定義虧很多呢？例如，今天某人虧損30萬，很多嗎？對於一個小資族如我，這樣算是非常多的，得上班好幾個月才能補回來。但對於手上持有一億元的基金公司，其實也才千分之三，是常有的事情。 所以我們通常會去看一個數值，叫做dropdown（DD），也叫虧損，或是回撤。 $$ 今天的投資資本 - 投資資本歷史最高點 $$ 用比較數學正式的角度講，我們先假設總投資資產為$c(t)$，那dropdown，$d(t)$，就可以寫成： $$d(t)=\\left(\\frac{c(t)}{\\max\\left\\{ c(i)\\mid0\\le i\\le t\\right\\} }-1\\right)\\times100\\%$$ 某人原本有100元，賺了50元，獲利繼續投資，但後來虧了30元，來到了120元，請問dropdown是多少？ $$ (\\frac{120}{150} - 1)\\times100\\%=-20\\% $$ 假如100塊直接虧損30塊，那dropdown會是 -30％，但好在某人已經先獲利了50%並且持續投入股市，所以從150虧損到120元，這個策略的 dropdown 其實是 -20%。 所以不管是資金規模大小，我們有了一個統一的指標去衡量策略的下跌幅度了！通常我們會進一步去看整個回測，例如十年當中，虧損最慘最慘的位置，也就是最大下跌幅度，maximum dropdown（MDD）： $$ \\text{arg} \\min_t d(t) $$ 而 $t$ 通常發生在 2008～2009 金融海嘯附近。所以我習慣真的要用的策略，會測到2007年，才能看出虧損最嚴重的情行在哪裡。 我所有的策略不加大盤濾網平均dropdown在 -30% ~ -40% 左右，有些稍好在 -20%（沒有槓桿），很多有到-60%，所以投資股票當大盤大跌時，你用了沒有融券的單一策略，那就要有承受損失 -20％ ~ -30% 的心理準備。 當今天發現某個策略效果不錯，但是金融海嘯時特別差（40%～60％），那就可以使用大盤過濾了！ 大盤過濾的優劣得失當你加入了大盤過濾的策略後，很可能會發生以下情形： 策略變差 大家都說大盤過濾可以幫助我們將獲利保護好，以便賺更多。但不好意思要潑個冷水。我的回測經驗是，大部分的大盤過濾都會讓策略獲利變差，尤其是那些原本就獲利很好的策略。常常會發現原本可以獲利的策略，瞬間變得黯淡無光，這種事情經常發生！我的心得是，沒有一種大盤過濾法是萬用的，應該說有幾種可能有用，可以試試看，但不用抱持太大的期待。 Dropdown 變小 dropdown會有很明顯的變小，但是要比 -30% 好甚至到 -20%，以日為頻率做買賣個人覺得是有難度的，所以除非金融海嘯你的策略虧損來到了40%以上，再考慮使用大盤的過濾就好了。 範例這篇的重點應該是用大盤過濾來降低dropdown，所以這邊給了一個簡單的策略。 PB &lt; 1.5 ROE &gt; 1 (當季) EPS &gt; 0 (當季) 上次寫過自己愛用的指標 每80天換一次股，看一下結果： 這個策略算是可以穩定慢慢的獲利，而且買股數量也不會很多，這邊我的起始資金設定成50萬，紅色的權益曲線是計算了手續費後的結果，藍色的則沒有計算手續費，這應該也算是一個小資族存點錢後可以使用的策略。然而在金融海嘯時，dropdown非常大，竟然來到了 -60%，這樣的策略就算長年下來可以獲利，我也是不敢用，誰知道下一次金融海嘯什麼時候來呢…。 所以我們用了一個大盤的濾網，在設計濾網時，可以直接買賣大盤，初步看一下是否真的有用，我最後設計的條件： 大盤在21日均線上 或 21日均線上升（比昨日高） 為什麼要用21呢？其實只是一種斐波那契数列的迷信而已，也可以用20啦，沒差多少。以下是直接回測大盤，但不考慮手續費，反正只是想看一下這個濾網有沒有用： 藍色就是真正的大盤，我們從2000年開始測試橘色的是買賣大盤的結果，這邊的曲線是只有買大盤，沒有空的部分，總結這17年，此方法是有一定的獲利能力的，甚至可以拿來用在台指期策略上，我們今天只用在改善選股策略，避開一些不必要的虧損。大家可以去Cmoney或是玩股網，人工的方式去比對這個簡單的大盤條件。 說到這個，我跟玩股網、CMoney、財報狗都沒有什麼關係，只是網路上好用的工具就那幾個網站，而且順便提升一下這個blog的外部優質連結，如此而已啦！我還太小咖不會有人找我業配XDD 這邊只是簡單的過濾，另外還可以用KD、RSI，都試試看，甚至上網搜尋台指期的期貨策略，直接套成濾網（當然前提是時間尺度要match，這邊的最小單位是”天”）。 接下來我們修正原本的策略，加上了以上的大盤過濾條件，這邊要注意的是，我們在換股當下檢查大盤就好了，不需要每天都檢查，就是一翻兩瞪眼，也就是要買就買80天，不然就空手80天： 可以看到，它的dropdown從 原本的 -60% 縮小到 -30% 左右，且總獲利甚至提升了一些，這樣的結果還算滿意，覺得這應該算是過濾大盤的一個成功案例，要秀失敗策略的很簡單，因為太多了XDD，但我還是盡可能的把優質的內容呈獻給各位，今天的總結： dropdown的定義 過濾大盤的利弊 一個真實的大盤過濾方法，有可能可以套用再其它策略 大盤過濾研發的思路，及過濾的前後比較 假如喜歡這個blog，可以定期追蹤喔！我每個禮拜都會不定時發文。","raw":null,"content":null,"categories":[{"name":"大盤漲跌","slug":"大盤漲跌","permalink":"https://koreal6803.github.io/categories/大盤漲跌/"}],"tags":[{"name":"歷史回測","slug":"歷史回測","permalink":"https://koreal6803.github.io/tags/歷史回測/"},{"name":"大盤","slug":"大盤","permalink":"https://koreal6803.github.io/tags/大盤/"}]},{"title":"Python 簡單158種技術指標計算","slug":"Python-簡單158種技術指標計算","date":"2017-11-19T18:46:09.000Z","updated":"2017-12-12T10:22:23.000Z","comments":true,"path":"Python-簡單158種技術指標計算/","link":"","permalink":"https://koreal6803.github.io/Python-簡單158種技術指標計算/","excerpt":"","text":"這篇接續著Python時間序列實做，先複習一下，上回合結束，我們有一個最重要的成果：close，它的columns是所有的股票代號，而index是日期。 123close = pd.DataFrame(&#123;k:d['收盤價'] for k,d in data.items()&#125;).transpose()close.index = pd.to_datetime(close.index)close 還記得嗎？上方式是上次的code，將data，把每個股票的收盤價拿出來。因為很重要所以說三遍： 123456789101112open = pd.DataFrame(&#123;k:d['開盤價'] for k,d in data.items()&#125;).transpose()open.index = pd.to_datetime(open.index)high = pd.DataFrame(&#123;k:d['最高價'] for k,d in data.items()&#125;).transpose()high.index = pd.to_datetime(high.index)low = pd.DataFrame(&#123;k:d['最低價'] for k,d in data.items()&#125;).transpose()low.index = pd.to_datetime(low.index)volume = pd.DataFrame(&#123;k:d['成交量'] for k,d in data.items()&#125;).transpose()volume.index = pd.to_datetime(volume.index) 大家有沒有發現，相同的東西抄了五次，但我們拿出來的不是close，是open、high、low 跟 volume。把所有的東西都統整好。統整好後，再將我們想看的股票拿出來，我們以近年超紅的台積電。 把其中的股票拿出來，變成 dict 結構123456789tsmc = &#123; 'close':stocks.close['2330']['2017'].dropna().astype(float), 'open':stocks.open['2330']['2017'].dropna().astype(float), 'high':stocks.high['2330']['2017'].dropna().astype(float), 'low':stocks.low['2330']['2017'].dropna().astype(float), 'volume': stocks.volume['2330']['2017'].dropna().astype(float),&#125;tsmc['close'].plot() 花這麼久時間，tsmc 這個結構有什麼用？來，接下來我們配合一個超厲害的python package：talib。安裝talib不是直接pip install那麼簡單，請參考python talib 的網頁 來安裝。 接下來任意找出105種指標！ KD 值計算KD指標12345678910def talib2df(talib_output): if type(talib_output) == list: ret = pd.DataFrame(talib_output).transpose() else: ret = pd.Series(talib_output) ret.index = tsmc['close'].index return ret;talib2df(talib.abstract.STOCH(tsmc)).plot()tsmc['close'].plot(secondary_y=True) 其中，最重要的是第 9 行，我們利用 talib.abstract.STOCH 這個函式，來計算KD值，計算好後，再由talib2df將格式轉換成 dataframe 方便我們畫圖。第 10 行是說，我們想要同時顯示tsmc的收盤價，secondary_y 是說我們需要用第二個 y軸，因為KD我們知道是在0～100之間，而台積電股價在200左右。 以下就是我們的成品，橘色、藍色代表的就是KD值。而紫色的就是收盤價！ 收盤價對應到右邊的 y 軸，而左邊的y 軸則是 KD 值。 MACD 計算這還不夠酷炫，以上的鋪陳都是為了接下來的爽： MACD 計算12talib2df(talib.abstract.MACD(tsmc)).plot()tsmc[&apos;close&apos;].plot(secondary_y=True) 只要把STOCH改成MACD就好了，各種指標隨便用： OBV計算OBV 計算12talib2df(talib.abstract.OBV(tsmc)).plot()tsmc[&apos;close&apos;].plot(secondary_y=True) 威廉指數計算WILLR 計算12talib2df(talib.abstract.WILLR(tsmc)).plot()tsmc[&apos;close&apos;].plot(secondary_y=True) ATR 計算ATR 計算12talib2df(talib.abstract.ATR(tsmc)).plot()tsmc[&apos;close&apos;].plot(secondary_y=True) 我的天所以到底有幾種指標？！總共有 all indicators1talib.get_functions() 這些就是可以用的指標，總共有158種，慢慢看，學也學不完XDD。 改變參數之前不是說KD指標有三個參數：（9、3、3），假如今天我想要客製化，怎麼修改呢？我們現在只知道KD指標是 talib.abstract.STOCH 這個function，要如何看如何設定呢？直接 print 這個函式看看： function detail1print(talib.abstract.STOCH) 我們可以改變得參數是 Parameters 項目中的五個，可以看到假如什麼都不輸入的話，它的值預設是（5、3、0、3、0），這邊的0代表的就是平滑的演算法式哪一種，例如我們希望它的三個參數不要是（5、3、3），想改成台灣常用的（9、3、3），也就是我們想把 fast_period從原本的5改成9，只要在呼叫 talib.abstract.STOCH 的時候輸入 fastk_period=9 就可以了： MACD 計算12talib2df(talib.abstract.STOCH(tsmc, fastk_period=9)).plot()tsmc[&apos;close&apos;].plot(secondary_y=True) 今天教了大家這麼多的index，大家幾乎可以做自己的玩股網，Cmoney了，再配合上次教的用pandas選股，一個系統就快被搭建起來了！","raw":null,"content":null,"categories":[{"name":"財經Python教學","slug":"財經Python教學","permalink":"https://koreal6803.github.io/categories/財經Python教學/"}],"tags":[{"name":"python","slug":"python","permalink":"https://koreal6803.github.io/tags/python/"},{"name":"程式設計","slug":"程式設計","permalink":"https://koreal6803.github.io/tags/程式設計/"}]},{"title":"Python 時間序列實做！","slug":"Python-時間序列實作！","date":"2017-11-15T13:03:03.000Z","updated":"2017-12-12T09:56:12.000Z","comments":true,"path":"Python-時間序列實作！/","link":"","permalink":"https://koreal6803.github.io/Python-時間序列實作！/","excerpt":"","text":"之前我們介紹了很多爬蟲，可以爬每天、每月、每季的資料，今天就是要交爬完了之後要怎麼運用。這篇文章會教如何將爬下來的資料整理成 time series （時間序列） 每日爬蟲首先，我們將之前一篇：超簡單台股每日爬蟲教學 所分享的程式碼變成以下的function，方便我們多次呼叫，才能爬每一天的股價。 每日股價爬蟲12345678910111213141516171819202122232425262728293031import requestsfrom io import StringIOimport pandas as pdimport numpy as npdef crawlPrice(date): r = requests.post('http://app.twse.com.tw/ch/trading/exchange/MI_INDEX/MI_INDEX.php', data=&#123; 'download': 'csv', 'qdate':date, 'selectType':'ALL', &#125;) r.encoding = 'big5' df = pd.read_csv(StringIO(\"\\n\".join([i.translate(&#123;ord(c): None for c in ' '&#125;) for i in r.text.split('\\n') if len(i.split('\",')) == 16 and i[0] != '='])), header=0) df.set_index('證券代號', inplace=True) df.columns = ['證券名稱', '成交量', '成交筆數', '成交金額', '開盤價', '最高價', '最低價', '收盤價', '漲跌(+/-)', '漲跌價差', '最後揭示買價', '最後揭示買量', '最後揭示賣價', '最後揭示賣量', '本益比'] df['成交量'] /= 1000 df = df.drop(['漲跌(+/-)','證券名稱','最後揭示買量','最後揭示賣量'], axis=1) df = df.replace('--', np.nan) df = df.apply(pd.to_numeric) df = df.apply(pd.to_numeric) assert len(set(df.index)) == len(df.index) return df 就跟之前是一樣的，只是被包成 function ，它的 input 是日期，output 是 dataframe，寫程式最重要的就是瞭解 input 跟 output 的型態，就會比較簡單了！ 呼叫每日爬蟲，連續爬 n 天接下來我們就來利用這個 function 幫我們爬最近9天的資料，並將數據存在 data 這個 variable 中： 一次爬 n_days 天的股價1234567891011121314151617181920212223242526272829import datetimedata = &#123;&#125;n_days = 9time = datetime.datetime.now()while len(data) &lt; n_days: # 假如日月 &lt; 9 要補零 month_str = str(time.month) if time.month &gt; 9 else '0' + str(time.month) day_str = str(time.day) if time.day &gt; 9 else '0' + str(time.day) # e.x 20100101 taiwan_time_str = str(time.year - 1911) + '/' + month_str + '/' + day_str international_time_str = str(time.year) + month_str + day_str print('parsing', international_time_str) # 使用 crawPrice 爬資料 try: data[international_time_str] = crawlPrice(taiwan_time_str) print('success!') except: # 假日爬不到 print('fail! check the date is holiday') # 減一天 time -= datetime.timedelta(days=1) 想要增加天數，只要調整 n_days 這個參數就行了！一切都順利的話，會顯示成以下這樣： 大部分的天數都是 success 代表成功讀取資料，但是每間隔5天就會顯示兩次 fail，代表那可能是假日，然而不能保證就是了，也可能是你的網路斷掉XD，或是 code 有bug，就要單獨做測試，至少在我的電腦裡，它抓的滿好的。 整理 data 轉成 收盤價 time series接下來我們來看一下得到了什麼： 我們像上圖一樣，只拿取 “2017-11-15” 號的股價，會像上面這樣，變換不同的日期，可以得到不同的表。但這並不是我們想要的，我們想要有 time series，也就是看到某個欄位隨時間變動的圖表，於是我們做以下的轉換： 123close = pd.DataFrame(&#123;k:d['收盤價'] for k,d in data.items()&#125;).transpose()close.index = pd.to_datetime(close.index)close 在上面的程式中，現在我們只拿所有股票的 收盤價，並建構 close 這個 dataframe，這個 dataframe，假如你還不知道什麼是 dataframe，或對 dataframe 還不熟，可以參考連結學習一下。 輸入後會看到以下成品： 現在整張表都只剩 收盤價 了，而且還是按照日期排列，超讚的！我也覺得很開心，竟然兩行就處理完，我還以為要五行之類的，可見pandas真的很厲害！","raw":null,"content":null,"categories":[{"name":"財經Python教學","slug":"財經Python教學","permalink":"https://koreal6803.github.io/categories/財經Python教學/"}],"tags":[{"name":"python","slug":"python","permalink":"https://koreal6803.github.io/tags/python/"},{"name":"KD","slug":"KD","permalink":"https://koreal6803.github.io/tags/KD/"},{"name":"程式設計","slug":"程式設計","permalink":"https://koreal6803.github.io/tags/程式設計/"}]},{"title":"如何定義KD鈍化","slug":"KD1","date":"2017-11-14T14:22:16.000Z","updated":"2017-11-15T01:38:34.000Z","comments":true,"path":"KD1/","link":"","permalink":"https://koreal6803.github.io/KD1/","excerpt":"","text":"謝謝大家的鼓勵，最近有點太忙了，加上懶惰蟲上身，上禮拜中斷了XD，這禮拜會繼續加油！希望可以知道大家最想要看什麼，有看到留言說希望可以增加 python 有關的教學文！收到了，甚至可以更仔細說明，例如爬哪個網站之類的，我都可以幫你寫喔！大家想要看什麼可以在下面留言！ 今天先來看一下KD值好了，畢竟都還沒有看到太多指標相關的文章，其實KD值是非常簡單的，但在這邊我不想要介紹公式，因為太無聊了，而且每次看每次忘，我只想介紹如何看KD，以及參數如何設定： KD 的意義KD就是像坊間說的，兩條線，K跟D，一條反應較快，一條慢，都介於0～100之間。其意義在於股票在n天之內的相對位置，相對位置就是指n天內的最高最低，將當前的股價做normalize。 給一個簡單的例子，例如今天全班考試，有人拿30分，請問他考的好不好？ 答案是：不知道，因為沒有辦法比較，說不定考卷很難，30分就是全班最高分了！要是考卷出太難，大家的成績介於10～30之間，那老師就可以做 normalize 讓成績分佈好看一點： 新成績 = ( 成績 - 10 ) / (30 - 10) 這樣子，考最好的人就是100分，而考最爛的人就是0分，這個就是KD指標的意義，而每個學生的成績，就是每日的收盤價。 最後我們將 新成績 對時間平滑一次，變成K值，再對K值平滑一次，變成D值。 KD 的參數介紹完之後，K D 指標的參數就很好理解了： 9天：只考慮9天內的最高最低 3天：K的平滑 3天：D的平滑 平滑數字越大，數字變動越慢，雜訊越少平滑數字越小，數字變動越快，雜訊越多 我們用台積電為例子： 以上就是用正統的參數：9、3、3的KD指標（橘色、綠色），紫色是股價，可以看到KD值低檔交叉，算是好買點，最近就等著台積點低於20 XDD，（隨便說的，不是投資建議），我們試著換一個參數（9、6、6）看看： 可以看到曲線比較平滑一點，且K跟D差距比較明顯，相較於第一張圖，8月初比較不會有雜訊，但是反應變慢很多。 KD 坊間策略大家都說K超越D時，代表黃金交叉，可以買進K落於D時，代表死亡交叉，可以賣出 真的是這樣嗎？讓我們來看看： 黃金交叉買，死亡交叉賣： 參數（9,3,3）勝率：0.386參數（45,15,15）勝率：0.407參數（180,60,60）勝率：0.364 以下是這三個參數的獲利曲線： 結果好像不太好，看來真的不太能直接用，尤其短週期的KD，進出太平凡，導致手續費飆高，根本就是一直賠錢（紅色），用長週期的KD才稍微好轉。而藍線（不考慮手續費），則是中間的（類似週KD）表現比較好，但總之效果都不太好XD。 KD 鈍化另外一個網路上的偏方：KD鈍化，但大家沒有定義什麼時候賣，也沒有數據顯示幾天賣比較好，於是我們就來做個實驗： 買入條件：k, d （參數為 9，9，3）都大於80，至少 n 天則買入賣出條件：m 天賣出 當然還有很多種買法我沒測過，有興趣的話可以在下面留言，我幫你測！ 色溫越暖，代表10年獲利越高，這張圖的 x軸 為 m 天， y軸 為 KD大於80 至少 n 天，可以發現，幾乎十幾個交易日賣出是最保險的，而5~6天連續高檔，代表鈍化，會有比較好的效果，第十天突然異軍突起，超紅，可能有些股票末路狂飆吧。。。 然而上述是不考慮手續費的情況，所以當我們將最好的一組參數(10,12)拿來跑回測，會是這個樣子： 藍線代表沒有考慮手續費，一飛沖天紅現代表考慮手續費，完全沒賺到什麼錢 看來手續費真的差很大，短線選股真的是比較困難，但滿有潛力的就是了。 以下是我調整後覺得最好的參數： KD（5、3、3）連續10天大於75時買進 30 天 扣除手續費後終於贏過大盤！不知道KD拿來加入其它策略效果如何？另外，也可以跟我說想要看到哪一類的文章，或有什麼技術上的問題，都歡迎留言喔！","raw":null,"content":null,"categories":[{"name":"指標分析","slug":"指標分析","permalink":"https://koreal6803.github.io/categories/指標分析/"},{"name":"技術面","slug":"指標分析/技術面","permalink":"https://koreal6803.github.io/categories/指標分析/技術面/"}],"tags":[{"name":"如何買股票","slug":"如何買股票","permalink":"https://koreal6803.github.io/tags/如何買股票/"},{"name":"選股策略","slug":"選股策略","permalink":"https://koreal6803.github.io/tags/選股策略/"},{"name":"歷史回測","slug":"歷史回測","permalink":"https://koreal6803.github.io/tags/歷史回測/"},{"name":"簡易策略","slug":"簡易策略","permalink":"https://koreal6803.github.io/tags/簡易策略/"}]},{"title":"Python：利用Pandas輕鬆選股","slug":"Python：利用Pandas輕鬆選股","date":"2017-11-08T14:16:44.000Z","updated":"2017-12-12T09:56:16.000Z","comments":true,"path":"Python：利用Pandas輕鬆選股/","link":"","permalink":"https://koreal6803.github.io/Python：利用Pandas輕鬆選股/","excerpt":"","text":"上一篇的Python教學中，我們學會了怎麼爬財報，但是爬完的資料要怎麼運用呢？這篇會給大家一些方向。那篇有點不好意思，好像有兩個package沒有import，下次發現的話，可以在下方留言告訴我，我會盡快更正。 今天這篇的前置作業，請參考連結把當中的function給copy過來，然後就開始吧！ 資料處理首先，我們要先使用這個function，可以直接在jupyter視窗內輸入，來取得爬取今天的主角：”營益分析彙總表” 利用上次的爬蟲取得資料12df = financial_statement(107, 2, '營益分析彙總表')df 第一行，我們將 “營益分析彙總表” 儲存在 df 這個變數之中，第二行，我們希望將 df 給顯示出來，看一下它長什麼樣子第二行的功能是只有在jupyter 這個IDE才看的到喔～假如是寫在python script的話，就要用 print(df) 。假如一切OK就會是以下的樣子： 我們觀察一下這張表，有一行真的詭異：”合計：共 808 家” ，這行完全沒有任何可以用的資料，所以我們將它刪除： 刪除其中一行1df = df.drop(['合計：共 808 家'], axis=1) 接下來我們發現 index （每一列）的命名很怪，怎麼用 1,2,3… 來命名呢，應該要用股票名稱！？我們將股票的名稱當成新的 index： 將index換成股票名稱1df = df.set_index(['股票名稱']) 最後一步，我們希望資料欄位中，所有的元素都是 float ，所以要做一次轉換： 轉換成數值1df = df.astype(float) 資料處理一行版這樣就沒問題了！其實有個更快速的寫法，將以上三件事情寫成一行： 一行直接處理1df = df.drop(['合計：共 808 家'], axis=1).set_index(['公司名稱']).astype(float) 這樣就可以一次處理好！ 簡單的取出行列：我想單選出毛利率： 取得毛利率1df['毛利率(%)(營業毛利)/(營業收入)'] 假如今天我只想看 台積電 表現如何： 取得台積電資料1df.loc['台積電'] 取每一欄，跟取每一列，語法不太一樣喔！要小小注意一下。 假如我想同時看 台積電 跟 聯發科： 取得TSMC跟MTK的資料1df.loc[['台積電', '聯發科']] 數值分析接下來我們稍微分析一下這個表中的數字：數值分析1df.describe()這樣簡單一行，就可以得到每一欄的數值分析，當初我知道這個 df.describe() 也覺得很神。 毛利率分佈圖只要簡單一行，我們就可以看到全台灣的上市公司，毛利率分佈圖： 毛利率分佈圖12％matplotlib inlinedf['毛利率(%)(營業毛利)/(營業收入)'].hist(bins=range(-100,100)) 選股選股也很簡單，只要寫成以下條件： 條件12cond1 = df['毛利率(%)(營業毛利)/(營業收入)'].astype(float) &gt; 20cond2 = df['營業利益率(%)(營業利益)/(營業收入)'].astype(float) &gt; 5 就是說 第一個欄位：毛利率，我們希望找出大於20的 股票另外呢 第二個欄位：營業利益率，我們希望找出大於5的 股票 那我們就可以用這兩個條件來選股： 選股1df[cond1 &amp; cond2] 搭啦！其實外面的選股軟體也就這樣而已啦！還收費這麼貴XDD 如果你覺得觀賞這個blog有點收穫，記得存到我的最愛定期觀看喔！我每個禮拜都會有一些更新。 這次教學的檔案：notebook.ipynb檔","raw":null,"content":null,"categories":[{"name":"財經Python教學","slug":"財經Python教學","permalink":"https://koreal6803.github.io/categories/財經Python教學/"}],"tags":[{"name":"python","slug":"python","permalink":"https://koreal6803.github.io/tags/python/"},{"name":"選股","slug":"選股","permalink":"https://koreal6803.github.io/tags/選股/"},{"name":"程式設計","slug":"程式設計","permalink":"https://koreal6803.github.io/tags/程式設計/"}]},{"title":"超短線上影黑密技！","slug":"超短線上影黑密技！","date":"2017-11-03T17:44:31.000Z","updated":"2017-11-03T20:39:19.000Z","comments":true,"path":"超短線上影黑密技！/","link":"","permalink":"https://koreal6803.github.io/超短線上影黑密技！/","excerpt":"","text":"很多來拜訪本blog的人，都是搜尋 “財報狗” 來的，大部分都是價值投資策略，而沒有使用技術分析，或曾經使用技術分析，因為太難用了而放棄。價值投資跟技術分析最大的差異是，價值投資看的財報是經過嚴格審核的精確數字，而技術分析是在看雜訊中找規律。 有人會說價值投資，是學會看一家公司的價值，而不像技術分析，是在玩股票。我覺得各有各的好，都是在一堆數字裡面找規律，只要不要被股票玩，哪一種策略我都願意接受XDD。 今天想當一下標題黨，我幫這個策略取了一個超級中二的名字：”超短線上影黑密技”，無論看幾眼都覺得很彆扭，但是還是讓我一一的解釋每個字的用意： 超短線這個絕對是 “日” 週期裡面，最短的策略了，因為這個策略持股一天隔天直接賣出，適合不想要跟某支股票產生愛恨情仇，喜歡斬釘截鐵，無情操作的人。 上影這絕對不是火影忍者裡的上忍、火影，其實是個上影線策略，也就是當看到上影線，那代表這支股票可以空，當然也沒這麼簡單，要有一層層過濾。 黑黑就是指下跌的意思，這是一個空股票的策略，我不常寫空股票的策略，因為本身沒有在融資融券，但就是因為很少有人空股票，這個策略才沒有因為被挖掘而失效，放空有時候比看多的策略好寫。 密技好啦，其實這也不算什麼密技，上影線大家也不是不知道： 大家都說看到上影線，代表要下跌了，但是這是很不負責任的介紹，因為沒人跟你講會跌多少？上影線多長算長？什麼時候買賣？完全沒有數據，頂多是附圖說，你看這支股票，上影線出現後一路跌。 策略人多口雜，沒有回測看看就好同樣上影線，可以找到100張K線圖，驗證之後真的會跌，反過來，也可以找到100張K線圖，驗證之後其實會漲。 看過很多自稱是技術分析高手，分享一些方法，KD、MACD、OBV什麼都用上了，回測起來績效不太好，也不知道他是靠投資掙錢，還是靠嘴\b掙錢。也看過一些人，突然PO文說自己打開多年投資經驗的任督二脈，把blog加密起來，付費觀看，火紅一時。然而過了半年，那個人不見了，消失在茫茫股海中，應該是他的策略就好這麼幾個月，之後就爛掉了XDD。 回測的重要性所以我覺得回測很重要，才能知道是否安穩的獲利，而且還不用每天盯盤。可能有人會反問： W 底要怎麼回測？有些型態學根本不可能寫程式怎麼辦？要是我的話，就會選擇不用，反正還有其它的策略可以用，我比較膽小，只用有驗證過的策略XD。 策略突然啪啦啪啦寫了一堆，不好意思讓各位眼睛痛了，以下就是本篇策略： 上影線佔 60% （（高 - max(收, 開)）／（高 - 低）&gt; 0.6） 突然放量 （成交量 &gt; 十日均量 * 4） 流動率高 （十日均量 &gt; 1000） 股票不在高檔 （收盤 - 120日最低價）/ (（120日最高價 - 120日最低價）&lt; 0.7 第四條拿出來說明一下，高檔的股票，有時候會被主力炒作，太飆了，還是不要拿來放空比較好XD。 以下的權益曲線是空1天，即回補，我另外有測試n天的，基本上獲利更高，但曲線比較不好看。 但這個策略沒有加上手續費，槓桿是調整成0，但假如考慮融券手續費，效果可能就沒那麼好就是了，當沖手續費低會更好？滿有可能的。 下圖是 賣出/買入 價格的漲跌分佈圖： 我們可以看到，這些股票下跌（小於1）的數目真的比較多（橘色），然而加上手續費（約千分之8），後，就沒有這麼明顯了（淺藍色），手續費多少是關鍵！像我這種散戶，手續費太高自然是無法使用這個策略QQ。 可以看到每年都只買了超少次，而且快進快出，大部分時候是空手狀態，很輕鬆。 可以看到最大虧損也不是很嚴重，尤其時近期，幾乎很少虧損到20%的投資資產。 當然，大部分的策略看看就好，這個策略也是（由於手續費的關係），重點應該是學到一些東西，以下列舉此篇的重點： 用簡單的公式看股價高檔低檔（條件4） 股票不再高檔、近期上影線放量，假如想放空，可以空n天，(n&lt;10)回測獲利都是很可觀，持有時間長，股價漲跌波動大，可以淡化手續費的影響，但持有時間越長，權益曲線越不美。 股票不在高檔、近期上影線放量，假如想買多，隔幾天再買入\u001f較可能買到更好的價格！（假如你用的是長線策略） 假如大家有興趣，我想找時間來跑一些統計結果，看看上影線對於股價的影響。假如覺得本blog還可以的話，可以定期來觀看～我每個禮拜都會更新幾篇喔！","raw":null,"content":null,"categories":[{"name":"指標分析","slug":"指標分析","permalink":"https://koreal6803.github.io/categories/指標分析/"},{"name":"技術面","slug":"指標分析/技術面","permalink":"https://koreal6803.github.io/categories/指標分析/技術面/"}],"tags":[{"name":"如何買股票","slug":"如何買股票","permalink":"https://koreal6803.github.io/tags/如何買股票/"},{"name":"選股策略","slug":"選股策略","permalink":"https://koreal6803.github.io/tags/選股策略/"},{"name":"歷史回測","slug":"歷史回測","permalink":"https://koreal6803.github.io/tags/歷史回測/"},{"name":"簡易策略","slug":"簡易策略","permalink":"https://koreal6803.github.io/tags/簡易策略/"}]},{"title":"Python 財報爬蟲","slug":"Python-財報爬蟲-1-綜合損益表","date":"2017-11-02T21:19:27.000Z","updated":"2017-12-12T09:56:19.000Z","comments":true,"path":"Python-財報爬蟲-1-綜合損益表/","link":"","permalink":"https://koreal6803.github.io/Python-財報爬蟲-1-綜合損益表/","excerpt":"","text":"本系列已經介紹了各式各樣的爬蟲，從每天、每月，現在終於要季了，在尋找了各式各樣的網站，交叉比對之下，發現公開資訊觀測站的總報表還滿好抓的，所以就從這個網站下手。 Python中有個非常好用的package，叫做pandas，利用它我們就可以簡潔的把網頁上的表格，轉換成dataframe，也就是整理成程式看的懂的表格，我們幾乎不需要做太多的處理！這也是我喜歡用python一點。 這邊我用的是python3 喔～可能要注意一下，另外pandas的版本不一樣，可能會導致網頁轉dataframe的時候，有點小不一樣，可能要稍微檢查一下，我是用0.20.3這個版本。 財報爬蟲1234567891011121314151617181920212223242526272829303132333435363738394041import requestsimport pandas as pdimport numpy as npdef financial_statement(year, season, type='綜合損益彙總表'): if year &gt;= 1000: year -= 1911 if type == '綜合損益彙總表': url = 'http://mops.twse.com.tw/mops/web/ajax_t163sb04' elif type == '資產負債彙總表': url = 'http://mops.twse.com.tw/mops/web/ajax_t163sb05' elif type == '營益分析彙總表': url = 'http://mops.twse.com.tw/mops/web/ajax_t163sb06' else: print('type does not match') r = requests.post(url, &#123; 'encodeURIComponent':1, 'step':1, 'firstin':1, 'off':1, 'TYPEK':'sii', 'year':'103', 'season':'01', &#125;) r.encoding = 'utf8' dfs = pd.read_html(r.text) for i, df in enumerate(dfs): df.columns = df.iloc[0] dfs[i] = df.iloc[1:] df = pd.concat(dfs).applymap(lambda x: x if x != '--' else np.nan) df = df[df['公司代號'] != '公司代號'] df = df[~df['公司代號'].isnull()] return df 這個function的用法，就跟月爬蟲是一樣的，可以直接輸入西元或國曆，然後第n季，只能輸入1～4季喔～不然會當掉，最後還要輸入哪一種財報： 綜合損益彙總表 資產負債彙總表 營益分析彙總表 都可以爬取喔！以下就是利用這個function所爬取的資料 大家可以看到有些columns怪怪的，例如 “合計：共 808 家” 這個是什麼鬼XDD，由於我一次爬了三個表，這一點小問題應該還好啦！XDD，可以再寫一行code刪除該列就好了。 基本上資料都是對齊的，不用太擔心。 爬完之後就交給大家自由發揮囉～～可以做很多事情。總算各種股價、財報、月報的爬蟲都分享完了～ 接下來就是真的利用這些資料來選股囉！","raw":null,"content":null,"categories":[{"name":"財經Python教學","slug":"財經Python教學","permalink":"https://koreal6803.github.io/categories/財經Python教學/"}],"tags":[{"name":"python","slug":"python","permalink":"https://koreal6803.github.io/tags/python/"},{"name":"選股","slug":"選股","permalink":"https://koreal6803.github.io/tags/選股/"},{"name":"程式設計","slug":"程式設計","permalink":"https://koreal6803.github.io/tags/程式設計/"}]},{"title":"外資大賣，反而要買！？","slug":"跟著外資買股票","date":"2017-10-30T13:57:49.000Z","updated":"2017-10-31T10:42:34.000Z","comments":true,"path":"跟著外資買股票/","link":"","permalink":"https://koreal6803.github.io/跟著外資買股票/","excerpt":"","text":"外資近年來幾乎稱霸台股，每天台股上上下下，都得看它臉色，今天我們來進行簡單的參數優化，看看跟隨外資買賣有沒有搞頭！ 最佳化外資買賣策略假設 n 天內外資總買賣超超過 a 張，則買入，而低於 -a 張，就賣出，我們可以得到一下這張表： 在上圖中，跑了25種不同的回測，每一次回測，n跟a的值都不一樣，紅色代表獲利較多的策略，而藍色代表獲利較少的策略，我們發現 a = 0 的時候結果普遍比較好，另外 n=10~30 天都是合理的選擇，太高或太低不夠具有代表性。 當然這樣的條件其實還是太弱了，完全沒辦法當作一個策略，一定得配合其它的條件，目前開發的策略中，我也有加入這個條件，有些策略無效，但有些績效明顯上升很多，可以把它想成一個助攻手。假如你本身也有寫偏短線的回測，可以將 外資10天買賣超 &gt; 0 這個條件加入看看，有時候效果會變好。然而，假如你沒有寫回測的話，其實外資買賣對你的影響有限，幾乎不需要管它。 外資大買大賣，跟著操作？外資已經很進步了，這個時代並不是看外資大買，隔天股票就會漲了，甚至，看到外資大買，隔天最好還是別輕舉妄動比較好，以下我做了兩個實驗，一個是外資大買，一個是外資大賣，不考慮手續費： 外資總買賣 - 昨天外資總買賣 &gt; 5000 （外資大買） 持該股兩天後賣出 外資總買賣 - 昨天外資總買賣 &lt; -5000 （外資大賣） 持該股兩天後賣出 你以為一號策略比較好嗎？ 錯… 我回測時也小震驚了一下，原來外資大買，隔天買入可能會不太好！還不如趁外資大賣的時候買。怎麼會這樣！？實在是太顛覆常理了… 上圖可以看出，策略2比策略1的報酬好很多。其結論是外資大買，請不要跟著買，因為說不定是外資太多人看了，導致股票隔天衝很高，導致買在高點。相反，大家看到外資大賣，也會恐慌性賣出，造成隔天開盤價格異常低，而剛好被我們買到了！賺到了短線價差。只能說，股票就是人性呀！大家還是太依賴外資籌碼了。總之假如你沒有好策略的話，請不要直接看外資來決定買什麼。","raw":null,"content":null,"categories":[{"name":"指標分析","slug":"指標分析","permalink":"https://koreal6803.github.io/categories/指標分析/"},{"name":"籌碼面","slug":"指標分析/籌碼面","permalink":"https://koreal6803.github.io/categories/指標分析/籌碼面/"}],"tags":[{"name":"如何買股票","slug":"如何買股票","permalink":"https://koreal6803.github.io/tags/如何買股票/"},{"name":"選股策略","slug":"選股策略","permalink":"https://koreal6803.github.io/tags/選股策略/"},{"name":"歷史回測","slug":"歷史回測","permalink":"https://koreal6803.github.io/tags/歷史回測/"},{"name":"簡易策略","slug":"簡易策略","permalink":"https://koreal6803.github.io/tags/簡易策略/"}]},{"title":"超簡單用python抓取每月營收","slug":"超簡單用python抓取每月營收","date":"2017-10-28T18:30:39.000Z","updated":"2017-12-12T09:56:08.000Z","comments":true,"path":"超簡單用python抓取每月營收/","link":"","permalink":"https://koreal6803.github.io/超簡單用python抓取每月營收/","excerpt":"","text":"今天承接上次的超簡單python系列，教大家如何得到每家企業每個月的營收。這個系列的最終目的就是讓大家可以創造自己的投資自動化程式，甚至擁有自己的看盤軟體。 真的不要把程式設計想像的很難，感覺爬2000多支股票，並整理資料，好像是一件很累很痛苦的是情，但真的只需要30行，你可能會覺得這些代碼真的太短了，但真的就是這麼短，然而這必須係建立在python或是R，這些package豐富的腳本語言才有可能辦到，這兩個語言都不錯，但我比較喜歡寫python就是了XD，因為python還可以做很多酷炫的是情，例如寫server，或是一些自動化工具，然而R好像沒有這麼多功能？ 那我們就來爬取吧！首先先決定要爬哪個網頁，我選擇的是TWSE官方網頁它的網址是http://mops.twse.com.tw/nas/t21/sii/t21sc03_103_2_0.html 各位有看到103這個數字嗎？其實這個就是年份，而緊接在後面的 “2” 就是月份，所以只要改動這兩個值，我們就可以下載不同年月的歷史資訊： 月爬蟲1234567891011121314151617181920import pandas as pddef monthly_report(year, month): # 假如是西元，轉成民國 if year &gt; 1990: year -= 1911 # 下載該年月的網站，並用pandas轉換成 dataframe html_df = pd.read_html('http://mops.twse.com.tw/nas/t21/sii/t21sc03_'+str(year)+'_'+str(month)+'_0.html') # 處理一下資料 df = html_df[0].copy() df = df[list(range(0,10))] column_index = df.index[(df[0] == '公司代號')][0] df.columns = df.iloc[column_index] df['當月營收'] = pd.to_numeric(df['當月營收'], 'coerce') df = df[~df['當月營收'].isnull()] df = df[df['公司代號'] != '合計'] return df 以上這段程式碼就是一個function可以在其它地方隨時呼叫，code真的超短，但這樣就夠了！ 接下來我們隨意讀取任意年月份（可以用民國或是西元都支援）： 月爬蟲1234567# 民國100年1月monthly_report(100,1)# 西元2011年1月monthly_report(1991,1) 就會跑出以下的表格： 其實寫程式真的好簡單XDD，坊間財經軟體都好貴，不就是幾行code而已，是不是！目前已經交完 日、月 的資料爬取了，下一次就是一季囉！ 當然還有各式各樣可以爬的東西，有時間再跟大家介紹～","raw":null,"content":null,"categories":[{"name":"財經Python教學","slug":"財經Python教學","permalink":"https://koreal6803.github.io/categories/財經Python教學/"}],"tags":[{"name":"python","slug":"python","permalink":"https://koreal6803.github.io/tags/python/"},{"name":"選股","slug":"選股","permalink":"https://koreal6803.github.io/tags/選股/"},{"name":"程式設計","slug":"程式設計","permalink":"https://koreal6803.github.io/tags/程式設計/"}]},{"title":"本益成長比真的越低越好！？","slug":"比本益比更好用的本益比成長率！","date":"2017-10-26T13:58:56.000Z","updated":"2017-10-28T19:31:59.000Z","comments":true,"path":"比本益比更好用的本益比成長率！/","link":"","permalink":"https://koreal6803.github.io/比本益比更好用的本益比成長率！/","excerpt":"","text":"很久之前有寫過 本益比 如何使用，本益比 就是看企業股價和獲利之間的關係，選擇小一點的本益比是可以幫助我們選到好股票的，但是每一家公司的本益比都有著天壤之別，所以必須要校正， 本益成長比 就是一個本益比的進化版。本益成長比 不只可以看當下，還考慮了一家公司未來是否能繼續盈利一個指標。 以下是 本益成長比 的公式： 近4季稅後淨利年增率：(近4季稅後淨利總和 / 去年同期近4季稅後淨利總和 - 1) * 100%本益成長比（PEG）：本益比/近4季稅後淨利年增率 看起來考慮了公司的成長，所以當PEG越小，代表 本益比 越小或是 淨利年增率 越大，對投資人來講都是好事情！ 理論上是這樣，而實際上真的是這樣嗎？我們不妨接著看！ 首先我們先算出當前所有上市上櫃其PEG的分佈圖： 可以發現越接近0的越多公司，這種分佈還滿奇特的，我以為接近0的公司會很少才對，沒想到事實竟然跟我想像的相反，感覺好像很多公司的淨利年增率很猛！然而假如我哪裡做錯了，可以直接留言糾正我。 我們就將公司分成好幾組，每60天選擇PEG在只定範圍內的股票，就可以畫成下圖： 簡直有夠亂…這說明了PEG難道無效？！感覺是真的很難分辨出越小越好，還是越大越好…，所以我們再畫另一張圖，更好的判斷PEG大小跟獲利的高低： 圖中的X軸是PEG從小到大，而Y軸是平均獲利，我們發現，當PEG太大獲利真的很差。但當PEG非常小的時候，效果也非常不好。PEG約等於0.5的時候，會有最好的獲利。 只能說PEG在台股可能不是非常的好用，PEG不能一味的追求越小越好，最好選擇PEG等於 0.5 左右的股票，歷史回測會有比較好的結果。 我覺得另一個可能的原因是，當PEG過小的時候，可能選入了一些短期內獲利爆起爆落的公司，其公司股價可能先盛後衰，造成投資上的虧損。但我不太確定，還必須做更多功課才能釐清。 總之以統計的結果來看，PEG並沒有特別顯著的功能，相較於其它介紹過的指標。也有可能是我實驗那裡做錯了，可以留言跟我討論，我會儘速更改！確保大家獲得正確的內容～！","raw":null,"content":null,"categories":[{"name":"指標分析","slug":"指標分析","permalink":"https://koreal6803.github.io/categories/指標分析/"},{"name":"基本面","slug":"指標分析/基本面","permalink":"https://koreal6803.github.io/categories/指標分析/基本面/"}],"tags":[{"name":"選股","slug":"選股","permalink":"https://koreal6803.github.io/tags/選股/"},{"name":"本益比","slug":"本益比","permalink":"https://koreal6803.github.io/tags/本益比/"},{"name":"指標","slug":"指標","permalink":"https://koreal6803.github.io/tags/指標/"},{"name":"PEG","slug":"PEG","permalink":"https://koreal6803.github.io/tags/PEG/"},{"name":"本益成長比","slug":"本益成長比","permalink":"https://koreal6803.github.io/tags/本益成長比/"}]},{"title":"超簡單台股每日爬蟲教學","slug":"超簡單台股每日爬蟲教學","date":"2017-10-24T22:17:06.000Z","updated":"2017-12-12T09:56:11.000Z","comments":true,"path":"超簡單台股每日爬蟲教學/","link":"","permalink":"https://koreal6803.github.io/超簡單台股每日爬蟲教學/","excerpt":"","text":"今天教大家如何下載今日的股價，並從中篩選本益比較低的股票，重點是超簡單，只要15行以內就可以辦到！以後這個blog會偶爾釋放一些程式片段，讓大家組裝成一個功能健全的回測＋當日選股的架構。 大家最終最終會學到： 如何爬取每日資訊 如何爬取財報 利用上述資料來篩選股票 觀察篩選後的股票在歷史回測中是否能獲利 每日計算當天獲利與明天操作 只要長期追蹤這個blog，當我某天心血來潮就會放上一些code，讓大家能夠自行學習並拼裝成自己的系統，以下是我的系統的節圖： 可以看到我的系統內每天都有數個選股策略在運行，選股策略每天會公布隔天的操作方式，也可以利用這個介面編寫回測，並驗證策略的效果。磁力回測是我們之前黑客松比賽用的名字，其實我們是台大黑客松第一名得獎團隊，後來又於中信金控黑客松得到第一名，才開始了量化回測之路，現在由於大家比較忙，目前只剩我還在使用這套系統而已XDD。 這套系統非常完善，我們編寫了幾套策略在上面，獲利還算OK，當然我不可能直接把這套系統公布出來，畢竟這是大家一起做的心血，然而有一些簡單卻重要的功能，我會在這個blog上面分享給大家。只要持續關注本blog，最後大家可以拼裝出自己的系統！ 那就廢話不多說，來看看如何使用 python 爬取當天大盤，首先，我們得先安裝 python 的 package： requests ：幫我們抓取 csv 檔 pandas：幫我們選股 然後就可以開始了，首先抓取台股的資料表： crawler123456789101112131415import requestsfrom io import StringIOimport pandas as pdimport numpy as npr = requests.post('http://app.twse.com.tw/ch/trading/exchange/MI_INDEX/MI_INDEX.php', data=&#123; 'download': 'csv', 'qdate':'106/10/24', 'selectType':'ALL',&#125;)r.encoding = 'big5'df = pd.read_csv(StringIO(\"\\n\".join([i.translate(&#123;ord(c): None for c in ' '&#125;) for i in r.text.split('\\n') if len(i.split('\",')) == 16 and i[0] != '='])), header=0) 基本上這個 code 可以直接複製貼上就可以用了！我們可以把df印出來： 可以看到我們有了所有上市上櫃的股票，當天所有的資料！ 接下來就是選股時間，我們想要選擇 本益比 &lt; 15 的所有股票： select stocks1df[df['本益比'] &lt; 15] 搭拉！是不是發現選股好簡單！我們之後還會有更多的教學，讓大家不只是選取本益比，還有更多更多的財報數據喔！ 敬請期待！","raw":null,"content":null,"categories":[{"name":"財經Python教學","slug":"財經Python教學","permalink":"https://koreal6803.github.io/categories/財經Python教學/"}],"tags":[{"name":"python","slug":"python","permalink":"https://koreal6803.github.io/tags/python/"},{"name":"選股","slug":"選股","permalink":"https://koreal6803.github.io/tags/選股/"},{"name":"程式設計","slug":"程式設計","permalink":"https://koreal6803.github.io/tags/程式設計/"}]},{"title":"絕無僅有的超強指標！","slug":"絕無僅有的超強指標！","date":"2017-10-23T18:24:24.000Z","updated":"2017-10-28T19:33:17.000Z","comments":true,"path":"絕無僅有的超強指標！/","link":"","permalink":"https://koreal6803.github.io/絕無僅有的超強指標！/","excerpt":"","text":"今天介紹一個滿常使用的指標，這套指標是我個人發明的，外面絕對看不到，然而我只講個大概，可以自己去實做，或是去拿來衡量個股。 上一篇中，機器學習發現月收入是一個很好的指標，而且不能只看最近一個月，要一次看好幾個月，其實跟我做出來的實驗結論一致。月收入真的非常好用！ 今天介紹的這個指標，其概念是：希望某股月營收越來越高，之後股價越容易上漲。但是很難定義越來越高，因為有時候會有一些不規則的地方，我們必須要先做一道手續讓它看起來是一個升冪排列，如下圖： 原本的月營收為橘色，雖然看起來有上漲的趨勢，但是參差不齊，所以很難寫成程式判斷條件。可以看到我們把每三個月做一次平均，可以發現曲線變得更平滑了，而且變成升冪排列！ 所以我們就可以寫一個條件，叫做：藍色線段連續N個月越來越大。 這樣篩選出來的股票真的很猛！ 下圖可以看出，假如我們持有這個方法篩選出來的股票，光是這個單一指標從2008年到現在有5倍的績效，我們可是只用了這個指標而已！算是滿難能可貴的。 而且選出來很多股票，還有很多過濾的空間！可以從中再繼續篩選股票，這個是我動不動就會幫策略加上的一個條件！ 其中還可以再篩選，例如本益比、股價淨值比等等，可以自由搭配！ 這個指標有兩個參數： 當我們要平滑月營收曲線時，取最近的 M 個值平均，產生新的曲線 新的曲線連續 N 個月不斷變高。 M 跟 N 是很難決定的，我這邊所使用的參數是 M=4 跟 N=5，是試過所有參數的結果。當然大家不一定要用這麼數學的方式，每一支股票拿來慢慢算。最簡單的方法就是用眼睛感覺，股票月營收從大趨勢看，有沒有越來越高，偶爾的參差不齊可以忽略。 以上就是個人覺得超好用的，且網路上沒人在分享的方法！","raw":null,"content":null,"categories":[{"name":"指標分析","slug":"指標分析","permalink":"https://koreal6803.github.io/categories/指標分析/"},{"name":"基本面","slug":"指標分析/基本面","permalink":"https://koreal6803.github.io/categories/指標分析/基本面/"}],"tags":[{"name":"選股","slug":"選股","permalink":"https://koreal6803.github.io/tags/選股/"},{"name":"指標","slug":"指標","permalink":"https://koreal6803.github.io/tags/指標/"}]},{"title":"利用Machine Learning 選股新手教學","slug":"利用Machine-Learning-選股新手教學","date":"2017-10-20T10:58:23.000Z","updated":"2017-12-12T09:56:06.000Z","comments":true,"path":"利用Machine-Learning-選股新手教學/","link":"","permalink":"https://koreal6803.github.io/利用Machine-Learning-選股新手教學/","excerpt":"","text":"最近一直在弄Machine Learning，都快忘記寫blog了，哈！ 其實要machine選股真的很簡單！這篇blog就會帶大家從頭開始，用最簡單的方式，將Machine Learning實做！這邊只是給大家一個簡單的架構，可以自己去嘗試優化，讓它更聰明！以下是用mac或是linux的command line完成的，假如有任何錯誤或不懂的地方歡迎聯絡我喔～ 1. 取得資料只要寄到我的信箱，就會免費傳給你一個data.csv檔案，裡面就是training的資料，這個只能用於學術研究，請勿用於商業用途。 為什麼要這麼麻煩？！不能直接把連結公布於網站上就好了嗎？絕對沒有要收集email的意思，最主要是因為這資料的來源比較複雜。 2. 架設環境假如你已經會使用python了，那可以直接跳過這個步驟，假如不會的話，可以照著下面的步驟完成： 到官網下載Python3，並且安裝 安裝pip 安裝virtualenv 為何要安裝pip呢？pip可以幫我們下載Machine Learning所需要的package（也就是python的libraries）。 為何要安裝 virtualenv 呢？virtualenv可以幫你產生project的環境，每一個project用自己的libraries，這樣比較不容易有衝突。 3. 建置project首先，先用virtualenv創建projectcreate project12virtualenv finance_mlcd finance_ml 接下來必須要開啟工作環境：activate and deactivate project12source bin/activatedeactivate 這邊有兩行，一行是開啟環境，一行是結束環境！假如你還要繼續，先不要輸入第二行。將data.csv複製到當前資料夾，並且安裝python packages install python packages1234pip install jupyterpip install pandaspip install sklearnpip install matplotlib 4. 開工！首先就是開啟jupyter notebook，並開一個python的環境start notebook1jupyter notebook這樣會開啟一個網頁版的GUI介面，只要新增python的notebook就可以用了！接下來進入我們的主題：機器學習程式碼！ A. 讀入資料這邊我們用 pandas 讀入所需要的資料，index_col可以設定要哪一個columns當作index。這邊的index選擇在 data.csv 中，第一個未命名的column。read data12import pandas as pddata = pd.read_csv('data.csv', index_col='Unnamed: 0') B.處理資料我們將資料分成三類，一類是跑回測用的dbacktest，另一類是機器學習用的dtraning，另外一個是traning完用來評估的dtest。 process data1234567891011121314from sklearn.model_selection import train_test_split# clear data 將爛資料去掉data.dropna(how='any', inplace=True)# 選擇2015年以後的資料作為回測用dbacktest = data[data['buy_date'] &gt; '2015']# 將其於的資料再分成兩類：dtrain 跟 dtestdataTrainTest = data[data['sell_date'] &lt; '2015']dtrain, dtest = train_test_split(dataTrainTest, test_size=0.10, random_state=42)# 設定我們的feature要用哪些features = data.columns[5:-1] C. 機器學習訓練資料這邊我們用很簡單的隨機森林，來完成的，可以參考連結來學習怎麼樣調整參數，這應該算是機器學習中，前製作業最少的模型了！ learning1234567891011121314from sklearn.ensemble import RandomForestClassifier# 創建機器學習的modelrf = RandomForestClassifier(n_estimators=10, criterion='gini', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features='auto', max_leaf_nodes=None, bootstrap=True, oob_score=False, n_jobs=1, random_state=None, verbose=0, warm_start=False, class_weight=None)# 分類能獲利的股票rf.fit(dtrain[features], dtrain['獲利'] &gt; 1) D. 結果你說這樣就結束了！？對呀結束了。其實machine learning要簡單真的就只是這樣而已！接下來我們來看一下它預測的准不準： predict123456789101112131415result = rf.predict(dtest[features])print('test data')print('gain before filtered', dtest['獲利'].mean())print('gain after filtered', dtest['獲利'][result].mean())print('num stocks', sum(result), '/', len(dtest))result = rf.predict(dbacktest[features])print('backtest data')print('gain before filtered', dbacktest['獲利'].mean())print('gain after filtered', dbacktest['獲利'][result].mean())print('num stocks', sum(result), '/', len(dbacktest)) 假如一切順利就會看到以下結果： 這邊的gain是指平均的報酬率，也就是所有股票的價格在賣出時是否賺錢，小於一就是虧，大於一就是賺。結果看起來還滿猛的！竟然有接近7%的報酬率！但真的是如此嗎？我們把它畫成隨著時間，本金成長的獲利圖：backtest1234567891011%matplotlib inlinedbacktest['預測'] = pd.Series(result, index=dbacktest.index)dates = list(set(dbacktest['buy_date']))dates.sort()history = []for d in dates: history.append(dbacktest[(dbacktest['buy_date'] == d) &amp; (dbacktest['預測'])]['獲利'].mean()) pd.Series(history, index=dates).cumprod().plot() 發現其實沒有想像中那麼好。這是意料之中的結果，畢竟我們的learning時間才幾秒鐘，假如增加n_estimator這個變數，是否可以讓結果更好？假如使用Regression會不會更好？假如改變一下機器學習的參數、或修改一下features，是否可以選到更好的股票呢？就留給各位慢慢玩！以下是可以改進的地方： feature engineering：將features做修正、刪除、normalize等 篩選能獲利X%的股票 classification vs regression：可以兩種都試試看 不同的model，可以試試SVM、NN、XGBoost等等 不同的model都有可以調整超多參數來達到優化 利用early stop 來預防overfitting。 我只是列出最基本的，還有很多可以玩的，這也是我這禮拜正在弄的東西，害我都沒時間寫網誌XDD 假如你有意外的發現，可以聯絡我，我可以幫你架設一個選股平台，我們再來討論怎麼分潤之類的，但前提是結果必須要比我的好才行XDDD。","raw":null,"content":null,"categories":[{"name":"財經Python教學","slug":"財經Python教學","permalink":"https://koreal6803.github.io/categories/財經Python教學/"}],"tags":[{"name":"機器學習","slug":"機器學習","permalink":"https://koreal6803.github.io/tags/機器學習/"},{"name":"Machine Learning","slug":"Machine-Learning","permalink":"https://koreal6803.github.io/tags/Machine-Learning/"},{"name":"python","slug":"python","permalink":"https://koreal6803.github.io/tags/python/"}]},{"title":"Machine Learning 表示：看季線最無用！","slug":"Machine-Learning-表示：看季線最無用！","date":"2017-10-15T16:10:12.000Z","updated":"2017-10-28T19:36:16.000Z","comments":true,"path":"Machine-Learning-表示：看季線最無用！/","link":"","permalink":"https://koreal6803.github.io/Machine-Learning-表示：看季線最無用！/","excerpt":"","text":"最近喜歡做 machine learning 的預測，發現機器學習看財報，預測下季收盤價還滿準的。 Alpha Go 讓人類的圍棋可以到達新境界，機器學習中學習到一些它判斷財報的方法，今天來剖開上一篇教學中，機器學習的大腦，來看一下機器人如何選股！ Machine Learning：季線無用！機器學習的模型就像是一個黑盒子，很難知道他其中的工作原理，只能看到線性化後，每個feature的權重。發現了一個很有趣的狀況，就是 “股價在季線上” 這個條件，權重超低！ 假如你買賣股票也跟我的模型一樣，是根據每一季財報來決定，那機器學習的結果，表示不用看季線，因為幾乎沒啥用。 看季線還不如看近10週收盤價！發現把週收盤價納入參考，也可以增進效果。代表長線的技術指標是有用的！ 重要的財報數據以下features的重要程度按順序排列： 月營收增長率很重要，而且不能只看一個月！ 當季ROE跟去年同季ROE很重要！ EPS季增長率也很重要！ 總資產轉換率 較不重要，但也不賴啦！ 其它，重要程度：股價淨值比 = 負債比率 &gt; 本益比 = 殖利率 週收盤價比上面的難用，但好像可以判斷一些東西，但一定是非線性的，所以不知道其中原理XD 重要程度趨近於0的：收盤 &gt; 季線 真的很少網站可以像這裡一樣，告訴你哪些是比較有用的數據，哪些比較難用，我們真的要跟機器來學習，一般人都會認為股價淨值比、本益比是最重要的，但是這邊做出了一個不一樣的結論：營收是否增加才是股票漲跌的關鍵。 這樣做的用意只是給大家一個概念，也不代表機器學習的結果就得奉為聖旨。 機器學習評分財報機器學習模型最後會幫每個股票評分，總共100分，最低0分，50分就是他覺得股票不漲不跌，所以我們將每季評分分成四組，由低到高： 可以看到有很多的評分都在0分跟100分，因為分數算法的關係，100分的部分可以想成超過一百分！（國軍online） 之後會在將 0 跟 100 分再區分清楚一點～ 回測！接下來我們將分數由低到高分4組，分別回測： 報酬率由低到高很漂亮的一字排開！分數低果然很差，而分數高真的很好。可以看到50分以上的兩組，其獲利贏過大盤（黃色），而50以下的兩組，其獲利小於大盤。 財報好的公司，抗跌！資優生組別（灰色）幾乎每季都漲！唯一一次跌是在2015年中，當時大盤大跌，但資優生那組並沒有跌非常多。 穩定的報酬率大盤三年1.05倍，而高分財報組1.75倍，平均報酬率20％每年。 別用這個策略亂放空！從上圖也可以看到一個現象：不要亂放空，不然會慘慘的。就算財報在爛，最差的那組還是沒辦法一直跌，但財報最好的那組可以漲很多！ 這裡用2015年以前的資料訓練，2015年以後拿來回測，所以這個應該就會是實際策略上線的狀況！（理論上XDD） 接下來會閉關幾天，把這個策略放在雲端，大家都可以去使用！","raw":null,"content":null,"categories":[{"name":"AI看股票","slug":"AI看股票","permalink":"https://koreal6803.github.io/categories/AI看股票/"}],"tags":[{"name":"機器學習","slug":"機器學習","permalink":"https://koreal6803.github.io/tags/機器學習/"},{"name":"Machine Learning","slug":"Machine-Learning","permalink":"https://koreal6803.github.io/tags/Machine-Learning/"},{"name":"python","slug":"python","permalink":"https://koreal6803.github.io/tags/python/"},{"name":"選股","slug":"選股","permalink":"https://koreal6803.github.io/tags/選股/"}]},{"title":"讓Machine Learning幫你看財報！","slug":"讓Machine-Learning幫你看財報！","date":"2017-10-13T10:07:13.000Z","updated":"2017-10-28T19:36:27.000Z","comments":true,"path":"讓Machine-Learning幫你看財報！/","link":"","permalink":"https://koreal6803.github.io/讓Machine-Learning幫你看財報！/","excerpt":"","text":"機器學習不是我很專攻的領域，但幸好現在很多強大的package，可以直接使用，假如你不想深入開發model的話，只要把它當作黑箱子就好了，把它插上插頭，讓資料流進去、流出來。很簡單！ 可以私下聯絡我，或留言給我email來拿到訓練資料，在坊間一定是要賣錢的，甚至連課程一起賣，一定會打著python、財經、大數據、機器學習、神經網路 等名號開課，一堂課5000元之類的。 但我想說算了啦，反正我就是個草根碼農XDD，希望大家可以一起互相切磋。 之前寫的策略，選股方式都是用條件拼湊的： $$\\mathbb{S}=\\left\\{ s\\mid\\text{ROE}_{s}>3\\text{ and }\\text{PB}_{s}但是現在用machine learning的話，就會寫成這樣： $$\\mathbb{S}=\\left\\{ s\\mid f(\\text{ROE}_{s},\\text{PB}_{s})=1\\right\\}$$ 這邊用的是分類（classification），假如覺得會上漲，就是1，會下跌就是0。上面的$f$ 就是機器學習的model，我們不太知道這個是個怎樣的函數，因為這個model不是一個公式，而是經過資料訓練而來的。這個簡單的範例只有2個features：ROE、PB。只是一個例子而已，下面會有更多的features： 資料資料是從2010年底，到2017年，每次財報截止的隔天買入，並在下次財報截止前賣出。至於features就是用之前寫文章，覺得好用的： 月營收 買入前12個月 ROE 買入前12季財報 本益比 買入前一天 股價淨值比 買入前一天 殖利率 最近一期 股價是否大於季線 股價是否大於半年線 負債比率 買入前12季財報 可以到這裡下載歷史資料，假如有人訓練的比我的好的話（應該滿簡單的），歡迎一起討論，我們可以一起合作建構一個初版的平台，或是有人想要train不同的feature，也歡迎留言給我。 除了上述的features，每筆資料還包含： stock_ID 股票的代號 buy_date 買入日期 buy_price 買入開盤價 sell_date 賣出開盤價 sell_price 賣出價格 gain 賣出價/買入價 不確定這些歷史數據，有沒有錯，假如不放心，可以幫我稍微檢驗一下，另外，關於買賣日期，我是參考IFRS制度上市前後不同的財報截止日，然而有些企業遲交財報，就沒辦法了…所以會包含一點未來數據。 這篇文章有講到財報遲交的公司，還是別買的好，而每年大約只有100檔家公司會遲交財報，以整體資料而言，未來數據應該不會太多（我覺得啦XD，但不知道資料科學家們怎麼看就是了）。 資料僅供學術發展，請勿用於商業用途！ 訓練model的方式由於我想要弄一個快速的prototype，所以先使用random forest model，這樣就不用proprocessing了XDD Model12from sklearn.ensemble import RandomForestClassifierrf = RandomForestClassifier(n_estimators=500, max_leaf_nodes=None, class_weight='balanced') 以上是用sklearn裡的模型，連參數什麼都沒給，這樣的效果還OK了。訓練時，training data使用2014年以前的資料，而test data是2015年以後的資料 結果太好了，我不敢相信…以下是還沒篩選前的獲利分佈圖，這邊的獲利是用倍數來衡量，也就是 賣出價格/買入價格。可以看到，這是一個對稱於1的分佈圖，大於1（賺）跟小於1（賠）其實很接近，其平均值是在1.005左右，你有看到一藍藍的地方嗎？那就是篩選後的標的： 下面我們把藍色的地方直接畫一張圖，可以發現篩選後，發現結果好很多，分佈偏向大於1，也就是很多的選擇是有獲利的！ 平均來到了1.10左右，代表每季買一群股票，平均來說會賺10％左右。且勝率來到了70.2% 對於這樣的結果，我感到有點難過，因為成果太好代表裡面一定有什麼問題，我還是抱著懷疑的態度，各位可以做最嚴格的檢驗，機器學習不是我的範疇，願意虛心受教，或是你還希望有什麼額外的features呢？我幾乎都可以幫你生成客製的test data喔！","raw":null,"content":null,"categories":[{"name":"AI看股票","slug":"AI看股票","permalink":"https://koreal6803.github.io/categories/AI看股票/"}],"tags":[{"name":"機器學習","slug":"機器學習","permalink":"https://koreal6803.github.io/tags/機器學習/"},{"name":"Machine Learning","slug":"Machine-Learning","permalink":"https://koreal6803.github.io/tags/Machine-Learning/"},{"name":"python","slug":"python","permalink":"https://koreal6803.github.io/tags/python/"}]},{"title":"回測框架介紹","slug":"回測框架介紹","date":"2017-10-12T11:39:12.000Z","updated":"2017-10-28T19:55:52.000Z","comments":true,"path":"回測框架介紹/","link":"","permalink":"https://koreal6803.github.io/回測框架介紹/","excerpt":"","text":"每次回測的時候，大家一定會有疑問，雖然已經寫了選股的條件，但實際上到底是怎麼運作的？這篇文章會介紹這個回測的方式。這篇比較數學一點，但用這種方法表示會比較明確，有線性代數的基礎就夠了。 首先我們先假設營業日，從1到$n^{d}$天，代表所有回測的天數： $$d=1,…,n^{d}$$ 另外還有一群股票，是我們可能買入的對象 $$s=1,…,n^{s}$$ 另外，而選股條件(constraints)叫做 $$c(d,s)\\in\\{0,1\\}$$ 假如某日 $d$ ，我們發現 $s$ 股票符合條件，那我們可以說$c(d,s)=1$，假如不符合條件，就是$c(d,s)=0$ 為了方便，我們用一個向量來表示第 $d$ 天每支股票是否符合條件： $$\\boldsymbol{c}_{d}=[c(d, 1),…,c(d, n^s)]^T$$ 然而我們只希望每 $n$ 天換一次手上的持股，不要每天都換，不然會花太多手續費，所以我們定義一個過 $n$ 天才檢查一次股票是否符合條件： $$\\boldsymbol{c}_{d}^{*}=\\boldsymbol{c}_{\\left\\lfloor (d-1)/n\\right\\rfloor n+1}$$ 於是，我們在$d$天晚上，用 $\\boldsymbol{c}_{d}^{*}$ 來決定明天如何買股： $$\\boldsymbol{h}_{d+1} = \\left(\\frac{m+\\boldsymbol{h}_{d}^{*T}\\boldsymbol{p}_{d}}{\\text{sum}(\\boldsymbol{c}_{d}^{*})}\\boldsymbol{c}_{d}^{*}\\right)^T$$ 其中，$\\boldsymbol{h}_{d+1}$ 代表明天每支股票要分多少錢， $\\boldsymbol{h}_{d}^{*T}$ 代表今晚持股（單位為一張），而 $m$ 為帳戶資金 $\\boldsymbol{p}_{d}$ 代表收盤價乘以1000。其實它只是看起來醜了點，概念很簡單，計算所有的資產，並且將資產平均分配給符合條件的股票。 以上的持股方式，就是一種完美分散的概念，是美好的想像，通常是blog中回測權益曲線的藍線，但現實生活中，資產不可能分散得如此完美，所以還必須算出可以買幾張股票： $$\\boldsymbol{h}_{d+1}^{*}=\\left[\\left\\lfloor \\frac{h_{d+1,1}}{1.1p_{d,1}}\\right\\rfloor ,...,\\left\\lfloor \\frac{h_{d+1,n^{s}}}{1.1p_{d,n^{s}}}\\right\\rfloor \\right]^{T}$$ 這邊有點要注意，$\\boldsymbol{h}_{d+1}^{*}$ 的單位是張數，而原本的 $\\boldsymbol{h}_{d+1}$ 的單位是投資金額。乘以 1.1 是為了在開盤時用漲停板買入。然而這條公式每天都會計算，所以在歷史回測中，每天的張數是浮動的，也就是說，某天我買了6張某股，隔天我可能會變成5張、或7張某股，都是有可能的。 考慮了張數的，更貼近真實情況，通常是blog中回測權益曲線的紅線。 目前所知道的缺點 長線還算堪用，但短線上這種直接平分資產的方式，手續費還是太高了，到底要怎麼降低手續費呢？有沒有辦法不要單純平均分散？可以做到智慧型的平均分散？ 這個方法並沒有資產利用最大化（因為無條件捨去法），有沒有讓資產最大化、又可以考慮手續費的選股函數呢？","raw":null,"content":null,"categories":[{"name":"選股策略","slug":"選股策略","permalink":"https://koreal6803.github.io/categories/選股策略/"}],"tags":[]},{"title":"財報狗選股讓你免費取得價值4000元/年的策略","slug":"財報狗選股條件最佳化","date":"2017-10-11T17:17:45.000Z","updated":"2017-10-28T20:02:21.000Z","comments":true,"path":"財報狗選股條件最佳化/","link":"","permalink":"https://koreal6803.github.io/財報狗選股條件最佳化/","excerpt":"","text":"今天滿認真的，幫大家排列組合選股條件，這些選股條件都可以從財報狗的網站免費取得。 基本上這個策略，結果跟CMoney的富貴滿盈價值股差不多，但是人家一年要將近4000元，而財報狗是完全不用錢！ 財報狗的選股條件，自己排列組合可能會很慘，我用程式幫大家找，可以看到歷史績效，可能會比較可靠一點！ 分享目前自己發現最好，且可以用財報狗選股網站，免費選出股票的策略～ 免費的東西最貴？免費的東西真的很貴，假如你不靠任何投資老師，不靠長輩指導，短時間學會如何買股票，並能穩定獲利，基本上不太可能。（除非你也寫程式XD） 另外一個方式就是多來這晃晃XDDD（推銷）今天就來打破這個概念，從免費垃圾中挖出寶！把財報狗所有條件排列組合，自己能力所及，產生的最好回測，重點是免費！ 回測的心得我發現，財報狗條件，最主要就是選擇好公司，然而好公司股價不一定便宜，所以另外要用本益比跟股價淨值比來篩選出便宜股。 另外也發現本益比不是越小越好，這個策略調成15倍以下，再低就不行了，會造成波動變大，但是股價淨值比，可以調到1以下，結果還是不錯！ 假如股票數目太多，可先挑股價淨值比小的，可能會比較好！（只是推測）但假如不想要深入研究每支股票，大前提一定是盡量分散，不然就得認真研究公司的體質！ 回測方法這個策略所用到的條件（財報狗都有）： EPS近五年成長率 &gt; 1.1 ROE近四季總和 &gt; 0 流動比率1年 &gt; 200 近5年EPS &gt; 0 本益比 &lt; 15 股價淨值比 &lt; 1.5 另外，我測試了60天跟120天的，發現差不多，所以大約半年換股一次就可以了以下是回測結果，紅色是用100萬當起始資金，並考慮手續費、減資、利息，主要是以逼近藍色的選股策略為準，盡量平均分散，最小單位1張： 可以發現金融海嘯的時候，還是很可怕，海嘯完反彈也很猛！但是照這樣投資，2009年心臟要夠大顆，因為100萬就這麼沒了… 除非你的策略天生可以躲避大盤，不然一定要做大盤的篩選！之後也想寫一些預測大盤的策略，大家不妨偶爾來拜訪一下這個部落格。 接下來來看股票數： 有時候要買到75張不同的股票，大家應該都沒有這麼多財力吧XD，有時候覺得自己的blog根本是為了有錢人寫的？XD其實我也不想…但本金夠真的比較好買股票。 小提醒有些地方我好像定義的跟財報狗不太一樣，例如：一年ROE，我是用4季去加總的，可能會有點誤差，畢竟我也不在財報狗裡面上班XDD，但結果應該差不了太多。 結語那！今天分享了一個可以模仿的策略了，歡迎其它人來檢查一下，這樣的策略是否能夠獲利，畢竟我是工程師，工程師的程式裡，一定會有bug。。。歡迎大家來找碴！ 今天從頭到尾，花了2個小時才寫完的，假如喜歡我的部落格，可以加一下我的最愛，每個禮拜都有兩三篇新文章喔！（不敢再說每天，上週末已破功XDD）","raw":null,"content":null,"categories":[{"name":"財報狗分析","slug":"財報狗分析","permalink":"https://koreal6803.github.io/categories/財報狗分析/"}],"tags":[{"name":"如何買股票","slug":"如何買股票","permalink":"https://koreal6803.github.io/tags/如何買股票/"},{"name":"選股策略","slug":"選股策略","permalink":"https://koreal6803.github.io/tags/選股策略/"}]},{"title":"教你用財報狗巴菲特免費選股","slug":"教你用財報狗巴菲特免費選股","date":"2017-10-10T21:51:50.000Z","updated":"2017-11-01T23:30:37.000Z","comments":true,"path":"教你用財報狗巴菲特免費選股/","link":"","permalink":"https://koreal6803.github.io/教你用財報狗巴菲特免費選股/","excerpt":"","text":"今天來試試看財報狗的巴菲特選股條件，由於是免費的，任何人都可以使用他們的工具來篩選股票喔！用起來很方便，但是沒有歷史回測，不知道要怎麼選才好？繼續往下看吧！ 總共有九種條件、三個三個一組 但一眼看過去就知道，就算這九個全選，還是會有問題：無法選出便宜股！ 沒差，今天就是給大家一個感覺，想說將 3 x 3 x 3 = 27種 回測都跑一遍，來看一下哪些條件適合幾年！ 回測方法回測每125天重新篩選一次股票，當即將減資時，會賣出股票，等到減資完才買回（方便做回測），假設資產平均分散，不計算手續費，以下是2010年到現在的獲利： 負債比率n年小於30％ ROE近n年大於15% 自由現金流n年大於0 2010到至今結果 1 1 1 1.81485895666 1 1 3 1.80611662219 1 1 5 1.80843692158 1 3 1 1.72557247746 1 3 3 1.73936608665 1 3 5 1.74036307227 1 5 1 1.66120834512 1 5 3 1.67544848703 1 5 5 1.67539061791 3 1 1 1.86507507328 3 1 3 1.8550489791 3 1 5 1.85421160215 3 3 1 1.76061835832 3 3 3 1.7777823463 3 3 5 1.77461231039 3 5 1 1.69140364261 3 5 3 1.70853820166 3 5 5 1.704449199 5 1 1 1.65133067584 5 1 3 1.63659256796 5 1 5 1.6355617308 5 3 1 1.72904553438 5 3 3 1.7426988829 5 3 5 1.74016318508 5 5 1 1.641334841 5 5 3 1.65510389983 5 5 5 1.65245003808 接下來是60天換一次股票，獲利似乎有變比較好喔！ 負債比率n年小於30％ ROE近n年大於15% 自由現金流n年大於0 2010到至今結果 1 1 1 2.04865034635 1 1 3 2.00438077419 1 1 5 1.86690744291 1 3 1 1.84763217744 1 3 3 1.86161269191 1 3 5 1.78116963449 1 5 1 1.74354058836 1 5 3 1.76992960676 1 5 5 1.73239549677 3 1 1 2.2271403266 3 1 3 2.12840290727 3 1 5 1.93661630865 3 3 1 1.81760398688 3 3 3 1.8053067449 3 3 5 1.70637963884 3 5 1 1.68466765715 3 5 3 1.68890106012 3 5 5 1.63688323755 5 1 1 1.99109248921 5 1 3 1.89184010495 5 1 5 1.7179670741 5 3 1 1.84039390361 5 3 3 1.84483796041 5 3 5 1.7357332421 5 5 1 1.69260093206 5 5 3 1.712534655 5 5 5 1.65978846222 同期大盤 1.26倍 結論以下是我的觀察： 最好約60天換一次股，比120天換一次股還要好 負債比率：三年最好，不多也不少 ROE：肯定看一年就好 自由現金流：越多年似乎越有效，但效果較不明顯 然而只看這三種不同類型的條件，還是很難找到好的策略。明天來看看其它的條件，能不能幫大家組合出好策略！不知道大家有什麼想法？","raw":null,"content":null,"categories":[{"name":"財報狗分析","slug":"財報狗分析","permalink":"https://koreal6803.github.io/categories/財報狗分析/"}],"tags":[{"name":"如何買股票","slug":"如何買股票","permalink":"https://koreal6803.github.io/tags/如何買股票/"},{"name":"選股策略","slug":"選股策略","permalink":"https://koreal6803.github.io/tags/選股策略/"}]},{"title":"價值股策略","slug":"價值股回測","date":"2017-10-09T14:31:56.000Z","updated":"2017-10-28T19:38:08.000Z","comments":true,"path":"價值股回測/","link":"","permalink":"https://koreal6803.github.io/價值股回測/","excerpt":"","text":"今天剛結束期中口試（資格考），在法國99％的博士班，都可以通過，但重點是通過成績如何。今天總算是落幕了！可以好好來寫網誌，但今天還是有點想要休息一下，所以把網路上的方法拿來回測XD 富貴滿盈價值股今天回測了 富貴滿盈價值股 這個方法，名稱有點俗氣，但是回測效果算還不錯。 以下是此策略的選股條件： 本益比 &lt; 15 股價淨值比 &lt; 2 殖利率 &gt; 4 成交量大於50％的股票 收盤價 &gt; 60日均線 收盤價 &gt; 120日均線 EPS &gt; 前季EPS 月營收 &gt; 前年同月月營收 廢話不多說，看結果 紅色線跟藍色線，感覺已經講到爛了XD，下次乾脆直接寫一篇教學，以後都直接連到那個教學…。 這個策略適用於200萬以上的股票池，比較小的我沒有試過，有人有興趣的話，可以留言給我，我會試試看假如最多選5個公司買，會有怎樣的結果。 下跌幅度還算是滿大的，但下跌情況在2013年以後好很多，是因為改用IFRS的關係嗎？這個就不清楚啦！XD 回測好，沒辦法用，看這個blog做啥？大家可以看，用怎樣的條件選股，可以產生好策略，看越多會發現，好用的數據就那些！ 而且等之後有空，會有個平台放上免費的策略，且每天更新，就跟財報狗一樣。 為何跟財報狗一樣還要做？恩～因為無聊吧～證明自己的能力。 要是我一個人可以做出跟策略狗平台不相上下，那不是很猛嗎！？可以當作自己能力記錄的證明。 希望能做友善且功能強大的平台不僅限於基本面，還有籌碼面跟技術面！還有行動助手幫忙提醒該換股了！另外有些厲害的策略還是得收點錢，畢竟這個平台是我吃飯的傢伙呀XD 之後再寫跟machine learning有關的策略根據我們現在的介紹，本人真的覺得 machine learning 在分析財報上，有很大的潛力，之後有時間來試試看！","raw":null,"content":null,"categories":[{"name":"選股策略","slug":"選股策略","permalink":"https://koreal6803.github.io/categories/選股策略/"}],"tags":[{"name":"如何買股票","slug":"如何買股票","permalink":"https://koreal6803.github.io/tags/如何買股票/"},{"name":"選股策略","slug":"選股策略","permalink":"https://koreal6803.github.io/tags/選股策略/"},{"name":"歷史回測","slug":"歷史回測","permalink":"https://koreal6803.github.io/tags/歷史回測/"},{"name":"價值股","slug":"價值股","permalink":"https://koreal6803.github.io/tags/價值股/"}]},{"title":"用杜邦分析加強你的選股技巧（下）回測","slug":"用杜邦分析加強你的選股技巧（下）回測","date":"2017-10-07T02:45:40.000Z","updated":"2017-10-28T19:32:14.000Z","comments":true,"path":"用杜邦分析加強你的選股技巧（下）回測/","link":"","permalink":"https://koreal6803.github.io/用杜邦分析加強你的選股技巧（下）回測/","excerpt":"","text":"今天介紹一個簡單至少近7年有效的方法，考慮杜邦分析的指標，排列組合後，我能得出的最好結果。 選股條件： 總資產轉換率 &gt; 0.3 （選擇獲利高的公司） ROE &gt; 5 （選擇能真正盈利的公司） PB &lt; 3 （選便宜一點的公司） 發現 淨利率 莫名的失效，較難拿來選一小群股票，而 權益乘數 較也是，畢竟一家公司的槓桿程度，不代表公司體質好不好。我發現 總資產轉換率，是一個很好的條件，看企業是否有妥善運用自己的資產，能夠有盈利，回測的效果也比較穩定。 歷史績效 藍色是投資完美分配的狀況，而紅色是用100萬當作起始資金，考慮買賣張數。用此策略投資，資產穩定成長。 適用於IFRS制度開始後 這個策略在2013之前，一次會買很多張股票，且獲利比較不穩定。我個人覺得可能是2013年時改為 IFRSs 後的關係。因為2013年後，企業可以用 “公允” 價值入帳。所以許多有很多資產的公司，淨值大幅成長。實際擁有的東西沒變，只因為遊戲規則改變，產生”看起來好像改善的”現象。 雖然淨值大幅成長，但假如營運狀況沒趕善，則總資產轉換率反而會降低，因此總資產轉換率高的公司，2013年後才被真正的篩選出來，也是此策略歷史績效開始變好的時機。","raw":null,"content":null,"categories":[{"name":"指標分析","slug":"指標分析","permalink":"https://koreal6803.github.io/categories/指標分析/"},{"name":"基本面","slug":"指標分析/基本面","permalink":"https://koreal6803.github.io/categories/指標分析/基本面/"}],"tags":[{"name":"如何買股票","slug":"如何買股票","permalink":"https://koreal6803.github.io/tags/如何買股票/"},{"name":"選股策略","slug":"選股策略","permalink":"https://koreal6803.github.io/tags/選股策略/"},{"name":"歷史回測","slug":"歷史回測","permalink":"https://koreal6803.github.io/tags/歷史回測/"},{"name":"杜邦分析","slug":"杜邦分析","permalink":"https://koreal6803.github.io/tags/杜邦分析/"}]},{"title":"用杜邦分析加強你的選股技巧（中）淨利率","slug":"用杜邦分析加強你的選股技巧（中）淨利率","date":"2017-10-05T21:07:14.000Z","updated":"2017-10-28T19:32:25.000Z","comments":true,"path":"用杜邦分析加強你的選股技巧（中）淨利率/","link":"","permalink":"https://koreal6803.github.io/用杜邦分析加強你的選股技巧（中）淨利率/","excerpt":"","text":"淨利率就是指企業從營業收入，真正收進口袋的錢： 分佈圖以下是淨利率的分佈圖： 數量 平均 標準差 0% 25% 50% 75% 100% 1693 -100 2234 -76488.52 0.24 5.09 11.56 5458.2 台灣有滿多企業沒有辦法賺錢！但有少數公司獲利滿驚人的，然而接近0的地方會產生一個很明顯的突波，看來滿多企業盡量讓自己的淨利大於0的，讓財報好看一點。 淨利率高的企業股價更容易成長！我們將淨利率分五組，由低到高，低的是深色，高的是黃色，每60天重新選擇一次，每一條曲線，代表我們長期投入，買入其中一組的股票，所獲得的報酬： 我們發現，投資淨利率高的公司，比較容易獲利！ 杜邦分析的指標終於說完了！總結一下，目前杜邦分析的系列文章中，我們講了三個重要的指標： 淨利率 總資產轉換率 權益乘數 目前看起來，是淨利率跟總資產轉換率比較好用，可以利用這兩個指標選股！而權益乘數其實是比較難用的，因為很難斷定會借貸的公司到底好不好。 而下一篇，我們會能不能整合三個指標，找出比較好的優質股～","raw":null,"content":null,"categories":[{"name":"指標分析","slug":"指標分析","permalink":"https://koreal6803.github.io/categories/指標分析/"},{"name":"基本面","slug":"指標分析/基本面","permalink":"https://koreal6803.github.io/categories/指標分析/基本面/"}],"tags":[{"name":"杜邦分析","slug":"杜邦分析","permalink":"https://koreal6803.github.io/tags/杜邦分析/"},{"name":"入門教學","slug":"入門教學","permalink":"https://koreal6803.github.io/tags/入門教學/"}]},{"title":"小資族也可以使用的選股法！","slug":"小資族也可以使用的選股法！","date":"2017-10-04T09:40:42.000Z","updated":"2017-10-28T19:38:26.000Z","comments":true,"path":"小資族也可以使用的選股法！/","link":"","permalink":"https://koreal6803.github.io/小資族也可以使用的選股法！/","excerpt":"","text":"其實這篇還是14年14倍的選股策略！一模一樣的方法XD，建議先複習一下，這篇只用本金10萬元開始，看會發生什麼問題！ 原諒今天我比較混水摸魚，下禮拜要博士班資格考～～ 附上每天操作紀錄，證明沒在虎爛XD會寫這篇是因為有人問上次那個14年14倍選股法，怎麼可能一次買50張股票，太扯了吧！被他這麼一說，突然我也覺得有點扯，該不會是回測寫錯，有bug吧！？ 目前又檢查了一次，應該是沒找到什麼問題。策略都是考慮真實買賣（本金、張數、手續費都考慮），至於怎麼考慮，下面會更詳細的跟大家介紹。 拉到文章下方，有歷史回測的每天操作紀錄，以示我真的沒在虎爛XD，但交易這種東西，還是自己對自己負責。 假如歷史紀錄有問題，也歡迎隨時聯絡我喔（左上角有信箱和FB），很樂意跟大家討論。 為何一次買這麼多股票？因為我想利用空間與時間選股！ 做回測到現在的心得是，自己真的是凡人，無法預測股票是漲是跌，要用時間跟空間來換取你的零用錢！ 時間，就是指長線，利用一兩個月，讓基本面很好的股票發酵。空間，就是指分散風險，投資多支股票，買到雷股時，才不致於太慘。 Q&amp;A 時間1.這個策略是上市上櫃大於100家時，只挑選上市收盤大於10元的買，上櫃的不考慮對嗎?YES 2.假設上市上櫃的便宜股大於100家公司，選擇收盤價10元以上的上市公司，100萬真的夠嗎?這些雞蛋水餃股特別便宜，下面圖一是該策略所有買入股票的價格分佈圖 幾乎都是在10～20元，然而程式沒有設定最低買入手續費20元，但低頻率的投資應該不會造成太大的影響 3.若是像2008年一樣，一堆便宜股票100萬如何足以購買符合條件的股票呢?上一篇起始資金100萬，但到2008年已經有200萬了，這個時候買50支雞蛋水餃股是沒問題的！ 為了體現買不動這個問題，另外跑了只用10萬元投資的回測： 紅色是用10萬起始資金，並考慮手續費；而藍色則是資產完美平均、不算手續費。結論是：用10萬買當起始資金也行，但獲利倍數會減少： 原本100萬起始的話，參考上篇文章，到今天可以有14倍獲利； 然而現在用10萬當起始資金，考慮真實情況（上圖紅線），到今天只有8倍，但權益曲線很相似！ 假如可以完美平均分散，不真實情況（上圖藍線），不管起始資金多少，都能有近16倍獲利。 接下來就回答關鍵問題：2009年這麼多股票，錢那麼少，怎麼買呢？這邊的策略是：假設n張股票要買，將總資產分成n份，買不起就不買！ 就這麼簡單，所以接下來，用十萬當起始資金，看每日持股數目，就會更瞭解： 上圖可以發現，在2009年時，因為股票太多，藍色線建議購買超過50支股票，而紅線因為本金不足幾乎沒有購買任何股票。 策略都是考慮真實買賣（本金、張數、手續費都考慮），個人覺得這個策略，是有機會真倉使用，然而我自己沒在用就是了XD，這是某天好玩做出來的結果。 所以十萬理論上也是可以的，無論多少錢，回測程式都會將資產分n份，再等比例買入每一支不同的股票！ 4.能否列出在符合條件的年度，各買一張需要多少本金，根據此策略計算結果是符合條件的上市公司各買一張嗎?或是根據您的統計是以資金平均分配在各家公司的結果?附上歷史操作數據 連結一，買股票歷史紀錄：https://drive.google.com/file/d/0B440aEV9RNPTX2xTWUd0ZVF6Unc/view連結二，每天操作的詳細記錄：https://drive.google.com/file/d/0B440aEV9RNPTMGpuZFNfLURwa0k/view 這個策略只是我學習路上，有一點小成果，跟大家分享而已，我一定也有很多不足，要向大家學習的，有什麼問題歡迎留言一起討論喔～～","raw":null,"content":null,"categories":[{"name":"選股策略","slug":"選股策略","permalink":"https://koreal6803.github.io/categories/選股策略/"}],"tags":[{"name":"如何買股票","slug":"如何買股票","permalink":"https://koreal6803.github.io/tags/如何買股票/"},{"name":"選股策略","slug":"選股策略","permalink":"https://koreal6803.github.io/tags/選股策略/"},{"name":"歷史回測","slug":"歷史回測","permalink":"https://koreal6803.github.io/tags/歷史回測/"},{"name":"本益比","slug":"本益比","permalink":"https://koreal6803.github.io/tags/本益比/"},{"name":"股價淨值比","slug":"股價淨值比","permalink":"https://koreal6803.github.io/tags/股價淨值比/"}]},{"title":"用杜邦分析加強你的選股技巧（中）總資產轉換率","slug":"用杜邦分析加強你的選股技巧（中）總資產轉換率","date":"2017-10-03T10:42:44.000Z","updated":"2017-10-28T19:32:30.000Z","comments":true,"path":"用杜邦分析加強你的選股技巧（中）總資產轉換率/","link":"","permalink":"https://koreal6803.github.io/用杜邦分析加強你的選股技巧（中）總資產轉換率/","excerpt":"","text":"總資產轉換率，是一個很有用的指標，可以觀察企業的營運能力，管理階層運用總資產創造營收的能力，也就是代表管理能力。複習一下公式： $$總資產轉換率=\\frac{營收}{總資產}$$ 分佈圖這張分佈圖x軸是總資產轉換率，Y軸是有多少公司 數量 平均 標準差 0% 25% 50% 75% 100% 1696 0.19 0.15 0 0.10 0.17 0.24 3.11 可以發現大部分的公司的總資產轉換率，落在17％左右，可以用這個值來判斷公司的營運是否有效率。我們之後的回測，會利用總資產轉換率來找出優質股，在大盤下跌時，優質股比較不容易下跌。 回測我們把全台灣企業，大致上分成5組來做歷史回測，每60天換一次股票，黑色到黃色代表總資產報酬率由低到高，看他們的平均漲跌幅： 投資淺色會比深色組別的股票還要好，代表投資體質好的公司，真的比差的公司還要穩定很多！下次選股前不妨看一下總資產轉換率，來決定該股票適不適合買入！尤其適合同產業的公司互相比較，更能看出好壞！ 另外也有一個有趣的現象，深黑色有時候也會意外變成第一，這方面我至又不知到為什麼了XD，是因為有些公司還沒開始盈利但前景看好？ 除了深黑色那條線以外，大致上還算符合深到淺，低到高的一個走勢。 人即是公司總資產轉換率也可以拿來評量一個人，想像某人資產有100萬，而他每個月的開銷是： 吃飯、水電生活等，花了3萬元，而每天上班月入6萬元 看起來生活水平還算優渥！ 但假如把他當作一家公司，則他的總資產轉換率是6/100每個月，就這麼讓97萬躺在銀行裡任由通貨膨脹摧殘，要是他可以利用存款，投資自己來幫自己的人生滾雪球，那一定會產生很厲害的複利效應！ 我自己是沒有辦法忍受存款在那裡閒涼，所以才編寫投資程式：利用已有資產來提高資產轉換率！ 從總資產轉換率看買房這件事要怎麼決定你要不要買房子呢？也可以從資產轉換率來思考，首先第一個迷思就是買了房，總資產會變少。 其實資產不會變少的，因為我們只是拿錢換房子，房子也算資產的一部份（假如不貸款）。 但假如你很會投資，那買了房，會變得沒錢理財，會導致總資產轉換率會瞬間大減，任憑你投資技巧再好，投資淨利率在高，乘以總資產轉換率後，到頭來你的個人ROE還是會大衰退！ 有人說房租那麼貴，還不如直接買房，每月繳貸款也比房租高一點點而已。 但對於善於投資的人來說，傷害最大的，不是房貸，而是頭期款！將你的金錢瞬間換成磚頭！XD 滾雪球是很驚人的，然而從一個大雪球開始滾跟小雪球開始滾，會差很多，可以參考Mr. Market的文章算一下自己什麼時候買房合適。 當然假如買房也是一種投資，那就另當別論！ 有點離題了…拉回來一下 總之提高個人總資產轉換率的好方法投資自己也是很好的選擇，例如增進第一專長，學第二專長，學習如何創業，都是我正在努力的目標！大家有什麼好方法提高自己的總資產轉換率呢？每天來看一下FinLab也是一個很好的投資喔！（自己打廣告XD）","raw":null,"content":null,"categories":[{"name":"指標分析","slug":"指標分析","permalink":"https://koreal6803.github.io/categories/指標分析/"},{"name":"基本面","slug":"指標分析/基本面","permalink":"https://koreal6803.github.io/categories/指標分析/基本面/"}],"tags":[{"name":"杜邦分析","slug":"杜邦分析","permalink":"https://koreal6803.github.io/tags/杜邦分析/"},{"name":"入門教學","slug":"入門教學","permalink":"https://koreal6803.github.io/tags/入門教學/"},{"name":"總資產轉換率","slug":"總資產轉換率","permalink":"https://koreal6803.github.io/tags/總資產轉換率/"}]},{"title":"拆解ROE用杜邦分析加強你的選股技巧（中）權益乘數","slug":"用杜邦分析加強你的選股技巧（中）權益乘數","date":"2017-10-02T13:53:41.000Z","updated":"2017-10-28T19:32:19.000Z","comments":true,"path":"用杜邦分析加強你的選股技巧（中）權益乘數/","link":"","permalink":"https://koreal6803.github.io/用杜邦分析加強你的選股技巧（中）權益乘數/","excerpt":"","text":"今天這篇繼續討論杜邦分析，其中的三個最重要的數字 權益乘數 總資產轉換率 淨利率 今天就來看一下台灣的公司在權益乘數是如何分佈的！ 權益乘數權益乘數，也就是企業負債的比率！負債是一個兩面刃，有很多錢的話，企業可以將錢轉化成自己的產品，並將產品賣出去，但風險隨之升高，萬一還不出錢可是會瞬間破產。 數量 平均 標準差 0% 25% 50% 75% 100% 1703 2.35 2.78 -39.23 1.43 1.77 2.32 33.70 仔細看一看竟然還有負數，哈哈也太誇張了吧！ 還記得上次跟各位說明，權益乘數 = 總資產 / 股東權益 我更深入檢查下發現，台灣總共有8家公司的權益乘數是負數，其中並不是總資產是負的，而是股東權益是負的！代表全體投資人還必須多付一些錢才能把公司的債還清，滿可怕的XD！ 負債沒想像中的這麼不好！接下來我們一樣把所有的公司分成五組，去看看每季買入它們的歷史績效！ 可以發現負債越多的那組，其實並沒有想像中的那麼可怕，，在歷史績效中，算是高段班！畢竟會使用負債來增加自己的收入，也是公司的能力一部份，不是嗎？ 反而可以看到，槓桿最小那組，都是吊車尾，就算去掉了負的那群，實驗結果還是吊車尾！代表不會用槓桿的公司，似乎在業績表現上也會比較無法那麼亮眼。 會善用槓桿的人更厲害人活在這個複雜的世界，本來就應該學會如何安全的運用槓桿，才能達到事半功倍之效果。這邊指的不是投資的槓桿，是指生活中的各種槓桿，阿基米德說： 給我一個支點，我可以舉起整個地球。","raw":null,"content":null,"categories":[{"name":"指標分析","slug":"指標分析","permalink":"https://koreal6803.github.io/categories/指標分析/"},{"name":"基本面","slug":"指標分析/基本面","permalink":"https://koreal6803.github.io/categories/指標分析/基本面/"}],"tags":[{"name":"杜邦分析","slug":"杜邦分析","permalink":"https://koreal6803.github.io/tags/杜邦分析/"},{"name":"入門教學","slug":"入門教學","permalink":"https://koreal6803.github.io/tags/入門教學/"}]},{"title":"用杜邦分析加強你的選股技巧（上）","slug":"用杜邦分析加強你的選股技巧（上）","date":"2017-10-01T14:01:09.000Z","updated":"2017-10-28T19:32:08.000Z","comments":true,"path":"用杜邦分析加強你的選股技巧（上）/","link":"","permalink":"https://koreal6803.github.io/用杜邦分析加強你的選股技巧（上）/","excerpt":"","text":"前幾篇，我們連講了PE、PB、ROE，這些是價值型選股最重要、最最簡單的幾個要素，也寫了一些還不賴的歷史回測，10萬起始資金也能有模有樣。這篇將會更深入一層，介紹杜邦分析！ 學習回顧我們瞭解了幾個元素： 投資人的錢 企業的收益 企業的股價 3/1=PB、3/2=PE、2/1=ROE。（這邊是很大概的講，用詞比較不精確，請多包涵！） 然而真正的企業有麼簡單嗎？應該不置於吧？ 更深入一點點今天介紹比較複雜名詞：杜邦分析（DuPont Analysis）！杜邦分析將財務報表上的精華濃縮成三個數字，分別代表： 企業的槓桿 企業銷售能力 企業賣出一樣商品是否賺錢 這東西有沒有用？我還不知道XD，想說一邊介紹，一邊做回測給大家看。 杜邦分析超無腦介紹企業的金流，跟個人金流是一樣的道理，所以我用一個很簡單的例子介紹： 假如你有2萬元，跟爸媽借了1萬元買了熱賣的iphone X（3萬），再用4萬元的高價賣給別人，淨賺1萬。 例子結束了！就是這麼簡單。 首先我們先來計算一下ROE，因為你投入了2萬，淨賺1萬，所以ROE是1/2，但ROE像是故事的開頭跟結尾相除，中間的過程完全被省略了，杜邦分析可以補足： 首先，因為你原本有2萬借了1萬，槓桿是(2+1)/2 = 3/2倍，通常命名為權益乘數再來，你用3萬換4萬，總資產轉換率是4/3倍最後，獲得的4萬中，其實只賺了其中的1萬，所以淨利率是1/4 所以最後$\\text{ROC}=\\frac{1}{4}\\times\\frac{4}{3}\\times\\frac{3}{2}=\\frac{1}{2}$ 當然這只是個超簡單的例子，稅呀什麼都通通沒管，將以上的數值寫成公式： $$\\text{ROE}=\\text{淨利率}\\times\\text{總資產週轉率}\\times\\text{權益乘數}=\\frac{\\text{稅後淨利}}{\\text{營收}}\\times\\frac{\\text{營收}}{\\text{總資產}}\\times\\frac{\\text{總資產}}{\\text{股東權益}}$$ 股東權益，就是所有投資人的錢，在這個例子中就是你自己的錢(2萬)而總資產最主要包含：借貸的錢（1萬）、你本來的錢（2萬）營收則是（4萬），稅後淨利是你真正真正獲利的部分（1萬） 明天就來回測給大家看～明天見吧！","raw":null,"content":null,"categories":[{"name":"指標分析","slug":"指標分析","permalink":"https://koreal6803.github.io/categories/指標分析/"},{"name":"基本面","slug":"指標分析/基本面","permalink":"https://koreal6803.github.io/categories/指標分析/基本面/"}],"tags":[{"name":"杜邦分析","slug":"杜邦分析","permalink":"https://koreal6803.github.io/tags/杜邦分析/"},{"name":"入門教學","slug":"入門教學","permalink":"https://koreal6803.github.io/tags/入門教學/"}]},{"title":"買股票只考慮ROE是不夠的！","slug":"買股票只考慮ROE是不夠的！","date":"2017-09-30T11:28:20.000Z","updated":"2017-10-28T19:33:34.000Z","comments":true,"path":"買股票只考慮ROE是不夠的！/","link":"","permalink":"https://koreal6803.github.io/買股票只考慮ROE是不夠的！/","excerpt":"","text":"昨天的文章介紹了ROE，是一個企業用資本賺錢的能力，可以用ROE找出會賺錢的公司，買入其股票。 但這樣會有問題！因為ROE跟價格並沒有連動！也就是你無法確認這家公司股價漲過頭了 公式推導為了更深入瞭解ROE，並且找一個適合的指標跟他搭配，我們再把ROE的公式拿出來討論一下： $$\\text{ROE}=\\frac{\\text{淨利}}{\\text{股東權益}}=\\frac{\\text{市值/股東權益}}{\\text{市值/淨利}}=\\frac{\\text{股價淨值比}\\text{PB}}{\\text{本益比PE}}$$ 由上述公式可以發現，ROE又可以跟PB、PE扯上關係。首先先來看PE： PE 越小造成 ROE 越大，而兩者都代表公司的獲利很好，可以買入！很好的現象 但接下來看到PB的時候，奇妙的是情就發生了： PB越大會影響ROE也會越大，前者大說明股票被高估，後者越大說明公司投資報酬率很好，於是我們可以得到一個結論： ROE高並不代表其價格值得買入！ 歷史回測由以上結論我們可以發現，除了用ROE來選擇投資報酬率高的公司外，我們還必須利用PB選擇便宜股。 策略名稱 策略一（只考慮ROE） 策略二（考慮ROE跟PB） 選股條件 ROE &gt; 5 同策略一 收盤價 &gt; 10 PB &lt; 1.2 每60天更新一次持股，不計算手續費： 其中策略一每次都把資產分散在100支股票左右，而策略二把資產分散在平均為10支股票左右。 策略二每次持有的股票非常少且獲利更勝策略一！ 每次買入個位數股票，小資族會比較好投資，當然我真的不知道有沒有做錯，所以我將策略二的持股歷史紀錄供大家下載：csv檔 金融海嘯資產少60％！但這個策略也是教學用，大家不要輕易使用，畢竟在金融海嘯時，其虧所來到了非常驚人的60％。如何判斷大盤是否大跌，可以參考之前很多篇的介紹。 策略二今天持股策略二目前持股為： 第一個column是股票代號，第二個column是買入日期，第三個columns為價格，約60個交易日後，我們再來看一下這幾支股票是賺錢還是賠錢。有興趣可以追蹤一下！","raw":null,"content":null,"categories":[{"name":"指標分析","slug":"指標分析","permalink":"https://koreal6803.github.io/categories/指標分析/"},{"name":"基本面","slug":"指標分析/基本面","permalink":"https://koreal6803.github.io/categories/指標分析/基本面/"}],"tags":[{"name":"ROE","slug":"ROE","permalink":"https://koreal6803.github.io/tags/ROE/"},{"name":"如何買股票","slug":"如何買股票","permalink":"https://koreal6803.github.io/tags/如何買股票/"},{"name":"選股策略","slug":"選股策略","permalink":"https://koreal6803.github.io/tags/選股策略/"},{"name":"歷史回測","slug":"歷史回測","permalink":"https://koreal6803.github.io/tags/歷史回測/"},{"name":"股價淨值比","slug":"股價淨值比","permalink":"https://koreal6803.github.io/tags/股價淨值比/"}]},{"title":"EPS跟ROE哪個比較好用？","slug":"EPS跟ROE哪個比較好用？","date":"2017-09-29T11:51:12.000Z","updated":"2017-10-28T19:28:59.000Z","comments":true,"path":"EPS跟ROE哪個比較好用？/","link":"","permalink":"https://koreal6803.github.io/EPS跟ROE哪個比較好用？/","excerpt":"","text":"投資人最喜歡看每股盈餘（EPS）來決定股票的好壞，股票雜誌也喜歡說某家公司EPS多好，但今天所做的回測發現，根據每季EPS選擇股票並不好！ EPS 介紹EPS = 稅後淨利 / 在外流通股數 間單來講就是投資人每投入一股，一個月可以賺多少錢回來。公司賺的錢越多，其EPS越大公司發行了很多股票，EPS越小 但是這樣有個問題：公司賺多少錢不等於公司經營的好壞！例如：大公司掙錢肯定要比小公司多，但我們買股票的重點不在誰獲利較高，而是在哪家公司成長比較快速！ 所以只比較不同股票當季EPS，其實是有弊端的，我們用實驗來舉例給你看： EPS低到高的歷史回測我們將EPS由低到高分成五組，每一組的股票大約是一樣多的，每60天調整一次，選擇EPS在範圍內的股票，同樣假設資產可以平均分散，不算手續費： 我們發現，買EPS大於0的股票獲利會高於EPS小於0的組別。 但，是假如EPS大於0的組別之間並沒有太大的關係。 代表假如你的買股票時，假如平均是買2～3個月的話，可以稍微看一下當季EPS只要不要小於0就可以了，就算很高也不一樣定有用，但小於0的話就要注意了！ 跟ROE做比較ROE就是一個考慮了公司可用資金與報酬的指標： 股東權益 = 總資產 - 總負債ROE = 稅後盈餘 / 股東權益 * 100% ROE就變成，公司投入了一些資產，可以賺多少錢回來的指標！ ROE歷史回測我們同樣將ROE從高到低分成五組，每60天換股，取全台灣上市公司介於某一組ROE之間的股票： 可以發現，用ROE來跑歷史回測，真的比較不一樣，獲利跟ROE成很漂亮的正比！買ROE越高的公司，比買EPS高的公司更容易挑到優質股！","raw":null,"content":null,"categories":[{"name":"指標分析","slug":"指標分析","permalink":"https://koreal6803.github.io/categories/指標分析/"},{"name":"基本面","slug":"指標分析/基本面","permalink":"https://koreal6803.github.io/categories/指標分析/基本面/"}],"tags":[{"name":"EPS","slug":"EPS","permalink":"https://koreal6803.github.io/tags/EPS/"},{"name":"每股盈餘","slug":"每股盈餘","permalink":"https://koreal6803.github.io/tags/每股盈餘/"},{"name":"ROE","slug":"ROE","permalink":"https://koreal6803.github.io/tags/ROE/"},{"name":"如何買股票","slug":"如何買股票","permalink":"https://koreal6803.github.io/tags/如何買股票/"}]},{"title":"14年14倍的選股策略！","slug":"比策略狗還要安全的選股策略！","date":"2017-09-28T12:05:16.000Z","updated":"2017-10-28T19:38:44.000Z","comments":true,"path":"比策略狗還要安全的選股策略！/","link":"","permalink":"https://koreal6803.github.io/比策略狗還要安全的選股策略！/","excerpt":"","text":"究竟如何買到好股票呢？用超簡單的財經指標就可以有14年約獲利14倍的策略，重點是可以躲過致命的金融海嘯、大盤崩跌！半年只要調動一次持股，甚至偶爾叫你半年不碰股票去放個假。當然此策略主要是教學用，建議自行調整後再真實投入市場。 從統計的角度帶你一步一步設計量化策略一般的財經文章都是講講理論，算算公式，套幾個例子，就結束了。 問題是，你怎麼知道那個例子是湊巧還是真的有用？ FinLab跟一般的財經部落格不一樣，我們把全台灣所有的公司做統計整理給大家，讓大家瞭解如何從股市中獲利，透過長時間的投資，為自己增加買菜錢。 此篇是前幾篇的一個小統整在股價淨值比有這麼神？跟本益比能幫你選出優質股？中，裡面介紹了用不同的本益比和股價淨值比跑歷史回測 於是今天來總結一下這兩個指標，寫一個策略，讓大家瞭解股價淨值比跟本益比合在一起迸出什麼樣的火花！ 策略就是這麼簡單：找便宜且會賺錢的公司簡單來說這個就是一個雞蛋水餃股策略～ 先用以下條件篩選出雞蛋水餃股： 股價淨值比 &lt; 0.7 的股票 （被嚴重低估股票） 本益比 &lt; 13 的股票 （還算會賺點錢的公司） 我們先把它們定義為”便宜股” 還必須去除大盤大跌的時刻這種便宜股在股市大跌的時候，跌得非常驚人，一定要避開！ 還記得在股價淨值比有這麼神？ 這篇中，有介紹當大盤大跌後，便宜股會變多！反之，當大盤過熱時，便宜股會很少。就是利用這個原理，來進行對大盤時間的過濾： 假如便宜股太少（上市上櫃小於100家公司），代表大盤處於漲多的狀態，清空所有股票，不持股半年！可以去放放假，陪陪家人，休息一下！ 假如便宜股夠多，則買收盤價在10元以上的上市股票 (畢竟太便宜的股票還是會怕怕的XDD) 每半年換一次股，選擇滿足以上條件的所有股票，本金100萬元台幣，手續費不打折，交易稅0.3％ 事實上十萬本金就可以了，只是獲利從14倍減少到8倍左右 常常休息的策略，卻可以有如此高的績效！這個策略常常休息，甚至在2010~2011這兩年完全沒買股票！真的很扯！ 大盤緊張之際完全不用盯盤，不用每天提心吊膽的，你說這種輕鬆的策略，怎麼可能賺到什麼錢？ 但，這就是一個跟財報狗的績優股獵犬不相上下的交易策略，不鳴則已，一鳴驚人，平常不買股票，等到台股崩跌時，能夠快速的獲利！ 策略是否持股也是一種指標～這個策略躲過了從2004年來每一次的台股慘案，所以也可以用這個策略持股數來看出大盤現在是否漲過頭。持股數0代表大盤漲過頭了： 最近股票會崩跌嗎？針對這個問題，到今天為止，這個策略還在持股，所以我認為現在崩跌的機率不大，然而歷史真的會跟未來相似嗎？沒有人可以說的准。 當市場受到大盤洗禮，許多好公司都跌回雞蛋水餃股之際，就是這個策略出動的好時機！ 比績優股獵犬的虧損還小，但還是要注意虧損！其實，虧損還是有的，2012年有點慘，一直盤整，沒有繼續突破新高，最大的虧損來到了25%： 你絕對不能輕易使用這個策略！ 當你決定採用這個策略時，代表你已經檢驗過它數百遍，你相信這個策略，也代表當這個策略產生了25%的虧損時，你都必須視之理所當然，不動於衷，繼續相信它。 我不保證這邊的績效是否正確，也不保證之後這個策略不會失效但你可以參考這邊的方法，實際模擬半年，甚至去實現自己的策略，把它修改的更好！ 光看這兩種數據，就有這樣的功效了，更何況是考慮更多因素！目前介紹了本益比、股價淨值比，並且用這兩個數值當作買賣標準，就能得到這樣的策略！ 更別提後續介紹更多種的基本面、技術面、甚至是籌碼面的選股方式，來讓大家對於股市更有感覺，更輕鬆的選擇股票標的！ 你知道為何我有勇氣把自己覺得賺錢的策略免費分享給大家嗎？因為更猛的在後面～XD 我盡量每天都會發一篇，假如你覺得到目前為止還喜歡的話，可以繼續關注這個blog，或是留言給我一點建議，接下來想做的主題： 更多的財經指標、回測 Machine Learning 選股 python 完全新手股市分析（包含歷史財經數據包及其研究方法） 請問哪個你會比較有興趣呢？","raw":null,"content":null,"categories":[{"name":"選股策略","slug":"選股策略","permalink":"https://koreal6803.github.io/categories/選股策略/"}],"tags":[{"name":"如何買股票","slug":"如何買股票","permalink":"https://koreal6803.github.io/tags/如何買股票/"},{"name":"選股策略","slug":"選股策略","permalink":"https://koreal6803.github.io/tags/選股策略/"},{"name":"歷史回測","slug":"歷史回測","permalink":"https://koreal6803.github.io/tags/歷史回測/"},{"name":"本益比","slug":"本益比","permalink":"https://koreal6803.github.io/tags/本益比/"},{"name":"股價淨值比","slug":"股價淨值比","permalink":"https://koreal6803.github.io/tags/股價淨值比/"}]},{"title":"大盤要跌了嗎？利用企業本益比分佈來判斷！","slug":"大盤要跌了嗎？利用企業本益比分佈來判斷！","date":"2017-09-27T12:52:52.000Z","updated":"2017-12-12T14:01:23.000Z","comments":true,"path":"大盤要跌了嗎？利用企業本益比分佈來判斷！/","link":"","permalink":"https://koreal6803.github.io/大盤要跌了嗎？利用企業本益比分佈來判斷！/","excerpt":"","text":"最近大盤一直跌，大家都不禁懷疑是否開始大崩盤了？因為前幾天寫了一篇用淨值比判斷大盤漲跌，想說本益比是不是也可以這樣如法炮製呢？於是做了台股企業本益比中位數隨時間的變化圖。 在看圖之前不免俗的先講講本益比（PE） 本益比中位數介紹本益比的簡單公式是：本益比 = 每股市價／每股盈利。 本益比越高，代表你用較多錢買一間盈利低的公司股票本益比越低，代表你用較少錢買一間盈利高的公司股票 利用本益比中位數來判斷大盤大趨勢下圖紅線是是每天大盤上市上櫃股票的本益比中位數（取過對數的）隨時間變化圖，藍線是2個標準差，灰色是大盤： 大家可以觀察一下，以下是我發現有趣的點： 假如我們現在有個策略在紅線為2.5左右買進大盤，而3左右出清，感覺獲利會滿可觀的！（然而金融海嘯還是得凹一下單就是了XD） 用本益比中位數台股2000年上萬點為3.5，而今年上萬點只有2.6，代表兩次上萬點意義不太一樣，2000年那次比較像是泡沫，破了後來很慘烈；而今年是大盤破新高，而紅線沒破新高，代表企業的盈利目前來講還算是跟的上股價的漲幅，沒有太誇張，所以這幾天雖然都慘慘的，我個人還是保持平常心。 大家可以搭配之前用淨值比判斷大盤漲跌的文章看，雖然股價淨值比的中位數有點偏高，但目前都沒有大暴跌的明顯徵兆，但我真的不是叫你相信這些指標，因為每個指標的結論很有可能不一樣，例如下面就是一個例子： 反面例子：GOOGLE TREND這個指標已經被Mr.Market在這篇文中介紹過了，簡而言之：google trend 指標就是 “台股” 這個關鍵字的熱門程度，是反指標。 事隔多年看一下，發現最近有點散戶真的是灌入台股這樣： 最近”股票”的搜尋人氣已經達到歷史新高更勝2008金融海嘯前… 為什麼”股票”關鍵字人氣越高，股票越容易跌？因為用google搜”股票”這兩個字的，大部分都是新手散戶，有人把股市當做是一種心理學的競技場，新手往往沒有交易的心理素質，容易買高賣低。引用巴菲特的名言： We simply attempt to be fearful when others are greedy and to be greedy only when others are fearful. 總結：雖然淨值比來看，企業的盈利目前來講還算是跟的上股價的漲幅，但投資時還是得參考更多的指標再做決定，並自行負責！ 我喜歡跑一些歷史數據找一些規律性，但絕對不做預測，希望可以用最中性、較科學的方式來跟大家一起研究投資這門學問。","raw":null,"content":null,"categories":[{"name":"大盤漲跌","slug":"大盤漲跌","permalink":"https://koreal6803.github.io/categories/大盤漲跌/"}],"tags":[{"name":"簡易策略","slug":"簡易策略","permalink":"https://koreal6803.github.io/tags/簡易策略/"},{"name":"大盤","slug":"大盤","permalink":"https://koreal6803.github.io/tags/大盤/"},{"name":"本益比","slug":"本益比","permalink":"https://koreal6803.github.io/tags/本益比/"}]},{"title":"本益比能幫你選出優質股？","slug":"本益比能幫你選出優質股？","date":"2017-09-26T13:32:28.000Z","updated":"2017-12-12T13:56:01.000Z","comments":true,"path":"本益比能幫你選出優質股？/","link":"","permalink":"https://koreal6803.github.io/本益比能幫你選出優質股？/","excerpt":"","text":"如何買到好股票呢？本文用統計的方式讓大家感受本益比（PE）的高低究竟跟股價有多少的影響？是否選擇低本益比（PE）的股票就沒問題？這些都是我自己入門股票買賣最想問的問題，究竟一家公司的PE要看得多重才對。 網路上已經一堆網站都在介紹PE了，今天做一些別的統計給大家看，常常聽別人說PE約在10～20之間，但是我們還是來看一張讓你很有感覺且非常新鮮（昨天的）的台股每間公司的PE分佈圖： 就像大家說的，真的集中在10～20之間，然而我們可以看到此分佈的兩個標準差來到了5～37左右，而更大一部份的PE市集中在10~15之間。 接下來我們就來做個小實驗，把2005年～2017年所有的台股上市公司都拿來回測，每隔半年選入本益比符合條件的全體公司，並且平均分配現有資金，當然實際這樣玩你得身價好幾個億，但我們這邊只是假設一個理想的狀態，手續費也是0，我們一共有七組不同的實驗： 本益比介於 05 ~ 10 之間 介於 10 ~ 15 之間 介於 15 ~ 20 之間 介於 20 ~ 25 之間 介於 25 ~ 30 之間 介於 30 ~ 35 之間 介於 35 ~ 40 之間 每一組都模擬12年看一下投資報酬會如何： Y軸是獲利的倍數，可以發現定10~15普遍比其它組還要好，證明在市場上買低本益比的股票是可以長期看多的，那為何最低本益比的5~10這組，會比較差呢？我個人認為可能是股票的多樣性不足導致的，因為本益比介於5～10的股票本來就比較少，沒有足夠的分散風險。另外也有可能是，某家爛公司突然大量的業外收入，讓我們以為它賺很多，但體質還是很差導致的。來看一下這七組12年的獲利倍數： 這邊的Y軸一樣是獲利的倍數，可以發現本益比越大，獲益就越差，跟報酬呈現反比。也證實了本益比越小的股票，是越值得投資的！ 但！ 這邊指的是投資風險足夠分散的情況下得到的結論，假如你的金額不大，只看本益比買股票會發生什麼事情呢？以下我們再做兩組實驗： 本益比介於12.9~13.1 本益比介於12.5~13.5 這兩種不同的組合，其平均本益比都在13左右，但為何獲利差這麼多呢？答案是因為選股的數量不一樣，第一組實驗每次都選了30支左右的股票，而第二組實驗每次都只選了小貓兩三隻： 可以發現，當你只選了兩三支本益比很小的股票時，根本一點用都沒有用！財經數據就像超級大雜訊，100支股票是可以簡單找到規律性的，但挑一支說會漲，一定是在騙自己。 總結： 本益比重看不重用（XD），不是啦，應該說本益比平常買股票參考用，但絕對不能當作唯一的指標！ 像巴菲特一樣看準了重壓一家公司，實在是很有難度，像我這種散戶，假如資本夠，還是好好的分散風險吧！ 資本不夠的話，得配合其它條件篩選出更好的股票，盡量平均分配，是比較恰當的。","raw":null,"content":null,"categories":[{"name":"指標分析","slug":"指標分析","permalink":"https://koreal6803.github.io/categories/指標分析/"},{"name":"基本面","slug":"指標分析/基本面","permalink":"https://koreal6803.github.io/categories/指標分析/基本面/"}],"tags":[{"name":"如何買股票","slug":"如何買股票","permalink":"https://koreal6803.github.io/tags/如何買股票/"},{"name":"歷史回測","slug":"歷史回測","permalink":"https://koreal6803.github.io/tags/歷史回測/"},{"name":"本益比","slug":"本益比","permalink":"https://koreal6803.github.io/tags/本益比/"},{"name":"分佈圖","slug":"分佈圖","permalink":"https://koreal6803.github.io/tags/分佈圖/"},{"name":"統計","slug":"統計","permalink":"https://koreal6803.github.io/tags/統計/"}]},{"title":"用股價淨值比來判斷大盤漲跌","slug":"用股價淨值比來判斷大盤漲跌","date":"2017-09-25T18:52:40.000Z","updated":"2017-12-12T13:54:04.000Z","comments":true,"path":"用股價淨值比來判斷大盤漲跌/","link":"","permalink":"https://koreal6803.github.io/用股價淨值比來判斷大盤漲跌/","excerpt":"","text":"股價淨值比(PB)真的能夠判斷台股大盤漲跌嗎？今天做了一張gif動圖，讓各位用眼睛觀察台股是否漲多了，是否有泡沫要破的跡象，甚至讓你有機會可以買在大盤低點。 股價淨值比(PB)，可以拿來判斷股民對這某家公司的看法，假如大家覺得這家公司未來會壯大，則淨值比會大於1，如果這家公司會衰退，則淨值比會小於1。那剛好我們就可以做出一張分佈圖，來看一下全體投資人對每一家公司看好看衰的分佈圖，跟大盤之間的變化（這張圖稍大可能要等久一點…）。結果發現，當大盤大跌之前，會有類似的前兆，想知道前兆是什麼？請接著看這張圖： 這張圖的上半部，是用來看多少個企業被看好，多少企業被看衰。分佈圖的x軸分成左右兩邊，大於零代表樂觀，小於零代表悲觀。其實x軸就是股價淨值比取log(PB)的分佈，為什麼要用log呢？是為了讓分佈圖更接近高斯，也讓多空變成在零的對稱位置。此圖的每一根bar代表有多少支股票，其股價淨值比為log(PB)。此圖有五條垂直線，代表著中位數加減兩個標準差。這張圖的下半部則是對照大盤的某個時間點，我們從2010年統計到2015年，每20天計算一次股價淨值比分佈圖。 大部分的時候，投資人基本上看好台灣的市場，所以分佈普遍偏向0的右邊，而且事實發現，近來台股加權指數破萬，並不是大泡泡，而是台灣的企業真的慢慢隨著時間在壯大，因為當大盤破萬點時，分佈圖並沒有超級偏右邊，代表台灣的企業是真的有跟上投資人的期待。然而最近還是有點太過樂觀的氣氛瀰漫，還是得懂得居高思危才行XD。 可以發現一些有趣的現象： 中位數平常都待在log(PB) = 0 ~ 1 之間，當大盤跌到最低點時，會回到0～0.05附近，可以當作大盤買點，成功在2004、2005、2012、2015歸零附近時買入成功買在超低點，唯獨金融海嘯時，中位數最小來到了-0.4左右才反轉，所以還是要看一下中位數是否在&lt;=0附近反轉，比較保險。 大盤在高點時，PB標準差會比其它時候略小，而中位數最大約在 log(PB) = 0.4～0.5 左右（可以當作大盤賣點，但較難判斷） 當大盤要大跌前的前兆是分佈的標準差會明顯變大，且伴隨中位數些許變低 接下來我們用更簡明的圖讓大家更一目了然： 圖中的五條線（紅、黃、藍）分別對應到上面動畫圖分佈的中位數及兩個標準差（紅、黃、白）唯獨中位數的顏色從白色改成藍色，比較清楚。另外灰色的是大盤，發現近五年藍色線接近0且反轉時，都是大盤很好的買點，另外當大盤到高點時，通常這五條線會跟大盤產生背離！也就是大盤越來越高，但分佈線高點卻越來越低。現階段，雖然大盤到 10500 點了，但還未產生背離現象，可以推斷最近的大跌應該不是真正的超大跌（吧？），但這也只是我的猜測啦，股市中沒有什麼是絕對的。 以上就是簡單判斷大盤多空的簡單方法！","raw":null,"content":null,"categories":[{"name":"大盤漲跌","slug":"大盤漲跌","permalink":"https://koreal6803.github.io/categories/大盤漲跌/"}],"tags":[{"name":"簡易策略","slug":"簡易策略","permalink":"https://koreal6803.github.io/tags/簡易策略/"},{"name":"大盤","slug":"大盤","permalink":"https://koreal6803.github.io/tags/大盤/"},{"name":"股價淨值比","slug":"股價淨值比","permalink":"https://koreal6803.github.io/tags/股價淨值比/"}]},{"title":"股價淨值比有這麼神？","slug":"股價淨值比有這麼神？","date":"2017-09-24T11:09:52.000Z","updated":"2017-12-12T13:45:01.000Z","comments":true,"path":"股價淨值比有這麼神？/","link":"","permalink":"https://koreal6803.github.io/股價淨值比有這麼神？/","excerpt":"股價淨值比(PB)，是一個用來判斷究竟公司是被高估還是低估的指標，可以參考介紹\n究竟如何用PB買到好股票呢？PB真的越低越好嗎？我們來看看。","text":"股價淨值比(PB)，是一個用來判斷究竟公司是被高估還是低估的指標，可以參考介紹 究竟如何用PB買到好股票呢？PB真的越低越好嗎？我們來看看。 設計以下實驗：每半年（125天）換一次持股，從2010年到2017年選取台股上市公司所有 PB &lt; N 的公司，並將資產平均作分配，持有半年。 這張圖的Y軸是從2010年開始投資，資產的倍數變化圖，可以發現PB小的股票真的有比大盤好，原本我以為PB不能越低越好，但最後發現，PB越小，報酬率真的越高（只限於這個簡單策略），但我這邊說的是一群股票的整體結果，不代表單一股票PB越小就一定越好喔！可以看出 PB&lt;0.5 的時候，回測結果大起大落，我們來仔細看其中到底怎麼回事： 這個是 PB &lt; 0.5 的歷史績效圖，藍色是不考慮手續費跟稅，且資產可以完全平均分散買入所選的股票；紅色是起始100萬，也是盡量平均分散，但最小張數是一張，不能買零股，並且會放棄太貴的股票。可以發現紅色跟藍色差滿多的，最後結果可以差到50萬元，其中手續費佔了不少，為什麼2015～2016年下滑這麼大呢？我們接著來看一下手中持股數量： 此圖的Y軸是手上持股的數量，可以發現，2015～2016年只買了非常少檔股票，可能才2～3檔。這就像是把雞蛋都放在同一個籃子很危險，造成鉅額損失。另外可以觀察到，買入的股票數量似乎跟大盤成反比，大盤漲，手上股票就變少，大盤跌，手上股票就變多，是不是PB 小的股票變少，反過來想是大部分股票被高估，整體台股過於樂觀，泡沫即將破滅？之後可以來研究看看。 最後我們來看一下最大的下滑損失了多少%的總資產： 此圖的Y軸為下跌百分比，可以發現在2015～2016年，損失了40%的總資產，假如我們剛好在那時候投資，100萬就只剩60萬，實在有點可怕。 於是我們總結一下： 選擇PB越小的一群標的（PB &lt; 0.6~0.8），半年更新一次還不錯，但一定要做好風險管理，千萬別將全部的雞蛋放在同一個籃子裡！也可以配合其它的財報選出優質股～","raw":null,"content":null,"categories":[{"name":"指標分析","slug":"指標分析","permalink":"https://koreal6803.github.io/categories/指標分析/"},{"name":"基本面","slug":"指標分析/基本面","permalink":"https://koreal6803.github.io/categories/指標分析/基本面/"}],"tags":[{"name":"如何買股票","slug":"如何買股票","permalink":"https://koreal6803.github.io/tags/如何買股票/"},{"name":"歷史回測","slug":"歷史回測","permalink":"https://koreal6803.github.io/tags/歷史回測/"},{"name":"股價淨值比","slug":"股價淨值比","permalink":"https://koreal6803.github.io/tags/股價淨值比/"}]},{"title":"策略狗。績優股獵犬3。簡單回測","slug":"策略狗。績優股獵犬3。簡單回測","date":"2017-09-23T09:34:35.000Z","updated":"2017-10-28T19:40:06.000Z","comments":true,"path":"策略狗。績優股獵犬3。簡單回測/","link":"","permalink":"https://koreal6803.github.io/策略狗。績優股獵犬3。簡單回測/","excerpt":"","text":"今天來做個間單的回測，為策略狗文章作一個總結： 我們選股條件： “自由現金報酬率”最高的前30% 本益比 &lt; 25 股價淨值比 &lt; 1.5 每格N天就重新選一次手中的股票，比較跟策略狗不一樣的是，回測不只限於20支，只要滿足條件，就會買入，例如當手上要換成30張股票時，會將自己的所有現金平均分配到此30張股票，不計算手續費。 以下是回測結果： 其中Y軸為你的資產的倍數。可以發現，回測結果跟策略狗上面的曲線是相似的。不論N是多少，都比大盤還要好，然而其中N=60的較差，有可能的原因是換股的頻率太高了，”自由現金報酬率”還沒醞釀完。另外，半年是比一年換一次股好一點點而已，幾乎可以忽略不計。 幫大家測完的結果，雖然我寫的方法跟策略狗有點不一樣，但是用非常雷同的方法，結論是：真的每年再換一次股就好了！ 我每天都會放一篇跟選股有關的新文章，假如你覺得FinLab對你有幫助，也可以告訴我你最想看到哪些內容喔！","raw":null,"content":null,"categories":[{"name":"財報狗分析","slug":"財報狗分析","permalink":"https://koreal6803.github.io/categories/財報狗分析/"}],"tags":[{"name":"歷史回測","slug":"歷史回測","permalink":"https://koreal6803.github.io/tags/歷史回測/"},{"name":"策略狗","slug":"策略狗","permalink":"https://koreal6803.github.io/tags/策略狗/"},{"name":"自由現金報酬率","slug":"自由現金報酬率","permalink":"https://koreal6803.github.io/tags/自由現金報酬率/"}]},{"title":"策略狗。績優股獵犬2。何時買股才對？","slug":"策略狗。績優股獵犬2。何時買股才對？","date":"2017-09-22T13:47:06.000Z","updated":"2017-10-28T19:40:03.000Z","comments":true,"path":"策略狗。績優股獵犬2。何時買股才對？/","link":"","permalink":"https://koreal6803.github.io/策略狗。績優股獵犬2。何時買股才對？/","excerpt":"上一篇介紹了”自由現金報酬率”高的股票，不容易大起大落。\n這篇就來分析一下，”自由現金報酬率” 每隔多少天重新買一次，獲利比較好。","text":"上一篇介紹了”自由現金報酬率”高的股票，不容易大起大落。 這篇就來分析一下，”自由現金報酬率” 每隔多少天重新買一次，獲利比較好。 首先，我們先取2010年到2017年所有低估的股票： 股價淨值比 &lt; 1 本益比 &lt; 15 每隔N天就重新選取低估股票，並觀察其漲跌是否與它的”自由現金報酬率”成正比： X軸為持有的週期，這邊的天數是指股票有開市的天數，理論上一年是250天左右，Y軸為相關性，有關相慣性，在這邊做一個簡單的介紹： 相關性正數越高（最大是1），代表”自由現金報酬率”跟股票漲跌越成正比。 相關性接近0，代表，”自由現金報酬率”跟股價沒關係。 相關性越負（最小是-1），代表”自由現金報酬率”跟股票漲跌越成反比。 可以發現當週期從50天到150天其間，相關性是慢慢增加的，代表股票的”自由現金報酬率”需要一點時間醞釀，醞釀時間大概半年。然而，約在半年之後，correlation就開始大起大落（但好在幾乎都是正的），所以我們可以推斷：持股長達半年以後，股價漲跌跟”自由現金報酬率”較不相干。 於是，從上圖我們可以推斷： 可以約每半年換一次手上的股票，讓”自由現金報酬率”有時間反映在股價上！ 雖然策略狗官網的指導是說一年，但從圖中發現半年或許更合適。（沒准明天寫一篇推翻今天的結論也說不定XDD） 當然，沒有人能保證這些研究都是絕對正確的，假如大家覺得我的實驗哪裡不夠完善，要如何改善，歡迎跟我一起討論。下一篇我們將回測台股2010到2015年所有股票，看看是否跟此結論吻合。 我每天都會放一篇跟選股有關的新文章，假如你覺得FinLab對你有幫助，可以偶爾來追蹤一下～","raw":null,"content":null,"categories":[{"name":"財報狗分析","slug":"財報狗分析","permalink":"https://koreal6803.github.io/categories/財報狗分析/"}],"tags":[{"name":"策略狗","slug":"策略狗","permalink":"https://koreal6803.github.io/tags/策略狗/"},{"name":"自由現金報酬率","slug":"自由現金報酬率","permalink":"https://koreal6803.github.io/tags/自由現金報酬率/"}]},{"title":"策略狗。績優股獵犬1。如何找到優質股？","slug":"策略狗。績優股獵犬1。如何找到優質股？","date":"2017-09-21T13:47:06.000Z","updated":"2017-12-12T13:41:47.000Z","comments":true,"path":"策略狗。績優股獵犬1。如何找到優質股？/","link":"","permalink":"https://koreal6803.github.io/策略狗。績優股獵犬1。如何找到優質股？/","excerpt":"最近財報狗出了一個新的功能：策略狗。\n來研究一下它最新公開的指標～","text":"最近財報狗出了一個新的功能：策略狗。 來研究一下它最新公開的指標～ 財報狗教大家如何打敗大盤，但滿貴的400＊12個月，要4800每年，優點是可以每年操作一次就好了，缺點是你一次就得買12個月！ 針對績優股的”自由現金報酬率”這個比較不常見的指標，想來做個研究。 什麼是自由現金呢？這邊我就直接複製策略狗的教學： 投資資本 = 股東權益 + 長短期金融借款自由現金流 = 營業現金流 - 資本支出自由現金報酬率 = 自由現金流 / 投資資本 既然策略狗告訴我：取”自由現金報酬率”高的股票，買一年會漲的機率較高。我進一步想要分析的是，假如只買一個月會如何呢？ 於是做了一個相關性的比較 以原點(0,0)可以將這張圖表分成上下左右四個象現，此圖的左右，代表任意買入一個月是否獲利，正的是股價上漲，負的是下跌。此圖的上下，代表”自由現金流報酬率”的高低。 很對稱…沒什麼相關性，可以能是一個月還太快，畢竟這個指標是用於長期投資，一個月的漲跌還太短了。但可以發現，在圖的下半部，股價比較容易發散，而上半部股價比較集中，這是一個有趣的現象： “自由現金流報酬率”高的股票，似乎短時間（單月）內不易大起大落。 那把一個月調整成一季、半年、一年，對獲利又帶來什麼影響呢？下一篇再告訴大家。 我每天都會放一篇跟選股有關的新文章，假如你覺得FinLab對你有幫助，可以偶爾來追蹤一下～","raw":null,"content":null,"categories":[{"name":"財報狗分析","slug":"財報狗分析","permalink":"https://koreal6803.github.io/categories/財報狗分析/"}],"tags":[{"name":"策略狗","slug":"策略狗","permalink":"https://koreal6803.github.io/tags/策略狗/"},{"name":"自由現金報酬率","slug":"自由現金報酬率","permalink":"https://koreal6803.github.io/tags/自由現金報酬率/"}]},{"title":"如何戰勝惰性？","slug":"每天至少寫一行","date":"2017-09-20T11:09:42.000Z","updated":"2017-10-28T19:53:20.000Z","comments":true,"path":"每天至少寫一行/","link":"","permalink":"https://koreal6803.github.io/每天至少寫一行/","excerpt":"如何持續運動不中斷？跨年的願望完成了沒？說好每天背英文單字呢？\n這些都需要毅力，我所沒有的毅力。\n然而，最近聽到好友說的話，讓我有點頓悟！","text":"如何持續運動不中斷？跨年的願望完成了沒？說好每天背英文單字呢？ 這些都需要毅力，我所沒有的毅力。 然而，最近聽到好友說的話，讓我有點頓悟！ 其實我們不需要有毅力，我們需要拆解任務的能力。 讓我來說明一下，通常一個任務(task)，跟我的毅力(willpower)可以量化的話，會是這樣子：任務與毅力12task = 100 # 任務willpower = 5 # 毅力別懷疑，我的毅力真的很薄弱。 但沒關係，我們將任務分解成很小塊的子任務(subtask)：分解任務123subtask = taskwhile (subtask &gt; willpower) subtask /= 2秘訣就在這！要分解到一個你覺得可笑的地步，例如： 一天一下仰臥起做 一天寫一行部落格 一天花一小時研究 一定要夠可笑，才會成功。 重點不在於做的多或少，而是在於你是否開始做。很多事情痛苦的是靜摩擦力，後面就輕鬆了！ 一天一下仰臥起做：都做一下了怎麼可能不多做幾下。 一天寫一行部落格：你看我今天都寫多少行了。 一天作一小時研究：0.0 聽起來不錯 每天會有額外的動力去多做一點，甚至很多點每天的任務123progress = 0while(progress &lt; task) progress += subtask + random.randint(0, 10*subtask) 所以，我給自己的標準是：每天寫一行部落格，就好了！","raw":null,"content":null,"categories":[],"tags":[{"name":"生活","slug":"生活","permalink":"https://koreal6803.github.io/tags/生活/"},{"name":"一行","slug":"一行","permalink":"https://koreal6803.github.io/tags/一行/"}]},{"title":"立誓：每天都寫吧！","slug":"立誓：每天都寫吧！","date":"2017-09-19T18:14:58.000Z","updated":"2017-10-28T19:53:09.000Z","comments":true,"path":"立誓：每天都寫吧！/","link":"","permalink":"https://koreal6803.github.io/立誓：每天都寫吧！/","excerpt":"","text":"橘色的夕陽說明今天又結束了。 還有一年365個夜晚可以浪費，但就這麼浪費太可惜了，還是來做些什麼吧！ 於是開始了，希望不要半途而廢的旅程！ Hello World1print(\"Hello world!\")","raw":null,"content":null,"categories":[],"tags":[{"name":"生活","slug":"生活","permalink":"https://koreal6803.github.io/tags/生活/"}]}]}