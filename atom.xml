<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FinLab 量化實驗室</title>
  
  <subtitle>回測與選股教學部落格</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.finlab.tw/"/>
  <updated>2018-03-18T23:14:21.873Z</updated>
  <id>https://www.finlab.tw/</id>
  
  <author>
    <name>koreal6803</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ROE到底高或低才好？</title>
    <link href="https://www.finlab.tw/ROE%E5%88%B0%E5%BA%95%E9%AB%98%E6%88%96%E4%BD%8E%E6%89%8D%E5%A5%BD%EF%BC%9F/"/>
    <id>https://www.finlab.tw/ROE到底高或低才好？/</id>
    <published>2018-03-18T13:15:20.000Z</published>
    <updated>2018-03-18T23:14:21.873Z</updated>
    
    <content type="html"><![CDATA[<p>我曾經在<a href="/EPS跟ROE哪個比較好用？">EPS跟ROE的比較文章</a>中，說明了「ROE越高越好」，但後來隔了幾個月，財報狗發佈了一篇文章「<a href="http://statementdog.com/blog/archives/10552" rel="external nofollow noopener noreferrer" target="_blank">為什麼ROE 不是越高越好？</a>」，瞬間被打臉，雙方都有回測做依據，究竟誰的回測系統有問題，我們來看個究竟！</p><center><img src="/ROE到底高或低才好？/thumbnail.png" alt="搞的我好亂呀！XD" title="搞的我好亂呀！XD"></center><h3 id="FinLab說：為何ROE越高越好？"><a href="#FinLab說：為何ROE越高越好？" class="headerlink" title="FinLab說：為何ROE越高越好？"></a>FinLab說：為何ROE越高越好？</h3><p>ROE就是一個考慮了公司可用資金與報酬的指標：</p><p>股東權益 = 總資產 - 總負債<br>ROE = 稅後盈餘 / 股東權益 * 100%</p><p>所以從公式上，我們應該要選擇稅後盈餘高，且股東權益低的公司，<br>代表公司很會賺錢！</p><p>簡單的策略：</p><ul><li>每60天（約兩個月）換一次ROE大於6％的股票（ROE高的股票）</li><li>結果：ROE高比ROE較低的股票群，來的更有優勢！</li></ul><h3 id="財報狗說：為何ROE越高不會越好，甚至越低越好？"><a href="#財報狗說：為何ROE越高不會越好，甚至越低越好？" class="headerlink" title="財報狗說：為何ROE越高不會越好，甚至越低越好？"></a>財報狗說：為何ROE越高不會越好，甚至越低越好？</h3><p>因為從統計來說，企業無法維持高ROE是常態，<br>通常擁有較高ROE的產業，必定伴隨很多競爭者、效訪者，所以到至於利潤下滑，<br>產業之間的競爭是非常激烈的喔！<br>而且當企業競爭優勢不再，ROE開始下滑時，股價也會反映出來！</p><p>簡單的策略：</p><ul><li>每年換一次ROE高股票</li><li>結果：ROE高效果甚至比ROE低的股票，績效更差！</li></ul><h3 id="所以到底誰說的對？"><a href="#所以到底誰說的對？" class="headerlink" title="所以到底誰說的對？"></a>所以到底誰說的對？</h3><p>這兩套立場各說各話時，背後其實是想要說明一個數據的特性，<br>就像是ROE跟股價之間的變化，</p><p>同樣的故事，不同的解讀方式，造成投資變得非常的撲朔迷離！</p><p>撲朔迷離的問題，資料的分析才是解決之道，就我個人的感覺，<br>應該是資料為本，而說詞當輔助，幫助記憶，<br>我覺得很多投資課程，都太強調說詞的傳授，反而沒有全面的真實資料的佐證！</p><h3 id="所以FinLab跟財報狗誰的故事是對的？"><a href="#所以FinLab跟財報狗誰的故事是對的？" class="headerlink" title="所以FinLab跟財報狗誰的故事是對的？"></a>所以FinLab跟財報狗誰的故事是對的？</h3><p>兩個都對，或者，嚴格說兩個都錯了！<br>就算有數據佐證，故事沒說清楚，也會導致大家理解上有很多誤區</p><p>剛剛仔細看文章的讀者，應該會發現，我們在回測時，更換持股的頻率不同！<br>沒錯，就是因為換股的頻率不同，所以導致績效有非常大的差距！</p><ul><li>高ROE的公司股價上升，是正確的！</li><li>ROE無法維持高檔，會有回歸的趨勢，造成股價又下跌，也是正確的！</li></ul><p>所以接下來我們就來觀看不同頻率持有高ROE的公司，會得到怎麼樣的報酬率：</p><ul><li>當ROE大於6％則持有 n 天，每 n 天換一次股票</li><li>不考慮手續費</li></ul><center><img src="/ROE到底高或低才好？/eq.png" alt="歷史績效圖" title="歷史績效圖"></center><p>可以發現，換股頻率高的時候，獲利情況也會跟著變好，基本上也是一字排開的狀況！<br>財報狗只看到了金黃色那條曲線圖，所以他們說ROE高獲利不高<br>而FinLab只看到了深咖啡色的曲線圖，所以說ROE高獲利也高</p><h3 id="正解："><a href="#正解：" class="headerlink" title="正解："></a>正解：</h3><p>ROE在高檔時，可以買進，但是最好要密切觀察，當ROE下跌時，盡早賣出！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我曾經在&lt;a href=&quot;/EPS跟ROE哪個比較好用？&quot;&gt;EPS跟ROE的比較文章&lt;/a&gt;中，說明了「ROE越高越好」，但後來隔了幾個月，財報狗發佈了一篇文章「&lt;a href=&quot;http://statementdog.com/blog/archives/10552&quot; re
      
    
    </summary>
    
      <category term="指標分析" scheme="https://www.finlab.tw/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/"/>
    
      <category term="基本面" scheme="https://www.finlab.tw/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/%E5%9F%BA%E6%9C%AC%E9%9D%A2/"/>
    
    
      <category term="ROE" scheme="https://www.finlab.tw/tags/ROE/"/>
    
      <category term="如何買股票" scheme="https://www.finlab.tw/tags/%E5%A6%82%E4%BD%95%E8%B2%B7%E8%82%A1%E7%A5%A8/"/>
    
  </entry>
  
  <entry>
    <title>創新高有多高？</title>
    <link href="https://www.finlab.tw/%E5%89%B5%E6%96%B0%E9%AB%98%E6%9C%89%E5%A4%9A%E9%AB%98%EF%BC%9F/"/>
    <id>https://www.finlab.tw/創新高有多高？/</id>
    <published>2018-02-27T20:10:59.000Z</published>
    <updated>2018-02-27T23:59:05.128Z</updated>
    
    <content type="html"><![CDATA[<p>創多少天新高，才叫創新高？今天用非常紮實的回測，來分析一下多少天創新高，才是真正的創新高。<br>看到很多名師選股，都是用創新高的思路，然而買在創新高就是會讓人怕怕的，這麼高了！真的可以買嗎？尤其是對於價值型投資者來說，看到創新高的股票，有些本益比都快噴發60倍，避之唯恐不及，怎麼可能還買呢！？</p><center><img src="/創新高有多高？/thumbnail.png" alt="創新高真的不危險嗎？" title="創新高真的不危險嗎？"></center><p>今天分享給大家，創新高真的沒問題嗎？<br>越創越高難道真的越好？（真的越好）<br>究竟為何會發生這種現象？</p><p>股價突破某個歷史高點，事出必有因，<br>以下歸納一下原因：</p><ul><li>題材股：豬，站在風頭也會飛，可能是最近一波題材股的關係！</li><li>獲利股：財務結構重大改變，獲利暴增。</li><li>利多股：未來獲利預估會暴增的股票。</li></ul><p>當然還可能有更多原因，就請大大們補充了！<br>總之股價突破了某個歷史高點，接下來必定就是兩條路：</p><ul><li>沾了一下高點，又跌了回去</li><li>繼續噴高，一去不復返</li></ul><p>究竟怎麼分別這兩種股票呢？我發現，創新高，多久的新高非常關鍵！<br>所以我做了以下的回測分析：</p><ul><li>當股價創 n 天新高時，分配金額，隔天開盤買入</li><li>持有20天後賣出</li></ul><p>不算手續費，會有以下的結果：</p><center><img src="/創新高有多高？/eq.png" alt="n天創新高時買入20天" title="n天創新高時買入20天"></center><p>超級漂亮的一字排開！而最紅的曲線，就是600天創新高才買入，而最黑的那條線，則是60天創新高就買入了！<br>事實證明，創新高真的有用！而且創新高天數（n）設定越高，創新高就越有用。</p><p>然而這個沒有考慮手續費喔！考慮100萬起始資金，手續費(6折)，和證交稅的話，獲利會降低，<br>600天創新高的績效變成2.75倍，比照同期大盤1.2倍，加權報酬1.59倍。</p><p>接下來來分析一下，不考慮手續費：</p><h3 id="勝率分析"><a href="#勝率分析" class="headerlink" title="勝率分析"></a>勝率分析</h3><p>接下來我們再來分析一下勝率：<br>下圖中的 x 軸是不同的策略，採取x天創新高，<br>y軸則是該交易的勝率（就是一支股票獲利的機率）：</p><center><img src="/創新高有多高？/prob.png" alt="n天創新高 vs 勝率" title="n天創新高 vs 勝率"></center><p>大部分都落在46到47％左右，<br>然而這是沒有加上手續費的，假如加上手續費，勝率更低…。<br>只能說創新高勝率不高…，會讓你心情不太好，<br>而且常常集體一起爛掉（個人使用的感覺），<br>尤其是大盤有點漲不上去的時候，（如最近XDD）。</p><p>但是整體來講還是會獲利喔！就像是一百次小輸，但贏的那次大贏。<br>所以接下來我們就來研究選到飆股的機率吧！</p><h3 id="選到飆股機率"><a href="#選到飆股機率" class="headerlink" title="選到飆股機率"></a>選到飆股機率</h3><p>但偶爾會有飆股！讓我們來分析一下買到飆股的機率，我們先定義飆股為漲40％以上<br>來看看所有的買賣當中，飆股比例是否跟 n 天創新高有關：</p><center><img src="/創新高有多高？/good_stock.png" alt="n天創新高 vs 勝率" title="n天創新高 vs 勝率"></center><p>y軸為買到飆股的機率，大約是1％左右，平均就是100檔裡面有一檔飆股啦XDD。<br>但飆股與n天創新高有明顯的關連，可見，n 越大，越有可能買到飆股，這真是一個好現象呀！</p><h3 id="平均獲利比較"><a href="#平均獲利比較" class="headerlink" title="平均獲利比較"></a>平均獲利比較</h3><p>所以就選擇那些越久創新高的，會比較好囉？<br>先別急，不能只看大飆股，應該要考慮每檔股票買賣的平均獲利比較準！<br>所以我們也分析了一下：</p><center><img src="/創新高有多高？/mean.png" alt="n天創新高 vs 平均獲利" title="n天創新高 vs 平均獲利"></center><p>上圖的y軸，大於1代表獲利，小於1代表虧損，每支股票平均的獲利可以在1％左右，<br>算上摩擦成本（0.7%），就看起來沒這麼多了對吧XD。</p><p>發現，以平均來說，雖然似乎n有越大越好的趨勢，但是120日創新高也不能忽略，<br>我的感覺是，很多人都用120創新高這個參數在買股票，<br>所以很多圖都在120日有奇怪的反應（勝率跟獲利，都異常的高，詳見上圖）。</p><p>所以這篇文章對創新高的天數做了分析，也讓大家有一個策略的原型，<br>可以將此策略再多觀察、多分析，結合不同指標，相信可以篩選出更好的買點賣點！</p><p>不好意思讓大家久等了，最近一直在忙課程的東西，我覺得對長期支持blog的大家覺得虧欠。<br>我的理想目標是blog的發文頻率不要因為課程拍攝影片而被影響！<br>然而，事情畢竟沒有這麼簡單，<br>目前呈現蠟燭幾頭燒的狀態。<br>但我會盡力的！<br>也謝謝各位的長期支持！<br>我們會秉持初衷，維持文章的品質！讓FinLab的理念可以被更多人看到～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;創多少天新高，才叫創新高？今天用非常紮實的回測，來分析一下多少天創新高，才是真正的創新高。&lt;br&gt;看到很多名師選股，都是用創新高的思路，然而買在創新高就是會讓人怕怕的，這麼高了！真的可以買嗎？尤其是對於價值型投資者來說，看到創新高的股票，有些本益比都快噴發60倍，避之唯恐不
      
    
    </summary>
    
      <category term="指標分析" scheme="https://www.finlab.tw/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/"/>
    
      <category term="技術面" scheme="https://www.finlab.tw/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/%E6%8A%80%E8%A1%93%E9%9D%A2/"/>
    
    
      <category term="如何買股票" scheme="https://www.finlab.tw/tags/%E5%A6%82%E4%BD%95%E8%B2%B7%E8%82%A1%E7%A5%A8/"/>
    
      <category term="歷史回測" scheme="https://www.finlab.tw/tags/%E6%AD%B7%E5%8F%B2%E5%9B%9E%E6%B8%AC/"/>
    
      <category term="選股" scheme="https://www.finlab.tw/tags/%E9%81%B8%E8%82%A1/"/>
    
      <category term="型態學" scheme="https://www.finlab.tw/tags/%E5%9E%8B%E6%85%8B%E5%AD%B8/"/>
    
      <category term=" 量化投資" scheme="https://www.finlab.tw/tags/%E9%87%8F%E5%8C%96%E6%8A%95%E8%B3%87/"/>
    
      <category term="指標" scheme="https://www.finlab.tw/tags/%E6%8C%87%E6%A8%99/"/>
    
  </entry>
  
  <entry>
    <title>我的量化投資史</title>
    <link href="https://www.finlab.tw/%E6%88%91%E7%9A%84%E9%87%8F%E5%8C%96%E6%8A%95%E8%B3%87%E9%BB%91%E6%AD%B7%E5%8F%B2/"/>
    <id>https://www.finlab.tw/我的量化投資黑歷史/</id>
    <published>2018-02-15T12:12:15.000Z</published>
    <updated>2018-02-22T11:24:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>我以前很喜歡寫程式，<br>剛開始接觸投資時，就希望能夠用程式超越99%的投資人<br>我以為程式交易是好棒棒，<br>有了這個絕密的武器，在投資市場上就能夠輕而一舉超越絕大部分投資者。<br>現在真的覺得自己好傻好天真呀！</p><center><img src="/我的量化投資黑歷史/thumbnail.jpeg" alt="翻開黑歷史" title="翻開黑歷史"></center><h3 id="我錯了，量化投資不是聖杯"><a href="#我錯了，量化投資不是聖杯" class="headerlink" title="我錯了，量化投資不是聖杯"></a>我錯了，量化投資不是聖杯</h3><p>後來不斷的研究發現，量化投資也是有其極限<br>歷史年化報酬率最高也就10～20％，上線後還不保證可以跟歷史績效一樣<br>這個時候才瞭解，操盤手每天看線，不是看假的，投資還是得花很多時間磨練。</p><h3 id="於是，我開始主觀交易，但後果是？"><a href="#於是，我開始主觀交易，但後果是？" class="headerlink" title="於是，我開始主觀交易，但後果是？"></a>於是，我開始主觀交易，但後果是？</h3><p>想建構一個超強的回測平台，真的不容易。<br>還沒建好前，我手已經很癢，就開始投資了，<br>那個時候我真的很蠢，直接上網搜尋，大家最近講哪些股票、看看KD值，就直接買了！？</p><p>可想而知，結果就是慘賠（幾千塊XD我很膽小），<br>但心情很差！尤其是每天要顧著那些股票，<br>不知道它明天又要如何震盪，心情隨之擺盪。</p><p>於是，我又參考了一個很有名的老師，<br>照著它的明牌買，發現怎麼買怎麼跌，心情更差！<br>總覺得股市茫茫無所適從，</p><p>突然發現，我這不是在”投資”，而是在”賭”！</p><h3 id="有了好策略，還是高買低賣"><a href="#有了好策略，還是高買低賣" class="headerlink" title="有了好策略，還是高買低賣"></a>有了好策略，還是高買低賣</h3><p>我的回測平台終於建好了，開始找好的策略，也有幾個不錯的選股方法，<br>用股市大富翁模擬，跑得好棒棒，於是決定將策略上線，<br>上線後覺得好奇怪，怎麼開始策略不管用了？連續兩個月都在震盪，</p><p>當時又是暑假，我就丟棄此策略，跑去到處玩。</p><p>九月開學，回頭才發現自己的策略漲了20%<br>我竟然都沒有跟到，於是投入真錢，又開始賠…。</p><p>原來這就是傳說中，有了策略還是高買低賣呀XD。</p><h3 id="終於，下定決心每天投資"><a href="#終於，下定決心每天投資" class="headerlink" title="終於，下定決心每天投資"></a>終於，下定決心每天投資</h3><p>開始使用策略，策略會跑出來的股票清單，<br>但我還是不相信它，喜歡自己研究半天，少買幾檔，</p><p>後來發現沒買的都漲，買的都跌，<br>跑出來跟策略的報酬率不太一樣，我的實際報酬率輸策略的報酬率…</p><h3 id="於是，下定決心按表操課？"><a href="#於是，下定決心按表操課？" class="headerlink" title="於是，下定決心按表操課？"></a>於是，下定決心按表操課？</h3><p>沒有，最後我還是沒按表操課，因為我慢慢的跟策略產生了一些默契，<br>現在我每天只看10分鐘，搭配一些額外的籌碼面（券商分點），<br>我發現主觀甚至可以稍微優化策略，當然沒有歷史績效輔助，說不定我只是最近運氣好罷了。</p><p>當初我就是沒有個方向，才學習的如此緩慢，所以撰寫<a href="/股票入門懶人包/">新手選股SOP懶人包</a><br>雖然不一定是最好，但假如你是剛開始接觸股票的話，應該可以避免你走一些冤枉路。</p><h3 id="人與量化條件搭配，相輔相成"><a href="#人與量化條件搭配，相輔相成" class="headerlink" title="人與量化條件搭配，相輔相成"></a>人與量化條件搭配，相輔相成</h3><p>從最初，策略帶我找標的，<br>最後，我用更多數據來篩選策略給我的股票，</p><p>學習選股的路上，像是互相提拔的感覺。<br>人與量化策略一起買賣股票，目前看來是可行的，<br>缺點就是要額外的時間，考慮額外的因素來買賣，<br>而且遇到策略不靈光時，有交易手法變形的可能。</p><p>平常不太會去更動策略的選股，<br>但最近躲過全球慘跌是我自己主觀判斷，</p><p>大家在交易的時候，應該也有量化（機械式的篩選）和主觀（自己查個股資料判斷）的部分，<br>很好奇大家在這兩個部分各佔了多少呢？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我以前很喜歡寫程式，&lt;br&gt;剛開始接觸投資時，就希望能夠用程式超越99%的投資人&lt;br&gt;我以為程式交易是好棒棒，&lt;br&gt;有了這個絕密的武器，在投資市場上就能夠輕而一舉超越絕大部分投資者。&lt;br&gt;現在真的覺得自己好傻好天真呀！&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/我
      
    
    </summary>
    
    
      <category term="投資" scheme="https://www.finlab.tw/tags/%E6%8A%95%E8%B3%87/"/>
    
      <category term="股票" scheme="https://www.finlab.tw/tags/%E8%82%A1%E7%A5%A8/"/>
    
  </entry>
  
  <entry>
    <title>python上櫃資料爬蟲輕鬆做</title>
    <link href="https://www.finlab.tw/%E7%B0%A1%E5%96%AEpython%E4%B8%8A%E6%AB%83%E8%B3%87%E6%96%99%E7%88%AC%E8%9F%B2%E5%AF%A6%E5%81%9A/"/>
    <id>https://www.finlab.tw/簡單python上櫃資料爬蟲實做/</id>
    <published>2018-02-10T19:22:15.000Z</published>
    <updated>2018-02-10T20:10:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>謝謝各位的支持，有很多人寄信來問各式各樣不同的研究！<br>但因為討論熱烈，我目前先挑比較簡單的做，其它的在清單中，依序補上～<br>最近發現上櫃的股票也滿多人在看的，今天教大家如何用python抓取上櫃公司的收盤價！</p><center><img src="/簡單python上櫃資料爬蟲實做/thumbnail.jpeg" alt="輕鬆做爬蟲" title="輕鬆做爬蟲"></center><p>首先，我們只要從這個網址，把資料get下來就行了！</p><figure class="highlight python"><figcaption><span>爬取上櫃股價網址</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">link = <span class="string">'http://www.tpex.org.tw/web/stock/aftertrading/daily_close_quotes/stk_quote_download.php?l=zh-tw&amp;d=107/02/09&amp;s=0,asc,0'</span></div><div class="line">r = requests.get(link)</div><div class="line">r.ok</div></pre></td></tr></table></figure><center><img src="/簡單python上櫃資料爬蟲實做/get.png" alt="爬取上櫃股價網址" title="爬取上櫃股價網址"></center><p>可以看到網址中，包含了日期：107/02/09，這個字樣，可以改成其它日期。<br>get下來就是csv檔了！直接丟進pandas：</p><figure class="highlight python"><figcaption><span>使用pandas讀取</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">lines = r.text.replace(<span class="string">'\r'</span>, <span class="string">''</span>).split(<span class="string">'\n'</span>)</div><div class="line"></div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</div><div class="line">df = pd.read_csv(StringIO(<span class="string">"\n"</span>.join(lines[<span class="number">3</span>:])), header=<span class="keyword">None</span>)</div><div class="line">df.head()</div></pre></td></tr></table></figure><p>但我發現一個小問題：</p><ul><li>在csv檔中，第一行是：”a”,”b”,”c”</li><li>但是在其它行，則顯示：a,b,c</li></ul><p>有沒有雙引號很重要，會讓pandas沒辦法直接讀進來，所以我們前面幾行先去除（上段code中<code>lines[3:]</code>）</p><p>就可以得到下圖：</p><center><img src="/簡單python上櫃資料爬蟲實做/unindex.png" alt="用pandas讀取" title="用pandas讀取"></center><p>但我們的index跟column都還沒設定好（都是數字），要把它轉換成有意義的label：</p><figure class="highlight python"><figcaption><span>整理index跟columns</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">df.columns = list(map(<span class="keyword">lambda</span> l: l.replace(<span class="string">' '</span>,<span class="string">''</span>), lines[<span class="number">2</span>].split(<span class="string">','</span>)))</div><div class="line">df.index = df[<span class="string">'代號'</span>]</div><div class="line">df = df.drop([<span class="string">'代號'</span>], axis=<span class="number">1</span>)</div><div class="line">df.head()</div></pre></td></tr></table></figure><p>首先先來換column，裡面有些複雜的程式（第一行）慢慢講解：</p><ol><li><code>lambda l: l.replace(&#39; &#39;,&#39;&#39;)</code> 是一個函式，但是我懶得命名，所以就用 <code>lambda</code> 賴省略函式名稱，它會讀入，這個函式讀入 <code>l</code>，並將<code>l</code>裡面的空白刪除並outpu出來。</li><li>其中的<code>map(func, array)</code>就指：將<code>array</code>裡面所有元素，都用<code>func</code>處理一遍。</li><li><code>line[2].split(&#39;,&#39;)</code>：將字串依照 “,” 分割成好幾個小字串。</li></ol><p>總體來說，就是將資串分割-&gt;針對每個子字串刪除空白。</p><p>另外針對<code>index</code>，我們就單純用<code>df.index = df[&#39;代號&#39;]</code>來設定，並用<code>df.drop</code>將原本的 <code>column</code>刪除，<br>其實知道pandas有<code>df.set_index()</code>這個函式，但是發現存檔怪怪的，所以改用途法煉鋼（第2、3行）</p><p>這樣差不多就完成了：</p><center><img src="/簡單python上櫃資料爬蟲實做/index.png" alt="整理index跟columns" title="整理index跟columns"></center><p>那要如何把檔案存起來呢？</p><p>我們可以利用</p><figure class="highlight python"><figcaption><span>save file</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">df.to_csv(<span class="string">'test.csv'</span>)</div><div class="line">pd.read_csv(<span class="string">'test.csv'</span>, index_col=<span class="string">'代號'</span>).head()</div></pre></td></tr></table></figure><p>來存檔跟讀檔喔！跑出來會是一模一樣的！</p><center><img src="/簡單python上櫃資料爬蟲實做/save.png" alt="存檔跟讀檔" title="存檔跟讀檔"></center><p>今天的簡易教學就到這邊！<a href="/簡單python上櫃資料爬蟲實做/上櫃資料.ipynb">附件</a> 是 jupyter notebook 檔案</p><p>可以下載下來玩玩看喔！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;謝謝各位的支持，有很多人寄信來問各式各樣不同的研究！&lt;br&gt;但因為討論熱烈，我目前先挑比較簡單的做，其它的在清單中，依序補上～&lt;br&gt;最近發現上櫃的股票也滿多人在看的，今天教大家如何用python抓取上櫃公司的收盤價！&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/簡單py
      
    
    </summary>
    
    
      <category term="python" scheme="https://www.finlab.tw/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>大跌後：用python找出強勢股！</title>
    <link href="https://www.finlab.tw/%E5%A4%A7%E8%B7%8C%E5%BE%8C%EF%BC%9A%E6%89%BE%E5%87%BA%E5%BC%B7%E5%8B%A2%E8%82%A1%EF%BC%81/"/>
    <id>https://www.finlab.tw/大跌後：找出強勢股！/</id>
    <published>2018-02-06T13:57:08.000Z</published>
    <updated>2018-02-06T16:37:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天台股真的太誇張了，這波由美股帶頭的狂跌，真的很難預料，然而事情已經發生，我們能做的就是養精蓄銳，將自己的能力培養起來，等到盤勢穩定的時候，再持之以恒的投資！海浪退潮，你看的出誰穿褲子游泳，今天就帶大家來找出大跌中的強勢股～（長下影線）</p><center><img src="/大跌後：找出強勢股！/thumbnail.jpg" alt="今天好綠！" title="今天好綠！"></center><h3 id="災情分享"><a href="#災情分享" class="headerlink" title="災情分享"></a>災情分享</h3><p>我自己的持股在禮拜一開盤就清空了，因為當時美股已經倒地<br>我可以承受少賺一個禮拜，但不想賠光好幾個月的獲利。<br>雖然統計說<a href="http://rich01.com/87-2/" rel="external nofollow noopener noreferrer" target="_blank">開盤跟美股高連動</a>，盤中相關性反而低，最好在盤中或盤末賣，比較不受影響，<br>但我在法國，沒辦法看盤，所以還是開盤賣…損失了3%左右。</p><h3 id="持之以恒"><a href="#持之以恒" class="headerlink" title="持之以恒"></a>持之以恒</h3><p>投資最重要的就是持之以恒，並不是說一直持有股票，是一直持續學習！<br>我從來都沒有推薦哪支股票，看多或看空，只推薦你不斷的學習！</p><h3 id="程式"><a href="#程式" class="headerlink" title="程式"></a>程式</h3><p>首先先複製<a href="/超簡單台股每日爬蟲教學/">今日股價爬蟲</a>，找出今天崩壞的可憐股票們：<br><figure class="highlight python"><figcaption><span>每日爬蟲</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">datestr = <span class="string">'20180205'</span></div><div class="line">r = requests.post(<span class="string">'http://www.twse.com.tw/exchangeReport/MI_INDEX?response=csv&amp;date='</span> + datestr + <span class="string">'&amp;type=ALL'</span>)</div><div class="line">df = pd.read_csv(StringIO(<span class="string">"\n"</span>.join([i.translate(&#123;ord(c): <span class="keyword">None</span> <span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">' '</span>&#125;) </div><div class="line">                                     <span class="keyword">for</span> i <span class="keyword">in</span> r.text.split(<span class="string">'\n'</span>) </div><div class="line">                                     <span class="keyword">if</span> len(i.split(<span class="string">'",'</span>)) == <span class="number">17</span> <span class="keyword">and</span> i[<span class="number">0</span>] != <span class="string">'='</span>])), header=<span class="number">0</span>)</div><div class="line"></div></pre></td></tr></table></figure></p><p>接下來做一些處裡：</p><ol><li>設定股票名稱為index，讓每個股票可以對應到一樣的數值</li><li>將df中的字串轉換成float（有小數點的數字）</li></ol><figure class="highlight python"><figcaption><span>資料整理</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">df.index = df[<span class="string">'證券名稱'</span>]</div><div class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> df.items():</div><div class="line">    df[i] = pd.to_numeric(df[i], errors=<span class="string">'coerce'</span>)</div></pre></td></tr></table></figure><p>再來，就可以用條件篩選出今天逆勢上漲的股票們！或是下影線長值得期待的股票們：</p><figure class="highlight python"><figcaption><span>找出今天很猛的股票</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">strongIndex = (df[<span class="string">'收盤價'</span>] - df[<span class="string">'最低價'</span>]) / (df[<span class="string">'最高價'</span>] - df[<span class="string">'最低價'</span>])</div><div class="line">strongIndex[(strongIndex &gt; <span class="number">0.8</span>) &amp; ((df[<span class="string">'最高價'</span>] / df[<span class="string">'最低價'</span>] &gt; <span class="number">1.02</span>))].sort_values(ascending=<span class="keyword">False</span>)</div></pre></td></tr></table></figure><center><img src="/大跌後：找出強勢股！/list.png" alt="今日強勢股票們" title="今日強勢股票們"></center><h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><p>雖然分析出了強勢股，可以持續追蹤，但別衝動。<br>現在最重要的就是找買點了，最近有時間的話，我想分析台股大跌的歷史紀錄，找出辨別好買點指標！</p><p>大家在投資的路上繼續努力！共勉之～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天台股真的太誇張了，這波由美股帶頭的狂跌，真的很難預料，然而事情已經發生，我們能做的就是養精蓄銳，將自己的能力培養起來，等到盤勢穩定的時候，再持之以恒的投資！海浪退潮，你看的出誰穿褲子游泳，今天就帶大家來找出大跌中的強勢股～（長下影線）&lt;/p&gt;
&lt;center&gt;&lt;img 
      
    
    </summary>
    
      <category term="指標分析" scheme="https://www.finlab.tw/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/"/>
    
      <category term="技術面" scheme="https://www.finlab.tw/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/%E6%8A%80%E8%A1%93%E9%9D%A2/"/>
    
    
      <category term="選股策略" scheme="https://www.finlab.tw/tags/%E9%81%B8%E8%82%A1%E7%AD%96%E7%95%A5/"/>
    
      <category term="大盤" scheme="https://www.finlab.tw/tags/%E5%A4%A7%E7%9B%A4/"/>
    
      <category term="大跌" scheme="https://www.finlab.tw/tags/%E5%A4%A7%E8%B7%8C/"/>
    
  </entry>
  
  <entry>
    <title>股票入門SOP懶人包</title>
    <link href="https://www.finlab.tw/%E8%82%A1%E7%A5%A8%E5%85%A5%E9%96%80%E6%87%B6%E4%BA%BA%E5%8C%85/"/>
    <id>https://www.finlab.tw/股票入門懶人包/</id>
    <published>2018-01-28T17:00:27.000Z</published>
    <updated>2018-02-03T02:09:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>大部分的人投資股票，包括我自己，常常在股票下跌時手足無措，上漲時沾沾自喜，面對這麼多檔股票無所適從，究竟要如何找到自己的投資方法，長年穩定獲利？一直都是投資人的終極目標。我們研發一套專屬投資SOP，教你如何獲利最佳化！</p><h3 id="初學者投資SOP"><a href="#初學者投資SOP" class="headerlink" title="初學者投資SOP"></a>初學者投資SOP</h3><p>我們的SOP將投資分為三個步驟，學習時期、實驗時期（模擬）、投資時期（實戰），將投資當成個人專案，好好經營，按照以下SOP，在股海茫茫中找到穩定獲利的投資模式。</p><center><img src="/股票入門懶人包/overview.png" alt="SOP流程" title="SOP流程"></center><h2 id="1-第一步：基礎知識建立"><a href="#1-第一步：基礎知識建立" class="headerlink" title="1. 第一步：基礎知識建立"></a>1. 第一步：基礎知識建立</h2><p>首先身為一個初學者，得先瞭解投資人都在說什麼，先瞭解K線圖、技術指標、財報關鍵數據。各種名詞可能讓你馬上暈倒，但不用擔心，你就蜻蜓點水般看過去，不求樣樣精通，只是在腦海裡有個印象，對選股最基本的感覺就可以了！</p><center><img src="/股票入門懶人包/step1.png" alt="第一階段：基礎知識建立" title="第一階段：基礎知識建立"></center><p>這階段你會參考很多不同的免費網站學習，知識不一定全部正確，甚至看一個忘一個，都沒有關係的！這個階段，只是要讓你對投資有個感覺，知道<strong>依照數據，被動的買入賣出</strong>。</p><h5 id="為什麼要看數據被動的買賣呢，主動投資難道不好嗎？"><a href="#為什麼要看數據被動的買賣呢，主動投資難道不好嗎？" class="headerlink" title=" 為什麼要看數據被動的買賣呢，主動投資難道不好嗎？"></a><i class="fa fa-question-circle-o" aria-hidden="true"></i> 為什麼要看數據被動的買賣呢，主動投資難道不好嗎？</h5><p>主動投資說的簡單一點，就是看很多指標、新聞，然後憑吸收的知識，與你已知的投資經驗來買賣股票，主動投資需要花比較多時間研究個股，有一些主觀投資的高手，教你數十種指標，面面俱到，但在教學上，會延伸出幾個問題：</p><ul><li>指標這麼多，到底要用哪幾個？新聞又佔幾％呢？</li><li>新手容易在買賣之間慌張做決定</li><li>賺錢了固然好，賠錢的話，是高手遜嗎？還是自己沒學好？分不清楚…</li></ul><p>當然，主動投資也有很多很厲害的高手在，但是複製他們的能力很難！<br>相反的，假如我們是被動的買賣：</p><ul><li>依據少數指標，邏輯清晰</li><li>買賣坦然買入，不帶感情</li><li>虧錢了，當然是策略不好～直接換一個！</li></ul><center><img src="/股票入門懶人包/invest_method.png" alt="主動和被動投資" title="主動和被動投資"></center><p>這樣的方法比較適合新手，之所以強調<strong>被動的買賣股票</strong>，是因為我們希望可以機械式的操作，不要有任何感情，才能把高手的策略原封不動，複製過來！</p><h5 id="最近股市大好，我先來練練盤感？"><a href="#最近股市大好，我先來練練盤感？" class="headerlink" title=" 最近股市大好，我先來練練盤感？"></a><i class="fa fa-question-circle-o" aria-hidden="true"></i> 最近股市大好，我先來練練盤感？</h5><p>此期間，<strong>不要實戰買賣股票</strong>！網路上有很多無法獲利的方法，照著用真的只會賠錢，或是浪費時間，我們在下一個階段會教你如何破除這些陷阱。但請不要現在就等不急開始買賣，尤其是你覺得最近行情大好，更不可以輕舉妄動，請記住：我們是新手，而市場就是一個心裡學戰場，專門騙新手進去賠錢的！</p><h3 id="任務：養成閱讀理財知識的習慣"><a href="#任務：養成閱讀理財知識的習慣" class="headerlink" title=" 任務：養成閱讀理財知識的習慣"></a><i class="fa fa-calendar-check-o" aria-hidden="true"></i> 任務：養成閱讀理財知識的習慣</h3><p>要養成每天花一點投資的好習慣，聽起來累，其實不然，我們只希望你每天能花十分鐘看一篇文章：瞭解一些指標，以及如何運用，以下就是一些入門的文章，看文章時，記得把一些有趣的選股方法給存起來喔！之後會用到喔～</p><p>財經數據雖然背後有很多複雜的邏輯！對簡單的被動投資而言，每個財務名詞就是一個數字，數字大於或小於多少，就買進賣出。如此而已。</p><ul><li>股票是否買貴了？最應該瞭解的股價淨值比（PB）和本益比（PE）：<ul><li><a href="http://statementdog.com/blog/archives/7165" rel="external nofollow noopener noreferrer" target="_blank">財報狗：用股價淨值比找出買賣點</a></li><li><a href="/股價淨值比有這麼神？/">股價淨值比有這麼神？</a></li><li><a href="/用股價淨值比來判斷大盤漲跌/">用股價淨值比來判斷大盤漲跌</a></li><li><a href="/大盤要跌了嗎？利用企業本益比分佈來判斷！/">大盤要跌了嗎？利用企業本益比分佈來判斷！</a></li><li><a href="/本益比能幫你選出優質股？/">本益比能幫你選出優質股？</a></li><li><a href="/比本益比更好用的本益比成長率！/">本益成長比真的越低越好！？</a></li></ul></li></ul><ul><li>企業是否能獲利，重點盈利指標：<ul><li><a href="/買股票只考慮ROE是不夠的！/">買股票只考慮ROE是不夠的！</a></li><li><a href="/EPS跟ROE哪個比較好用？/">EPS跟ROE哪個比較好用？</a></li><li><a href="http://statementdog.com/blog/archives/10552" rel="external nofollow noopener noreferrer" target="_blank">財報狗：為什麼 ROE 不是越高越好？（甚至越高越不好！）</a></li><li><a href="/絕無僅有的超強指標！/">絕無僅有的超強指標！</a></li><li><a href="/三種月營收進階看法/">三種看月營收的進階方法！</a></li><li><a href="/市值營收比/">市值營收比-幫你找到便宜獲利股</a></li><li><a href="http://rich01.com/363-2/" rel="external nofollow noopener noreferrer" target="_blank">持續營收成長的股票真的比較好嗎？有一個風險一定要小心</a></li><li><a href="http://statementdog.com/blog/archives/10606" rel="external nofollow noopener noreferrer" target="_blank">財報狗：用自由現金流避開地雷股</a></li></ul></li></ul><ul><li>幫你衡量企業體質：<ul><li><a href="/用杜邦分析加強你的選股技巧（上）/">用杜邦分析加強你的選股技巧（上）</a></li><li><a href="/用杜邦分析加強你的選股技巧（中）總資產轉換率/">用杜邦分析加強你的選股技巧（中）總資產週轉率</a></li><li><a href="/用杜邦分析加強你的選股技巧（中）權益乘數/">用杜邦分析加強你的選股技巧（中）權益乘數</a></li><li><a href="/用杜邦分析加強你的選股技巧（中）淨利率/">用杜邦分析加強你的選股技巧（中）淨利率</a></li><li><a href="/用杜邦分析加強你的選股技巧（下）回測/">用杜邦分析加強你的選股技巧（下）回測</a></li><li><a href="http://statementdog.com/blog/archives/10606" rel="external nofollow noopener noreferrer" target="_blank">用自由現金流避開地雷股</a></li></ul></li></ul><ul><li>買股的時機如何決定呢，看技術指標吧：<ul><li><a href="/KD1/">如何定義KD鈍化</a></li><li><a href="/坊間沒在教的RSI-選股技巧/">坊間沒在教的RSI選股技巧</a></li><li><a href="/超短線上影黑密技！/">超短線上影黑密技！</a></li></ul></li></ul><p>目前大多數為FinLab自己的文章，有空再補齊其它網站的文章，也請大家有好文章多多分享喔！</p><p>好了！既然一個月過去了！相信你已經獲得了一些寶貴的知識，也養成每天碰一點投資的習慣，準備磨刀霍霍，小試伸手！</p><h2 id="2-第二步：策略實驗階段（一個月到半年）"><a href="#2-第二步：策略實驗階段（一個月到半年）" class="headerlink" title="2. 第二步：策略實驗階段（一個月到半年）"></a>2. 第二步：策略實驗階段（一個月到半年）</h2><p>這邊主要分為三個部分，就跟打桌球、網球同樣的道理，你必須先有裝備，才能上場打球！買賣股票也是一樣：</p><ol><li>找一種你喜歡的球類（選好一個選股策略）</li><li>買一個好球拍（找到適合的選股工具）</li><li>開始訓練（用股市大富翁模擬）</li></ol><center><img src="/股票入門懶人包/step2.png" alt="第二階段：策略實驗階段" title="第二階段：策略實驗階段"></center><p>有了財經知識，就可以開始建構自己的策略囉！</p><h3 id="任務：找到至少5種被動的選股策略"><a href="#任務：找到至少5種被動的選股策略" class="headerlink" title=" 任務：找到至少5種被動的選股策略"></a><i class="fa fa-calendar-check-o" aria-hidden="true"></i> 任務：找到至少5種被動的選股策略</h3><p>這個時期有一個重要的一點，就是找到自己滿意的投資模式，假如你是新手，建議可以先利用量化策略下手，因為量化策略獨有可複製性，不論智商、不論經驗，只要照表操課就行了。然而哪裡有還不錯的量化策略呢？有一些上網看到的策略，在這邊舉例：</p><ul><li>FinLab上公開的免費的策略：<ul><li><a href="/教你用財報狗巴菲特免費選股/">教你用財報狗巴菲特免費選股</a></li><li><a href="/價值股回測/">價值股策略</a></li><li><a href="/比策略狗還要安全的選股策略！/">14年14倍的選股策略！</a></li><li><a href="/小資族也可以使用的選股法！/">小資族也可以使用的選股法！</a></li><li><a href="/回測框架介紹/">回測框架介紹</a></li><li><a href="/腦力激盪的外資策略！/">腦力激盪的外資策略！</a></li><li><a href="/跟著外資買股票/">外資大賣，反而要買！？</a></li></ul></li></ul><h4 id="要選擇適合的策略"><a href="#要選擇適合的策略" class="headerlink" title=" 要選擇適合的策略"></a><i class="fa fa-exclamation-circle" aria-hidden="true"></i> 要選擇適合的策略</h4><p>上面提供了一些策略，但不代表你一定要使用，可以隨時新增其它你覺得有可能獲利的策略！但並不是所有的策略都能使用喔！必須要滿足以下條件：</p><ol><li>同時至少持有5檔股票以上，最好有10檔以上</li><li>最好是週期性的，例如7天、20天、60天換一次手上所有股票，不然會太累</li><li>假如不嫌累，可以找每天更換持股的策略（非常不建議XD）</li></ol><h4 id="先不要自創選股方法"><a href="#先不要自創選股方法" class="headerlink" title=" 先不要自創選股方法"></a><i class="fa fa-exclamation-circle" aria-hidden="true"></i> 先不要自創選股方法</h4><p>這個階段，你還是先效法別人的方法就好，因為自創的方法有非常大的風險，會把策略搞爛！<br>根據我的經驗，一個好的策略，隨便加一個條件，都很有可能導致策略績效變差（差很多）！<br>假如你是第一次買股票，可以就照著別人的策略跑就可以囉！<br>網路上已經很多策略了，真的有好的策略在裡面，只怕你挑不到而已XD</p><p>找到了5個策略，就可以開始實做選股的功能了！</p><h3 id="任務：實做5種策略的選股功能"><a href="#任務：實做5種策略的選股功能" class="headerlink" title=" 任務：實做5種策略的選股功能"></a><i class="fa fa-calendar-check-o" aria-hidden="true"></i> 任務：實做5種策略的選股功能</h3><p>實做策略的方式有很多種，每一種都不錯：</p><h4 id="1）用別人的軟體"><a href="#1）用別人的軟體" class="headerlink" title="1）用別人的軟體"></a>1）用別人的軟體</h4><p>又可以分成免費或是付費的，免費的好處就是不用錢，但壞處就是有些功能比較寒酸一點…。花錢買的軟體，優點是功能較多，缺點是要繳月費、年費。</p><h4 id="2）自己寫程式！（前期很累、後期很輕鬆）"><a href="#2）自己寫程式！（前期很累、後期很輕鬆）" class="headerlink" title="2）自己寫程式！（前期很累、後期很輕鬆）"></a>2）自己寫程式！（前期很累、後期很輕鬆）</h4><p>你可以利用python自行打造一套選股軟體，我們finlab提供了各式各樣的教學，讓你每天可以把最新的資料爬下來，自己作分析，甚至自己追蹤個股漲跌！每天按一個鍵，自動策略策略，所需花費 0 元！當然剛開始的付出是肯定多的，並畢竟要學一門程式語言！但不用擔心，我們也提供文章引導你慢慢學習python：</p><ul><li>財經python教學：<ul><li><a href="/超簡單台股每日爬蟲教學/">超簡單台股每日爬蟲教學</a> </li><li><a href="/Python-時間序列實作！/">Python 時間序列實做！</a></li><li><a href="/Python-簡單158種技術指標計算/">Python 簡單158種技術指標計算</a></li><li><a href="/Python：利用Pandas輕鬆選股/">Python：利用Pandas輕鬆選股</a></li><li><a href="/Python-財報爬蟲-1-綜合損益表/">Python 財報爬蟲</a></li><li><a href="/用python獲取持股損益表/">自動下單（1）用Python爬取交易記錄</a></li><li><a href="/利用Pandas輕鬆取得歷史股價/">利用Pandas輕鬆取得股價並回測</a></li><li><a href="/Python-簡單用月營收選股！/">Python-簡單的月營收選股！</a></li><li><a href="/超簡單用python抓取每月營收/">超簡單用python抓取每月營收</a></li><li><a href="/用數學計算日馳何時崩盤！/">用數學計算日馳何時崩盤！</a></li><li><a href="/Python-簡單選股和回測/">Python 簡單選股和回測</a></li><li><a href="/讓Machine-Learning幫你看財報！/">讓Machine Learning幫你看財報！</a></li><li><a href="/利用Machine-Learning-選股新手教學/">利用Machine Learning 選股新手教學</a> </li><li><a href="/Machine-Learning-表示：看季線最無用！/">Machine Learning 表示：看季線最無用！</a></li><li><a href="/用深度學習幫你解析K線圖！/">用深度學習幫你解析K線圖！</a></li></ul></li></ul><p>不論你是用免費、付費、或是python，都要達到在1分鐘內找出當天的股票清單</p><center><img src="/股票入門懶人包/compare.png" alt="不同的選股工具比較" title="不同的選股工具比較"></center><p>既然我們已經能夠選出股票清單，就可以開始利用虛擬大富翁，檢測5種測略是否獲利。</p><h3 id="任務：股市大富翁模擬這5種選股策略"><a href="#任務：股市大富翁模擬這5種選股策略" class="headerlink" title=" 任務：股市大富翁模擬這5種選股策略"></a><i class="fa fa-calendar-check-o" aria-hidden="true"></i> 任務：股市大富翁模擬這5種選股策略</h3><p>這個階段，就開始真正選股並模擬操作，離實戰不遠了！也恭喜你一路堅持，這個步驟非常重要！在<a href="https://www.cmoney.tw/vt/" rel="external nofollow noopener noreferrer" target="_blank">股市大富翁裡面</a>，你會得到虛擬的帳戶，並且有虛擬的金錢來投資股票，開5個虛擬帳戶，並且依照5種策略分別選股，並且分別監控獲利狀況！聽起來是一件非常累人的差事，其實五個策略一個小時以內就能設定完成！只要你的策略買賣頻率低一點，不會太辛苦的。</p><p>你也可以利用python取代股市大富翁的功能，程式碼也還算簡單！這樣就能達到每天按一個鍵，自動模擬並追蹤策略的績效了！但我們先從股市大富翁講起：</p><h5 id="我沒辦法在股市大富翁開那麼多帳戶？"><a href="#我沒辦法在股市大富翁開那麼多帳戶？" class="headerlink" title=" 我沒辦法在股市大富翁開那麼多帳戶？"></a><i class="fa fa-question-circle-o" aria-hidden="true"></i> 我沒辦法在股市大富翁開那麼多帳戶？</h5><p>不用擔心，你真正的帳戶只需要一個，因為大富翁遊戲裡的虛擬子帳戶，是可以同時開很多個的！把每個帳戶的初始金額，設定在你自己投資的金額上，將五個虛擬帳戶重新命名，就可以開始玩囉！</p><h5 id="同時監控5個策略也太累了吧！"><a href="#同時監控5個策略也太累了吧！" class="headerlink" title=" 同時監控5個策略也太累了吧！"></a><i class="fa fa-question-circle-o" aria-hidden="true"></i> 同時監控5個策略也太累了吧！</h5><p>假如你覺得很累，那可能有以下幾點原因，你誤解了我們的遊戲規則：</p><ol><li><strong>策略買賣頻率太高了</strong>：最好要降低一點，假如你20天換一次持股，代表三個禮拜只需要一天換股就好了，很輕鬆的</li><li><strong>你用主觀的方式篩選股票</strong>：假如你是股票的新手，請不用做這件事情，短時間或許讓你獲利，但十有八九長期績效會輸給策略，我自己就曾經犯過這樣的錯，浪費好多時間斟酌，還拖累了原本的策略。</li><li><strong>天生就是懶</strong>：那你非適合學python，目前我手上有18個股票策略每天更新，自動監測獲利狀況，也不用管策略買賣頻率到底高不高，每天都只按一個鍵！</li></ol><p>請持續約60天以上的模擬，並且與大盤比較績效，當然你有心力，還可以增加策略數，別人用金錢測試繳交學費，你用的是股市大富翁模擬，學費0元！別人一次測試一個策略，你一次就測了五個，快速累積經驗！</p><h2 id="第三步：真槍實彈上場"><a href="#第三步：真槍實彈上場" class="headerlink" title="第三步：真槍實彈上場"></a>第三步：真槍實彈上場</h2><p>恭喜你至少有了5種策略，並且對它們有深刻的瞭解，可以根據最近的績效，選擇1～2個策略，真槍實彈上戰場！</p><center><img src="/股票入門懶人包/step3.png" alt="第三步：真槍實彈上場" title="第三步：真槍實彈上場"></center><h3 id="任務：選1～2個策略上戰場吧！"><a href="#任務：選1～2個策略上戰場吧！" class="headerlink" title=" 任務：選1～2個策略上戰場吧！"></a><i class="fa fa-calendar-check-o" aria-hidden="true"></i> 任務：選1～2個策略上戰場吧！</h3><p>要怎麼選呢？首先你得看策略的風險是不是你可以承受的，先說在前，由於大部分的策略可能是做多，金融海嘯時無可避免的會很慘（可能有30%以上的財產損失），所以應該要預留一些資金，等金融海嘯結束時，再進場投資便宜股。或許你想問，既然金融海嘯跌這麼慘，那為什麼還要投資呢？因為長期來說，擁有一個好策略，能獲利的機會滿大的！</p><h5 id="是否選擇獲利高的策略越好？"><a href="#是否選擇獲利高的策略越好？" class="headerlink" title=" 是否選擇獲利高的策略越好？"></a><i class="fa fa-question-circle-o" aria-hidden="true"></i> 是否選擇獲利高的策略越好？</h5><p>還有很多面向可以考慮，例如sharp、最大跌幅、波動率…等等，但由於五種策略的實驗時間很短，用這麼多指標來量化績效有沒有必要，也有待商榷。簡單來說，就選擇績效筆直向上的策略，就可以了！記得跟大盤的報酬率比較一下，看看你的策略是否大於大盤的策略，例如考慮近60天，我有11個策略勝大盤，7個輸大盤，最高的報酬率是17％，最低的是-4％，同期大盤2.5％。</p><h5 id="如何分配每檔股票花多少錢？"><a href="#如何分配每檔股票花多少錢？" class="headerlink" title=" 如何分配每檔股票花多少錢？"></a><i class="fa fa-question-circle-o" aria-hidden="true"></i> 如何分配每檔股票花多少錢？</h5><p>剛開始一定是平均分散的概念，將金額等分給每支持有的股票，當然有時候金額會不夠，這時你可以摒棄價格太高的股票，再平均分配。<br>等你熟練之後，可以再依照額外的選股指標調整比例。</p><h3 id="任務：監測你的策略"><a href="#任務：監測你的策略" class="headerlink" title=" 任務：監測你的策略"></a><i class="fa fa-calendar-check-o" aria-hidden="true"></i> 任務：監測你的策略</h3><p>上線之後，依照你的策略更新持股的頻率，監測它的報酬率，假如近期報酬大於0則很好，要是虧損，也不必太擔心，可以在上線策略前，先寫好萬一虧損的方針：</p><h4 id="防止策略大跌：設定止損點"><a href="#防止策略大跌：設定止損點" class="headerlink" title="防止策略大跌：設定止損點"></a>防止策略大跌：設定止損點</h4><p>對於那些上線的策略，你可以設定一個門檻，例如10%，假如策略近期（例如：60天）跌幅超越了10%，則立即終止運作。<br>另外，其實每個策略在大盤不好的時候，都會有嚴重的虧損。另一種風險控管，是把策略跟大盤做比較，近期內虧損比大盤嚴重則停止使用。</p><h4 id="發現更好的策略：替換方式"><a href="#發現更好的策略：替換方式" class="headerlink" title="發現更好的策略：替換方式"></a>發現更好的策略：替換方式</h4><p>假如你發現其它模擬的策略，有些跑得比上線的策略還好很多，可以非常緩慢的把策略1慢慢更新成策略2。為什麼要緩慢的移動，不能一次到位呢？因為就算我們已經有好策略，還是有可能高買低賣，緩慢的更新讓你有充裕的時間分析自己的決策是否正確，讓你有臨陣回頭的餘地。</p><p>什麼叫做慢慢更新呢？例如你有100％的投資金額，正在用策略1，想換成策略2，則可以先設定成60％，40％的比重。然後每個月或每週，參考績效撥10%給另一個策略。</p><p>別忘了只顧著你上線的策略，模擬的策略也要記得顧喔！</p><h3 id="任務：繼續模擬策略"><a href="#任務：繼續模擬策略" class="headerlink" title=" 任務：繼續模擬策略"></a><i class="fa fa-calendar-check-o" aria-hidden="true"></i> 任務：繼續模擬策略</h3><p>這個時期，就算有些策略沒有上線，還是要繼續模擬喔！因為或許某個策略只是最近較差，說不定哪天會噴高。你可以把模擬當做事練兵的感覺，強將手下無落兵，必須偶爾練練兵，甚至要增加新兵（新策略），並汰弱留強。依照自己的能力，手上至少保持5個策略在模擬。</p><p>假如你是用python選股，那更好，可以自動模擬選股，並把績效存起來！我手上的18支策略每天都會自動更新，也不用我去管它，只要最後看它們績效，決定用哪支就好了！這也是學python最大的好處之一喔！</p><h4 id="不要隨意更動策略"><a href="#不要隨意更動策略" class="headerlink" title="不要隨意更動策略"></a>不要隨意更動策略</h4><p>在設定SOP時，你可能覺得止損點-10％還可以承受，但碰到實戰，往往跌了5%就快受不了了，這時候，就是深呼吸沉住氣，策略還沒跌到停損點，不要直接替換策略，因為你很有可能會賣在策略的低點喔！稍微耐心點，跌到止損點前，就祈禱它慢慢補回來吧！</p><h2 id="結語：不斷進化的SOP"><a href="#結語：不斷進化的SOP" class="headerlink" title="結語：不斷進化的SOP"></a>結語：不斷進化的SOP</h2><p>現在就把這個SOP加入最愛吧！我們會依照大家的建議不斷更新此SOP喔！這個SOP的三步驟，其中的步驟一跟二，我自己親身經歷，覺得學到很多東西，投資功力大增！推薦給大家，讓大家用很短暫的時間，超越大部分的投資新手，然而第三步驟，也是我還在嘗試的階段，不敢說寫到最好，但力求完善，之後隨著我的見識更廣，會慢慢將SOP越修越好！不知道大家對這個SOP有什麼看法？會不會覺得太難，在下面留言，讓這個SOP變得更好吧！</p><center><img src="/股票入門懶人包/overview.png" alt="SOP流程" title="SOP流程"></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;大部分的人投資股票，包括我自己，常常在股票下跌時手足無措，上漲時沾沾自喜，面對這麼多檔股票無所適從，究竟要如何找到自己的投資方法，長年穩定獲利？一直都是投資人的終極目標。我們研發一套專屬投資SOP，教你如何獲利最佳化！&lt;/p&gt;
&lt;h3 id=&quot;初學者投資SOP&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="如何買股票" scheme="https://www.finlab.tw/tags/%E5%A6%82%E4%BD%95%E8%B2%B7%E8%82%A1%E7%A5%A8/"/>
    
      <category term="入門教學" scheme="https://www.finlab.tw/tags/%E5%85%A5%E9%96%80%E6%95%99%E5%AD%B8/"/>
    
  </entry>
  
  <entry>
    <title>用深度學習幫你解析K線圖！</title>
    <link href="https://www.finlab.tw/%E7%94%A8%E6%B7%B1%E5%BA%A6%E5%AD%B8%E7%BF%92%E5%B9%AB%E4%BD%A0%E8%A7%A3%E6%9E%90K%E7%B7%9A%E5%9C%96%EF%BC%81/"/>
    <id>https://www.finlab.tw/用深度學習幫你解析K線圖！/</id>
    <published>2018-01-23T19:50:05.000Z</published>
    <updated>2018-01-31T17:57:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>現今在股市裡有三大分析方法，即：技術面、基本面、籌碼面等，而各流派似乎也都有自己能自圓其說的選股策略。這三種方法並無法直接說出孰好孰壞，分析方法的選擇跟操作者的心態、個性、紀律都有很大的關係。而我個人覺得買股票除了要買得好（投報率高）以外，賣得快（IRR高）也是很重要的，畢竟投報率會因為時間的流逝而漸漸下降。</p><p>因為重視時間對股價影響的我，日K線裡藏有的奧妙便是我想一探究竟的。K線型態學主要就是在探討每根K棒的開盤價、收盤價、最高價、最低價、以及成交量這五大要素所反映出多空雙方的心理交戰。日本著名的投資大師本間宗久影響後人而產生一系列「酒田戰法」的相關書籍裡頭便對K線型態學有了不少篇幅的評析。但人心是會變的，K線型態也是。有沒有方法能幫助我們解讀每天數百張詭譎多變的K線圖呢？</p><center><img src="/用深度學習幫你解析K線圖！/K-trends.jpg" alt="K線圖" title="K線圖"></center><h3 id="長短期記憶-Long-Short-Term-Memory-LSTM-神經網路"><a href="#長短期記憶-Long-Short-Term-Memory-LSTM-神經網路" class="headerlink" title="長短期記憶 (Long Short-Term Memory, LSTM) 神經網路"></a>長短期記憶 (Long Short-Term Memory, LSTM) 神經網路</h3><p>長短期記憶 (LSTM) 神經網路屬於循環神經網路 (RNN) 的一種，特別適合處理和預測與時間序列相關的重要事件。以下面的句子做為一個上下文推測的例子：</p><blockquote><p>“我從小在法國長大，我會說一口流利的？？”</p></blockquote><p>由於同一句話裡前面提及到<strong>法國</strong>這個國家，且後面提到<strong>說</strong>這個動作。因此，LSTM便能從<strong>法國</strong>以及<strong>說</strong>這兩個長短期的記憶中重要的訊號推測出可能性較大的<strong>法文</strong>這個結果。</p><p>K線圖也述說著類似的事情，股價是隨著時間的流動及重要訊號的出現而做出反應的：</p><ul><li>在價穩量縮的盤整區間中突然出現一帶量突破的大紅K，表示股價可能要上漲了</li><li>在跳空缺口後出現島狀反轉，表示股價可能要下跌了</li><li>在連漲幾天的走勢突然出現帶有長上下影線的十字線，表示股價有反轉的可能</li></ul><p>LSTM 要做的事情就是找出一段時間區間的K棒當中有沒有重要訊號（如帶量紅K）並學習之後股價的走勢。</p><h3 id="LSTM-實作股價預測"><a href="#LSTM-實作股價預測" class="headerlink" title="LSTM 實作股價預測"></a>LSTM 實作股價預測</h3><p>資料是以鴻海(2317)從2013年初到2017年底每天的開盤價、收盤價、最高價、最低價、以及成交量等數據，如果你對這筆資料有興趣請參考附註的方式索取。</p><center><img src="/用深度學習幫你解析K線圖！/2317_prices.png" alt="鴻海2013到2017年歷史股價" title="鴻海2013到2017年歷史股價"></center><p>首先將資料讀入並存至pandas的DataFrame，另外對可能有N/A的row進行剔除：</p><figure class="highlight python"><figcaption><span>資料讀入</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"></div><div class="line">foxconndf= pd.read_csv(<span class="string">'./foxconn_2013-2017.csv'</span>, index_col=<span class="number">0</span> )</div><div class="line">foxconndf.dropna(how=<span class="string">'any'</span>,inplace=<span class="keyword">True</span>)</div></pre></td></tr></table></figure><p>為了避免原始數據太大或是太小沒有統一的範圍而導致 LSTM 在訓練時難以收斂，我們以一個最小最大零一正規化方法對數據做正規化：</p><figure class="highlight python"><figcaption><span>資料正規化</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize</span><span class="params">(df)</span>:</span></div><div class="line">    newdf= df.copy()</div><div class="line">    min_max_scaler = preprocessing.MinMaxScaler()</div><div class="line">    </div><div class="line">    newdf[<span class="string">'open'</span>] = min_max_scaler.fit_transform(df.open.values.reshape(<span class="number">-1</span>,<span class="number">1</span>))</div><div class="line">    newdf[<span class="string">'low'</span>] = min_max_scaler.fit_transform(df.low.values.reshape(<span class="number">-1</span>,<span class="number">1</span>))</div><div class="line">    newdf[<span class="string">'high'</span>] = min_max_scaler.fit_transform(df.high.values.reshape(<span class="number">-1</span>,<span class="number">1</span>))</div><div class="line">    newdf[<span class="string">'volume'</span>] = min_max_scaler.fit_transform(df.volume.values.reshape(<span class="number">-1</span>,<span class="number">1</span>))</div><div class="line">    newdf[<span class="string">'close'</span>] = min_max_scaler.fit_transform(df.close.values.reshape(<span class="number">-1</span>,<span class="number">1</span>))</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> newdf</div><div class="line"></div><div class="line">foxconndf_norm= normalize(foxconndf)</div></pre></td></tr></table></figure><center><img src="/用深度學習幫你解析K線圖！/normdf_head.png" alt="對所有數值以其最小值與最大值進行0到1的正規化" title="對所有數值以其最小值與最大值進行0到1的正規化"></center><p>然後對資料進行訓練集與測試集的切割，另外也定義每一筆資料要有多長的時間框架：</p><figure class="highlight python"><figcaption><span>資料編輯</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_helper</span><span class="params">(df, time_frame)</span>:</span></div><div class="line">    </div><div class="line">    <span class="comment"># 資料維度: 開盤價、收盤價、最高價、最低價、成交量, 5維</span></div><div class="line">    number_features = len(df.columns)</div><div class="line"></div><div class="line">    <span class="comment"># 將dataframe 轉成 numpy array</span></div><div class="line">    datavalue = df.as_matrix()</div><div class="line"></div><div class="line">    result = []</div><div class="line">    <span class="comment"># 若想要觀察的 time_frame 為20天, 需要多加一天做為驗證答案</span></div><div class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> range( len(datavalue) - (time_frame+<span class="number">1</span>) ): <span class="comment"># 從 datavalue 的第0個跑到倒數第 time_frame+1 個</span></div><div class="line">        result.append(datavalue[index: index + (time_frame+<span class="number">1</span>) ]) <span class="comment"># 逐筆取出 time_frame+1 個K棒數值做為一筆 instance</span></div><div class="line">    </div><div class="line">    result = np.array(result)</div><div class="line">    number_train = round(<span class="number">0.9</span> * result.shape[<span class="number">0</span>]) <span class="comment"># 取 result 的前90% instance做為訓練資料</span></div><div class="line">    </div><div class="line">    x_train = result[:int(number_train), :<span class="number">-1</span>] <span class="comment"># 訓練資料中, 只取每一個 time_frame 中除了最後一筆的所有資料做為feature</span></div><div class="line">    y_train = result[:int(number_train), <span class="number">-1</span>][:,<span class="number">-1</span>] <span class="comment"># 訓練資料中, 取每一個 time_frame 中最後一筆資料的最後一個數值(收盤價)做為答案</span></div><div class="line">    </div><div class="line">    <span class="comment"># 測試資料</span></div><div class="line">    x_test = result[int(number_train):, :<span class="number">-1</span>]</div><div class="line">    y_test = result[int(number_train):, <span class="number">-1</span>][:,<span class="number">-1</span>]</div><div class="line">    </div><div class="line">    <span class="comment"># 將資料組成變好看一點</span></div><div class="line">    x_train = np.reshape(x_train, (x_train.shape[<span class="number">0</span>], x_train.shape[<span class="number">1</span>], number_features))</div><div class="line">    x_test = np.reshape(x_test, (x_test.shape[<span class="number">0</span>], x_test.shape[<span class="number">1</span>], number_features))  </div><div class="line"></div><div class="line">    <span class="keyword">return</span> [x_train, y_train, x_test, y_test]</div><div class="line"></div><div class="line"><span class="comment"># 以20天為一區間進行股價預測</span></div><div class="line">X_train, y_train, X_test, y_test = data_helper(foxconndf_norm, <span class="number">20</span>)</div></pre></td></tr></table></figure><p>我們以 Keras 框架做為 LSTM 的實作選擇，首先在面前加了兩層 256個神經元的 LSTM layer，並都加上了Dropout層來防止資料過度擬合（overfitting）。最後再加上兩層有不同數目神經元的全連結層來得到只有1維數值的輸出結果，也就是預測股價：</p><figure class="highlight python"><figcaption><span>Keras 模型建立</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</div><div class="line"><span class="keyword">from</span> keras.layers.core <span class="keyword">import</span> Dense, Dropout, Activation</div><div class="line"><span class="keyword">from</span> keras.layers.recurrent <span class="keyword">import</span> LSTM</div><div class="line"><span class="keyword">import</span> keras</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_model</span><span class="params">(input_length, input_dim)</span>:</span></div><div class="line">    d = <span class="number">0.3</span></div><div class="line">    model = Sequential()</div><div class="line"></div><div class="line">    model.add(LSTM(<span class="number">256</span>, input_shape=(input_length, input_dim), return_sequences=<span class="keyword">True</span>))</div><div class="line">    model.add(Dropout(d))</div><div class="line"></div><div class="line">    model.add(LSTM(<span class="number">256</span>, input_shape=(input_length, input_dim), return_sequences=<span class="keyword">False</span>))</div><div class="line">    model.add(Dropout(d))</div><div class="line"></div><div class="line">    model.add(Dense(<span class="number">16</span>,kernel_initializer=<span class="string">"uniform"</span>,activation=<span class="string">'relu'</span>))</div><div class="line">    model.add(Dense(<span class="number">1</span>,kernel_initializer=<span class="string">"uniform"</span>,activation=<span class="string">'linear'</span>))</div><div class="line"></div><div class="line">    model.compile(loss=<span class="string">'mse'</span>,optimizer=<span class="string">'adam'</span>, metrics=[<span class="string">'accuracy'</span>])</div><div class="line"></div><div class="line">    <span class="keyword">return</span> model</div><div class="line"></div><div class="line"><span class="comment"># 20天、5維</span></div><div class="line">model = build_model( <span class="number">20</span>, <span class="number">5</span> )</div></pre></td></tr></table></figure><p>建立好 LSTM 模型後，我們就用前面編輯好的<strong>訓練資料集</strong>開始進行模型的訓練：</p><figure class="highlight python"><figcaption><span>LSTM 模型訓練</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 一個batch有128個instance，總共跑50個迭代</span></div><div class="line">model.fit( X_train, y_train, batch_size=<span class="number">128</span>, epochs=<span class="number">50</span>, validation_split=<span class="number">0.1</span>, verbose=<span class="number">1</span>)</div></pre></td></tr></table></figure><center><img src="/用深度學習幫你解析K線圖！/lstm-training.png" alt="LSTM 模型訓練過程" title="LSTM 模型訓練過程"></center><p>在經過一段時間的訓練過程後，我們便能得到 LSTM 模型（model）。接著再用這個模型對測試資料進行預測，以及將預測出來的數值（pred）與正確答案（y_test）還原回原始股價的大小區間：</p><figure class="highlight python"><figcaption><span>LSTM 模型預測股價及還原數值</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">denormalize</span><span class="params">(df, norm_value)</span>:</span></div><div class="line">    original_value = df[<span class="string">'close'</span>].values.reshape(<span class="number">-1</span>,<span class="number">1</span>)</div><div class="line">    norm_value = norm_value.reshape(<span class="number">-1</span>,<span class="number">1</span>)</div><div class="line">    </div><div class="line">    min_max_scaler = preprocessing.MinMaxScaler()</div><div class="line">    min_max_scaler.fit_transform(original_value)</div><div class="line">    denorm_value = min_max_scaler.inverse_transform(norm_value)</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> denorm_value</div><div class="line"></div><div class="line"><span class="comment"># 用訓練好的 LSTM 模型對測試資料集進行預測</span></div><div class="line">pred = model.predict(X_test)</div><div class="line"></div><div class="line"><span class="comment"># 將預測值與正確答案還原回原來的區間值</span></div><div class="line">denorm_pred = denormalize(foxconndf, pred)</div><div class="line">denorm_ytest = denormalize(foxconndf, y_test)</div></pre></td></tr></table></figure><h3 id="LSTM-預測股價結果"><a href="#LSTM-預測股價結果" class="headerlink" title="LSTM 預測股價結果"></a>LSTM 預測股價結果</h3><p>讓我們把還原後的數值與答案畫出來，看看效果如何：</p><figure class="highlight python"><figcaption><span>LSTM 預測股價結果</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line">%matplotlib inline  </div><div class="line"></div><div class="line">plt.plot(denorm_pred,color=<span class="string">'red'</span>, label=<span class="string">'Prediction'</span>)</div><div class="line">plt.plot(denorm_ytest,color=<span class="string">'blue'</span>, label=<span class="string">'Answer'</span>)</div><div class="line">plt.legend(loc=<span class="string">'best'</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure><p>如下圖，藍線是正確答案、紅線是預測股價。雖然整體看起來預測股價與正確答案有類似的走勢，但仔細一看預測股價都比正確答案落後了幾天。如果真的將這個模型應用在買賣策略上我們應該很快就畢業了。</p><center><img src="/用深度學習幫你解析K線圖！/performance-default.png" alt="LSTM 預測股價結果" title="LSTM 預測股價結果"></center><p>所以我們試著來調整一些設定：</p><ul><li>時間框架長度的調整</li><li>Keras 模型裡全連結層的 activation 與 optimizaer 的調整</li><li>Keras 模型用不同的神經網路（種類、順序、數量）來組合</li><li>batch_size 的調整、epochs 的調整</li><li>…</li></ul><p>經過我們對上述的幾個參數稍微調整過後，我們就得到一個更貼近正確答案的預測結果囉。如果你發現哪些設置能得到更好的結果歡迎你在下面留言跟大家分享。</p><center><img src="/用深度學習幫你解析K線圖！/performance-finetuned.png" alt="微調後 LSTM 預測股價結果" title="微調後 LSTM 預測股價結果"></center><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ol><li>詳細的python教學：<a href="/%E5%88%A9%E7%94%A8Machine-Learning-%E9%81%B8%E8%82%A1%E6%96%B0%E6%89%8B%E6%95%99%E5%AD%B8/">利用Machine-Learning-選股新手教學</a></li><li>Keras 說明文件：<a href="https://keras.io/" rel="external nofollow noopener noreferrer" target="_blank">Keras Documentation</a></li><li>另一種 RNN：<a href="https://arxiv.org/abs/1406.1078" rel="external nofollow noopener noreferrer" target="_blank">GRU, Gated Recurrent Unit</a></li><li>Kaggle 相關競賽：<a href="https://www.kaggle.com/dgawlik/nyse" rel="external nofollow noopener noreferrer" target="_blank">New York Stock Exchange</a></li></ol><h3 id="附註：現在就開始AI選股，免費取得訓練資料"><a href="#附註：現在就開始AI選股，免費取得訓練資料" class="headerlink" title="附註：現在就開始AI選股，免費取得訓練資料"></a>附註：現在就開始AI選股，免費取得訓練資料</h3><p>取得訓練資料的方法很簡單，幫冷清的寒舍小小宣傳一下：</p><ol><li>按右下角分享這篇文章到你的FB</li><li>將分享截圖傳到 finlabstaff@gmail.com</li><li>一兩天內即可獲得原始資料喔！</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;現今在股市裡有三大分析方法，即：技術面、基本面、籌碼面等，而各流派似乎也都有自己能自圓其說的選股策略。這三種方法並無法直接說出孰好孰壞，分析方法的選擇跟操作者的心態、個性、紀律都有很大的關係。而我個人覺得買股票除了要買得好（投報率高）以外，賣得快（IRR高）也是很重要的，畢
      
    
    </summary>
    
      <category term="AI看股票" scheme="https://www.finlab.tw/categories/AI%E7%9C%8B%E8%82%A1%E7%A5%A8/"/>
    
    
      <category term="python" scheme="https://www.finlab.tw/tags/python/"/>
    
      <category term="程式設計" scheme="https://www.finlab.tw/tags/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/"/>
    
      <category term="型態學" scheme="https://www.finlab.tw/tags/%E5%9E%8B%E6%85%8B%E5%AD%B8/"/>
    
      <category term="Deep-Learning" scheme="https://www.finlab.tw/tags/Deep-Learning/"/>
    
      <category term="深度學習" scheme="https://www.finlab.tw/tags/%E6%B7%B1%E5%BA%A6%E5%AD%B8%E7%BF%92/"/>
    
      <category term="K線圖" scheme="https://www.finlab.tw/tags/K%E7%B7%9A%E5%9C%96/"/>
    
      <category term="K棒" scheme="https://www.finlab.tw/tags/K%E6%A3%92/"/>
    
      <category term="Candlesticks" scheme="https://www.finlab.tw/tags/Candlesticks/"/>
    
      <category term="LSTM" scheme="https://www.finlab.tw/tags/LSTM/"/>
    
  </entry>
  
  <entry>
    <title>Python-簡單的月營收選股！</title>
    <link href="https://www.finlab.tw/Python-%E7%B0%A1%E5%96%AE%E7%94%A8%E6%9C%88%E7%87%9F%E6%94%B6%E9%81%B8%E8%82%A1%EF%BC%81/"/>
    <id>https://www.finlab.tw/Python-簡單用月營收選股！/</id>
    <published>2018-01-22T14:10:47.000Z</published>
    <updated>2018-03-05T14:38:20.235Z</updated>
    
    <content type="html"><![CDATA[<p>月營收的資訊是跟股價成高度相關，月營收好的股票比較容易漲，反之容易跌，被列為財報狗的付費功能之一。今天教大家如何用python免費使用此功能！這篇是完整的範例，教你如何下載月營收，過濾出可能會飆漲的股票。這個條件我很常用，效果也不錯，分享給大家！</p><center><img src="/Python-簡單用月營收選股！/thumbnail.png" alt="如何用月營收選股？" title="如何用月營收選股？"></center><h3 id="下載近12個月的月報"><a href="#下載近12個月的月報" class="headerlink" title="下載近12個月的月報"></a>下載近12個月的月報</h3><p>之前我們也講過<a href="/%E8%B6%85%E7%B0%A1%E5%96%AE%E7%94%A8python%E6%8A%93%E5%8F%96%E6%AF%8F%E6%9C%88%E7%87%9F%E6%94%B6/">如何獲取月營收的歷史資訊</a></p><p>請先到該網站把<code>monthly_report</code>給copy下來，我們接下來會用到喔！</p><p><code>monthly_report</code>這個函式，會下載上市公司月報，並整理成<code>pandas.DataFrame</code>，也就是一種存在python中的表格。接下來我們連續呼叫<code>monthly_report</code>來把近12個月的資料收集整齊：</p><figure class="highlight python"><figcaption><span>獲取近12個月的資料</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line">data = &#123;&#125;</div><div class="line">n_days = <span class="number">12</span></div><div class="line">now = datetime.datetime.now()</div><div class="line"></div><div class="line">year = now.year</div><div class="line">month = now.month</div><div class="line"></div><div class="line"><span class="keyword">while</span> len(data) &lt; n_days:</div><div class="line">    </div><div class="line">    print(<span class="string">'parsing'</span>, year, month)</div><div class="line">    </div><div class="line">    <span class="comment"># 使用 crawPrice 爬資料</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        data[<span class="string">'%d-%d-01'</span>%(year, month)] = monthly_report(year, month)</div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        print(<span class="string">'get 404, please check if the revenues are not revealed'</span>)</div><div class="line">    </div><div class="line">    <span class="comment"># 減一個月</span></div><div class="line">    month -= <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> month == <span class="number">0</span>:</div><div class="line">        month = <span class="number">12</span></div><div class="line">        year -= <span class="number">1</span></div><div class="line"></div><div class="line">    time.sleep(<span class="number">10</span>)</div></pre></td></tr></table></figure><center><img src="/Python-簡單用月營收選股！/cmd1.png" alt="爬蟲結果" title="爬蟲結果"></center><p>執行的時候，有一行error，因為新的月報還沒有下來的原因，而其它天都是成功的，這樣都算是正常！</p><p>以上這段code請大家一定要看的懂喔！我們要的只有 data 這個 dictionary 物件，裡面依照不同的日期，存放著所有股票的月營收。例如，你可以顯示<code>data[&#39;2017-12-01&#39;]</code>，就會顯示以下這張表：</p><center><img src="/Python-簡單用月營收選股！/cmd2.png" alt="2017-02月報" title="2017-02月報"></center><p>代表 2017 年 12 月的月營收。</p><h3 id="數據處理-合成時間序列"><a href="#數據處理-合成時間序列" class="headerlink" title="數據處理 - 合成時間序列"></a>數據處理 - 合成時間序列</h3><p>根據不同的日期，有不同的dataFrame，用起來有點麻煩，所以我們再經過一個處理，將所有數據結合，變成時間序列：</p><figure class="highlight python"><figcaption><span>數據處理─結合月營收資訊</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> k <span class="keyword">in</span> data.keys():</div><div class="line">    data[k].index = data[k][<span class="string">'公司代號'</span>]</div><div class="line">    </div><div class="line">df = pd.DataFrame(&#123;k:df[<span class="string">'當月營收'</span>] <span class="keyword">for</span> k, df <span class="keyword">in</span> data.items()&#125;).transpose()</div><div class="line">df.index = pd.to_datetime(df.index)</div><div class="line">df = df.sort_index()</div></pre></td></tr></table></figure><p>最後產出的 df 可以囉！df 的結構如下：</p><center><img src="/Python-簡單用月營收選股！/cmd3.png" alt="df的結構" title="df的結構"></center><p>這個 df 超級好用，以下示範畫出 1101（台泥） 的月營收曲線圖：</p><center><img src="/Python-簡單用月營收選股！/cmd4.png" alt="台泥營收曲線圖" title="台泥營收曲線圖"></center><p>還有他的MOM：</p><center><img src="/Python-簡單用月營收選股！/cmd5.png" alt="台泥MOM" title="台泥MOM"></center><p>各種變化就讓大家自己去玩囉～這邊還是得著重在選股的功能上！</p><h3 id="開始選股"><a href="#開始選股" class="headerlink" title="開始選股"></a>開始選股</h3><p>首先，大家可以參考最近寫的，<a href="/三種月營收進階看法/">三種月營收進階看法</a>，裡面的選股條件，接下來會一一實做：</p><h3 id="平均線法"><a href="#平均線法" class="headerlink" title="平均線法"></a>平均線法</h3><figure class="highlight python"><figcaption><span>平均線法選股</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">method1 = df.iloc[<span class="number">-3</span>:].mean() &gt; df.iloc[<span class="number">-12</span>:].mean()</div><div class="line">method1[method1 == <span class="keyword">True</span>].index</div></pre></td></tr></table></figure><p>噹啷！就這麼一行，選出來了，會有非常多的標的，還可以再進行過濾。<br>這邊有一些厲害的 function 提一下：</p><ul><li>iloc[i:j] 選取第i個到第j個數據</li><li>mean() 選處取出來的series的平均</li></ul><h3 id="成長法"><a href="#成長法" class="headerlink" title="成長法"></a>成長法</h3><figure class="highlight python"><figcaption><span>成長法選股</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">method2 = df.rolling(<span class="number">4</span>, min_periods=<span class="number">2</span>).mean()</div><div class="line">method2 = (method2 &gt; method2.shift()).iloc[<span class="number">-5</span>:].sum()</div><div class="line">method2[method2 == <span class="number">5</span>]</div></pre></td></tr></table></figure><p>第一行首先是平滑，做出平均序列，其中<code>min_periods=2</code> 代表只要有兩筆數據以上，就計算平均，不然就寫成NaN。<br>第二、三行是說這條平滑曲線，近五個月都是上升</p><h3 id="創新高法"><a href="#創新高法" class="headerlink" title="創新高法"></a>創新高法</h3><figure class="highlight python"><figcaption><span>創新高法選股</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">method3 = df.iloc[<span class="number">-1</span>] == df.iloc[<span class="number">-12</span>:].max()</div><div class="line">method3[method3 == <span class="keyword">True</span>].index</div></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>可以將各種的條件再做組合，例如用<a href="/股價淨值比有這麼神？/">股價淨值比</a>，或是 <a href="/EPS跟ROE哪個比較好用？/">ROE</a>，實測都有不錯的效果喔！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;月營收的資訊是跟股價成高度相關，月營收好的股票比較容易漲，反之容易跌，被列為財報狗的付費功能之一。今天教大家如何用python免費使用此功能！這篇是完整的範例，教你如何下載月營收，過濾出可能會飆漲的股票。這個條件我很常用，效果也不錯，分享給大家！&lt;/p&gt;
&lt;center&gt;&lt;
      
    
    </summary>
    
      <category term="財經Python教學" scheme="https://www.finlab.tw/categories/%E8%B2%A1%E7%B6%93Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="python" scheme="https://www.finlab.tw/tags/python/"/>
    
      <category term="程式設計" scheme="https://www.finlab.tw/tags/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/"/>
    
      <category term="月營收" scheme="https://www.finlab.tw/tags/%E6%9C%88%E7%87%9F%E6%94%B6/"/>
    
  </entry>
  
  <entry>
    <title>三種看月營收的進階方法！</title>
    <link href="https://www.finlab.tw/%E4%B8%89%E7%A8%AE%E6%9C%88%E7%87%9F%E6%94%B6%E9%80%B2%E9%9A%8E%E7%9C%8B%E6%B3%95/"/>
    <id>https://www.finlab.tw/三種月營收進階看法/</id>
    <published>2018-01-17T23:27:48.000Z</published>
    <updated>2018-02-10T15:04:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>說到台股基本面，就不得不提更新最快的<strong>月營收</strong>，每個月更新一次，讓投資人措手不及，今天就來教你怎麼看月營收！並比較這三種方法的獲利～</p><center><img src="/三種月營收進階看法/thumbnail.png" alt="三種針對月營收的選股指標！" title="三種針對月營收的選股指標！"></center><h3 id="1-均線法"><a href="#1-均線法" class="headerlink" title="1. 均線法"></a>1. 均線法</h3><p>好像是財報狗的收費功能，其實還滿簡單計算的！</p><ul><li>當近三個月營收平均 &gt; 近一年月營收平均</li></ul><p>代表公司最近一季表現比較好，可能會有較亮眼的財報！但可能會有一些怪異的營建股，月營收突然暴增被選進來。</p><h3 id="2-突破法"><a href="#2-突破法" class="headerlink" title="2. 突破法"></a>2. 突破法</h3><p>這個是看Cmoney找到的，創新高的月營收容易被炒作，獲利效果還不錯，我發現24個月創新高最有用！</p><ul><li>創過去24個月創新高</li></ul><h3 id="3-成長法"><a href="#3-成長法" class="headerlink" title="3. 成長法"></a>3. 成長法</h3><p>這個是我自己研發的指標，其實我在<a href="/絕無僅有的超強指標！/">之前有講過</a>，計算稍微複雜一點：</p><ul><li>當我們要平滑月營收曲線時，取最近的 M 個值平均，產生新的曲線</li><li>新的曲線連續 N 個月不斷變高。</li></ul><p>主要是利用連續N個月，不斷成長的概念！</p><h3 id="最後還有MOM、QOQ、YOY"><a href="#最後還有MOM、QOQ、YOY" class="headerlink" title="最後還有MOM、QOQ、YOY"></a>最後還有MOM、QOQ、YOY</h3><p>這些就是比較傳統一點的指標：</p><ul><li>MOM 這個月跟上個月比較</li><li>QOQ 當前一季跟前季比（三個月加總）</li><li>YOY 當月跟去年同月相比</li></ul><p>以下就是所有方法的回測，我們任意選擇一天觀察當月的指標，將符合條件的股票納入監測（假設平均買入），並在60天後賣出並選擇新的股票，每60天一次循環，以下是績效：</p><center><img src="/三種月營收進階看法/eq.png" alt="持有60天換股，不含手續費" title="持有60天換股，不含手續費"></center><p>在這場大亂鬥中，從爛到優慢慢分析：</p><h3 id="傳統指標普遍效果較差"><a href="#傳統指標普遍效果較差" class="headerlink" title="傳統指標普遍效果較差"></a>傳統指標普遍效果較差</h3><p>這三個指標，假如值為正就買入。<br>MOM 自然是最遜的指標，但也不能怪它，畢竟他只用了最近兩個月的數據<br>QOQ、YOY 表現比較好，但畢竟是傳統一點的指標，效果較差，但比MOM好很多了！</p><p>因為我是大於零就買入，所以可能效果比較不好，之後有機會再研究看看。</p><h3 id="第三名：均線法（average）"><a href="#第三名：均線法（average）" class="headerlink" title="第三名：均線法（average）"></a>第三名：均線法（average）</h3><p>首先我們看到財報狗付費策略裡面，收錄的均線法（average），我們發現這個方法還不賴，每個月選到的股票大部分都在400檔以上，過年的二月也有一兩百檔，算是個很平穩的策略</p><h3 id="第二名：突破法（break-through）"><a href="#第二名：突破法（break-through）" class="headerlink" title="第二名：突破法（break through）"></a>第二名：突破法（break through）</h3><p>老實說<strong>突破法</strong>大部分的時間都輸給<strong>均線法</strong>，唯獨2015年中，壓注在單一檔股票（只有一檔符合條件），而該股票剛好是飆股，於是瞬間超越多數方法，然而非常不推薦一般選股使用。</p><h3 id="第一名：我發明的成長法（increase）"><a href="#第一名：我發明的成長法（increase）" class="headerlink" title="第一名：我發明的成長法（increase）"></a>第一名：我發明的成長法（increase）</h3><p>最後我的<strong>成長法</strong>小勝一籌，原因是它選出的股票，獲利成長都常常很驚人（單看月營收的話）！但選出來的股票比較少，平常有一兩百檔，有時候只有數十檔，<strong>成長法</strong>的原理我在<a href="/絕無僅有的超強指標！/">那篇文章</a> 有講過，有興趣可以看一看喔！</p><h3 id="選股參考：均線法"><a href="#選股參考：均線法" class="headerlink" title="選股參考：均線法"></a>選股參考：均線法</h3><p><strong>均線法</strong>找出的股票數量比較多，每六檔股票裡面就有一檔，適合當選股的輔助判斷，每當你看某檔股票時，偶爾用均線法判斷一下。</p><h3 id="積極選股：成長法"><a href="#積極選股：成長法" class="headerlink" title="積極選股：成長法"></a>積極選股：成長法</h3><p><strong>成長法</strong>找出的股票數量比較少，過濾了太多的股票（然而改變參數也是可以的），所以比較適合積極型選股，從中再挑選較好的股票。</p><p><strong>均線法</strong>跟<strong>成長法</strong>這兩個方法找出來的股票比較穩定，第二名的<strong>突破法</strong>有點像是賽到XDD，以後選股大可以參考這兩個指標，作為買賣參考依據！近日我會針對這兩個指標教大家實做！有興趣記得要關注這個部落格喔！</p><p>大家還知道月營收可以變出什麼有趣的指標嗎？可以分享給我喔！幫你測測看～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;說到台股基本面，就不得不提更新最快的&lt;strong&gt;月營收&lt;/strong&gt;，每個月更新一次，讓投資人措手不及，今天就來教你怎麼看月營收！並比較這三種方法的獲利～&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/三種月營收進階看法/thumbnail.png&quot; alt=&quot;三種
      
    
    </summary>
    
      <category term="指標分析" scheme="https://www.finlab.tw/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/"/>
    
      <category term="基本面" scheme="https://www.finlab.tw/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/%E5%9F%BA%E6%9C%AC%E9%9D%A2/"/>
    
    
      <category term="如何買股票" scheme="https://www.finlab.tw/tags/%E5%A6%82%E4%BD%95%E8%B2%B7%E8%82%A1%E7%A5%A8/"/>
    
      <category term="月營收" scheme="https://www.finlab.tw/tags/%E6%9C%88%E7%87%9F%E6%94%B6/"/>
    
  </entry>
  
  <entry>
    <title>用數學計算日馳何時崩盤！</title>
    <link href="https://www.finlab.tw/%E7%94%A8%E6%95%B8%E5%AD%B8%E8%A8%88%E7%AE%97%E6%97%A5%E9%A6%B3%E4%BD%95%E6%99%82%E5%B4%A9%E7%9B%A4%EF%BC%81/"/>
    <id>https://www.finlab.tw/用數學計算日馳何時崩盤！/</id>
    <published>2018-01-10T15:18:47.000Z</published>
    <updated>2018-01-28T12:46:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>目前我持有日馳的股票，前段時間噴高高，但最近不停漲停！跌停！搞的我心力交瘁。於是今天決定用一個數學模型來預測可能的崩盤時機。<br>LPPL是我之前在ricequant看到的泡沫預測模型，對於那些極右側交易者（追漲）滿有幫助的，然而這個模型只考慮股價，不考慮財報、月報等，所以比較適合用在大盤，個股可能比較沒辦法。但我還是很想知道日馳是否要崩盤了！？XD</p><center><img src="/用數學計算日馳何時崩盤！/thumbnail.png" alt="究竟是漲還是跌？" title="究竟是漲還是跌？"></center><h3 id="預防針"><a href="#預防針" class="headerlink" title="預防針"></a>預防針</h3><p>這邊還是要提醒大家，這個只是個有趣的小實驗，但我真的不確定這個很可靠，請不要依賴LPPL買賣股票，可以當作一個參考，追蹤一下日馳的股價是否跟LPPL模型顯示的一樣。我個人是持非常懷疑的態度！請大家不要因為這篇文章來決定要不要買日馳。說不定明天就崩到底給你看XDD。</p><h3 id="LPPL"><a href="#LPPL" class="headerlink" title="LPPL"></a>LPPL</h3><p>該<a href="https://www.ricequant.com/community/topic/427/" rel="external nofollow noopener noreferrer" target="_blank">網站</a>都已經寫的滿清楚的，我就不多加贅述，雖然你第一次看可能會不太懂，可以先看以下的補充說明：一些關於model（模型）的觀念：</p><p>model就是一個數學模型，由一或多個數學公式組成，可以拿來預測天氣、預測人口成長率、預測各種東西，是個很強大的東西！</p><p>LPPL就是一個數學震盪公式：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>(</mo><mi>t</mi><mo>)</mo><mo>=</mo><mi>L</mi><mi>P</mi><mi>P</mi><mi>L</mi><mo>(</mo><mi>t</mi><mo separator="true">,</mo><msup><mi>t</mi><mtext><mi mathvariant="normal">c</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">a</mi><mi mathvariant="normal">s</mi><mi mathvariant="normal">h</mi></mtext></msup><mo separator="true">,</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">y(t) = LPPL(t, t^\text{crash}, x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8991079999999999em;"></span><span class="strut bottom" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathit">t</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathit">L</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mord mathit">L</span><span class="mopen">(</span><span class="mord mathit">t</span><span class="mpunct">,</span><span class="mord"><span class="mord mathit">t</span><span class="vlist"><span style="top:-0.413em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="text mord scriptstyle uncramped"><span class="mord mathrm">c</span><span class="mord mathrm">r</span><span class="mord mathrm">a</span><span class="mord mathrm">s</span><span class="mord mathrm">h</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="mord mathit">x</span><span class="mclose">)</span></span></span></span></span><p>當中的一些變數：</p><ol><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>(</mo><mi>t</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">y(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathit">t</span><span class="mclose">)</span></span></span></span>：模擬的股價1. <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.61508em;"></span><span class="strut bottom" style="height:0.61508em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">t</span></span></span></span>：就是指每天的日期</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>t</mi><mtext><mi mathvariant="normal">c</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">a</mi><mi mathvariant="normal">s</mi><mi mathvariant="normal">h</mi></mtext></msup></mrow><annotation encoding="application/x-tex">t^\text{crash}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.849108em;"></span><span class="strut bottom" style="height:0.849108em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">t</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="text mord scriptstyle uncramped"><span class="mord mathrm">c</span><span class="mord mathrm">r</span><span class="mord mathrm">a</span><span class="mord mathrm">s</span><span class="mord mathrm">h</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>：崩盤的日期3. <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">x</span></span></span></span>：其它一些比較不重要的參數 </li></ol><p>我們的目標就是調整 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>t</mi><mtext><mi mathvariant="normal">c</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">a</mi><mi mathvariant="normal">s</mi><mi mathvariant="normal">h</mi></mtext></msup></mrow><annotation encoding="application/x-tex">t^\text{crash}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.849108em;"></span><span class="strut bottom" style="height:0.849108em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">t</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="text mord scriptstyle uncramped"><span class="mord mathrm">c</span><span class="mord mathrm">r</span><span class="mord mathrm">a</span><span class="mord mathrm">s</span><span class="mord mathrm">h</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">x</span></span></span></span> 的值，讓模擬的股價 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>(</mo><mi>t</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">y(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathit">t</span><span class="mclose">)</span></span></span></span> 可以對應到某支股票的實際股價 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>y</mi><mi>m</mi></msup><mo>(</mo><mi>t</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">y^m(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathit">m</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mopen">(</span><span class="mord mathit">t</span><span class="mclose">)</span></span></span></span>，就可以了。通常我們會用以下的方法對應到一個股價：<span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>min</mi><mrow><msup><mi>t</mi><mtext><mi mathvariant="normal">c</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">a</mi><mi mathvariant="normal">s</mi><mi mathvariant="normal">h</mi></mtext></msup><mo separator="true">,</mo><mi>x</mi></mrow></msub><msup><mrow><mo fence="true">∣</mo><mi>y</mi><mo>(</mo><mi>t</mi><mo>)</mo><mo>−</mo><msup><mi>y</mi><mrow><mi>m</mi></mrow></msup><mo>(</mo><mi>t</mi><mo>)</mo><mo fence="true">∣</mo></mrow><mrow><mn>2</mn></mrow></msup></mrow><annotation encoding="application/x-tex">\min_{ t^\text{crash}, x}\left|y(t)-y^{m}(t)\right|^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8641079999999999em;"></span><span class="strut bottom" style="height:1.8157359999999998em;vertical-align:-0.9516279999999999em;"></span><span class="base displaystyle textstyle uncramped"><span class="mop op-limits"><span class="vlist"><span style="top:0.7155199999999999em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord"><span class="mord mathit">t</span><span class="vlist"><span style="top:-0.289em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="text mord scriptscriptstyle cramped"><span class="mord mathrm">c</span><span class="mord mathrm">r</span><span class="mord mathrm">a</span><span class="mord mathrm">s</span><span class="mord mathrm">h</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="mord mathit">x</span></span></span></span><span style="top:2.7755575615628914e-17em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span><span class="mop">min</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="minner"><span class="minner displaystyle textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">∣</span><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathit">t</span><span class="mclose">)</span><span class="mbin">−</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="vlist"><span style="top:-0.413em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">m</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mopen">(</span><span class="mord mathit">t</span><span class="mclose">)</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">∣</span></span><span class="vlist"><span style="top:-0.413em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">2</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span></span></p><p>這個步驟就是調整參數，讓<strong>股價</strong>跟<strong>模型預測的股價</strong>趨近一樣，通常也可以稱為最佳化！<br>於是，我們就有了 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>t</mi><mtext><mi mathvariant="normal">c</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">a</mi><mi mathvariant="normal">s</mi><mi mathvariant="normal">h</mi></mtext></msup></mrow><annotation encoding="application/x-tex">t^\text{crash}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.849108em;"></span><span class="strut bottom" style="height:0.849108em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">t</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="text mord scriptstyle uncramped"><span class="mord mathrm">c</span><span class="mord mathrm">r</span><span class="mord mathrm">a</span><span class="mord mathrm">s</span><span class="mord mathrm">h</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> 的值，也就可以預測崩盤的時機了！</p><p>接下來可以參考<a href="https://www.ricequant.com/community/topic/427/" rel="external nofollow noopener noreferrer" target="_blank">網站</a>中的介紹，看一下LPPL的預測能力。</p><p>以下示範日馳給大家看：</p><h3 id="取得日馳股價"><a href="#取得日馳股價" class="headerlink" title="取得日馳股價"></a>取得日馳股價</h3><p>首先我們用 pandas 中的 datareader，取得日馳的股價</p><figure class="highlight python"><figcaption><span>取得股價</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pandas_datareader <span class="keyword">import</span> data <span class="comment"># pip install pandas_datareader</span></div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt    <span class="comment"># pip install matplotlib</span></div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd                <span class="comment"># pip install pandas</span></div><div class="line">%matplotlib inline</div><div class="line"></div><div class="line">data = data.DataReader(<span class="string">"1526.tw"</span>, <span class="string">"yahoo"</span>, <span class="string">"2017-04-01"</span>,<span class="string">"2018-01-10"</span>)</div><div class="line">c = data[<span class="string">'Close'</span>]</div><div class="line">c.plot()</div></pre></td></tr></table></figure><h3 id="最佳化"><a href="#最佳化" class="headerlink" title="最佳化"></a>最佳化</h3><p>接下來，將<a href="https://www.ricequant.com/community/topic/427/" rel="external nofollow noopener noreferrer" target="_blank">網站</a>中的LPPL複製過來，並且將日馳的股價 <code>data.Close</code> assign給 <code>sz</code> 這個變數。</p><p>這段code是在計算最佳參數，我沒有仔細閱讀code。有時寫程式就要學會複製貼上，可以用，就好了，對我們來說這不是科學問題，而是工程問題XD。</p><figure class="highlight python"><figcaption><span>LPPL模型分析</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> fmin_tnc</div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series, DataFrame</div><div class="line"><span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">import</span> itertools</div><div class="line"></div><div class="line">sz = data.Close</div><div class="line">date = sz.index</div><div class="line">time = np.linspace(<span class="number">0</span>, len(sz)<span class="number">-1</span>, len(sz))</div><div class="line">close = np.array(np.log(sz))</div><div class="line">DataSeries = [time, close]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">lppl</span> <span class="params">(t,x)</span>:</span> <span class="comment">#return fitting result using LPPL parameters </span></div><div class="line">    a = x[<span class="number">0</span>]</div><div class="line">    b = x[<span class="number">1</span>]</div><div class="line">    tc = x[<span class="number">2</span>]</div><div class="line">    m = x[<span class="number">3</span>]</div><div class="line">    c = x[<span class="number">4</span>]</div><div class="line">    w = x[<span class="number">5</span>]</div><div class="line">    phi = x[<span class="number">6</span>]</div><div class="line">    <span class="keyword">return</span> a + (b*np.power(tc - t, m))*(<span class="number">1</span> + (c*np.cos((w *np.log(tc-t))+phi)))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x)</span>:</span></div><div class="line">    delta = [lppl(t,x) <span class="keyword">for</span> t <span class="keyword">in</span> DataSeries[<span class="number">0</span>]]</div><div class="line">    delta = np.subtract(delta, DataSeries[<span class="number">1</span>])</div><div class="line">    delta = np.power(delta, <span class="number">2</span>) </div><div class="line">    <span class="keyword">return</span> np.sum(delta)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Individual</span>:</span></div><div class="line">    <span class="string">"""base class for individuals"""</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span> <span class="params">(self, InitValues)</span>:</span></div><div class="line">        self.fit = <span class="number">0</span></div><div class="line">        self.cof = InitValues</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fitness</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            cofs, nfeval, rc = fmin_tnc(func, self.cof, fprime=<span class="keyword">None</span>,approx_grad=<span class="keyword">True</span>, messages=<span class="number">0</span>)</div><div class="line">            self.fit = func(cofs)</div><div class="line">            self.cof = cofs</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="comment">#does not converge </span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mate</span><span class="params">(self, partner)</span>:</span></div><div class="line">        reply = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(self.cof)):</div><div class="line">            <span class="keyword">if</span> (random.randint(<span class="number">0</span>,<span class="number">1</span>) == <span class="number">1</span>):</div><div class="line">                reply.append(self.cof[i])</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                reply.append(partner.cof[i])</div><div class="line">        <span class="keyword">return</span> Individual(reply)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mutate</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(self.cof)<span class="number">-1</span>):</div><div class="line">            <span class="keyword">if</span> (random.randint(<span class="number">0</span>,len(self.cof)) &lt;= <span class="number">2</span>):</div><div class="line">                self.cof[i] += random.choice([<span class="number">-1</span>,<span class="number">1</span>]) * <span class="number">.05</span> * i</div><div class="line">                </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PrintIndividual</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment">#t, a, b, tc, m, c, w, phi</span></div><div class="line">        cofs = <span class="string">"A: "</span> + str(round(self.cof[<span class="number">0</span>], <span class="number">3</span>))</div><div class="line">        cofs += <span class="string">"B: "</span> + str(round(self.cof[<span class="number">1</span>],<span class="number">3</span>))</div><div class="line">        cofs += <span class="string">"Critical Time: "</span> + str(round(self.cof[<span class="number">2</span>], <span class="number">3</span>))</div><div class="line">        cofs += <span class="string">"m: "</span> + str(round(self.cof[<span class="number">3</span>], <span class="number">3</span>))</div><div class="line">        cofs += <span class="string">"c: "</span> + str(round(self.cof[<span class="number">4</span>], <span class="number">3</span>))</div><div class="line">        cofs += <span class="string">"omega: "</span> + str(round(self.cof[<span class="number">5</span>], <span class="number">3</span>))</div><div class="line">        cofs += <span class="string">"phi: "</span> + str(round(self.cof[<span class="number">6</span>], <span class="number">3</span>))</div><div class="line">        <span class="keyword">return</span> <span class="string">"fitness: "</span> + str(self.fit) +<span class="string">"\n"</span> + cofs</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getDataSeries</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> DataSeries</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getExpData</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> [lppl(t,self.cof) <span class="keyword">for</span> t <span class="keyword">in</span> DataSeries[<span class="number">0</span>]]</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getTradeDate</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> date</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fitFunc</span><span class="params">(t, a, b, tc, m, c, w, phi)</span>:</span></div><div class="line">    <span class="keyword">return</span> a - (b*np.power(tc - t, m))*(<span class="number">1</span> + (c*np.cos((w *np.log(tc-t))+phi)))</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Population</span>:</span></div><div class="line">    <span class="string">"""base class for a population"""</span></div><div class="line">    </div><div class="line">    LOOP_MAX = <span class="number">1000</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span> <span class="params">(self, limits, size, eliminate, mate, probmutate, vsize)</span>:</span></div><div class="line">        <span class="string">'seeds the population'</span></div><div class="line">        <span class="string">'limits is a tuple holding the lower and upper limits of the cofs'</span></div><div class="line">        <span class="string">'size is the size of the seed population'</span></div><div class="line">        self.populous = []</div><div class="line">        self.eliminate = eliminate</div><div class="line">        self.size = size</div><div class="line">        self.mate = mate</div><div class="line">        self.probmutate = probmutate</div><div class="line">        self.fitness = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(size):</div><div class="line">            SeedCofs = [random.uniform(a[<span class="number">0</span>], a[<span class="number">1</span>]) <span class="keyword">for</span> a <span class="keyword">in</span> limits]  </div><div class="line">            self.populous.append(Individual(SeedCofs))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PopulationPrint</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> self.populous:</div><div class="line">            print(x.cof)</div><div class="line">            </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">SetFitness</span><span class="params">(self)</span>:</span></div><div class="line">        self.fitness = [x.fit <span class="keyword">for</span> x <span class="keyword">in</span> self.populous]</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">FitnessStats</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment">#returns an array with high, low, mean</span></div><div class="line">        <span class="keyword">return</span> [np.amax(self.fitness), np.amin(self.fitness), np.mean(self.fitness)]</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Fitness</span><span class="params">(self)</span>:</span></div><div class="line">        counter = <span class="number">0</span></div><div class="line">        false = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> individual <span class="keyword">in</span> list(self.populous):</div><div class="line">            print(<span class="string">'Fitness Evaluating: '</span> + str(counter) +  <span class="string">" of "</span> + str(len(self.populous)) + <span class="string">"        \r"</span>),</div><div class="line">            state = individual.fitness()</div><div class="line">            counter += <span class="number">1</span></div><div class="line">            <span class="keyword">if</span> ((state == <span class="keyword">False</span>)):</div><div class="line">                false += <span class="number">1</span></div><div class="line">                self.populous.remove(individual)</div><div class="line">        self.SetFitness()</div><div class="line">        print(<span class="string">"\n fitness out size: "</span> + str(len(self.populous)) + <span class="string">" "</span> + str(false))</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Eliminate</span><span class="params">(self)</span>:</span></div><div class="line">        a = len(self.populous)</div><div class="line">        self.populous.sort(key=<span class="keyword">lambda</span> ind: ind.fit)</div><div class="line">        <span class="keyword">while</span> (len(self.populous) &gt; self.size * self.eliminate):</div><div class="line">            self.populous.pop()</div><div class="line">        print(<span class="string">"Eliminate: "</span> + str(a- len(self.populous)))</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Mate</span><span class="params">(self)</span>:</span></div><div class="line">        counter = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> (len(self.populous) &lt;= self.mate * self.size):</div><div class="line">            counter += <span class="number">1</span></div><div class="line">            i = self.populous[random.randint(<span class="number">0</span>, len(self.populous)<span class="number">-1</span>)]</div><div class="line">            j = self.populous[random.randint(<span class="number">0</span>, len(self.populous)<span class="number">-1</span>)]</div><div class="line">            diff = abs(i.fit-j.fit)</div><div class="line">            <span class="keyword">if</span> (diff &lt; random.uniform(np.amin(self.fitness), np.amax(self.fitness) - np.amin(self.fitness))):</div><div class="line">                self.populous.append(i.mate(j))</div><div class="line">            <span class="keyword">if</span> (counter &gt; Population.LOOP_MAX):</div><div class="line">                print(<span class="string">"loop broken: mate"</span>)</div><div class="line">                <span class="keyword">while</span> (len(self.populous) &lt;= self.mate * self.size):</div><div class="line">                    i = self.populous[random.randint(<span class="number">0</span>, len(self.populous)<span class="number">-1</span>)]</div><div class="line">                    j = self.populous[random.randint(<span class="number">0</span>, len(self.populous)<span class="number">-1</span>)]</div><div class="line">                    self.populous.append(i.mate(j))</div><div class="line">        print(<span class="string">"Mate Loop complete: "</span> + str(counter))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Mutate</span><span class="params">(self)</span>:</span></div><div class="line">        counter = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> ind <span class="keyword">in</span> self.populous:</div><div class="line">            <span class="keyword">if</span> (random.uniform(<span class="number">0</span>, <span class="number">1</span>) &lt; self.probmutate):</div><div class="line">                ind.mutate()</div><div class="line">                ind.fitness()</div><div class="line">                counter +=<span class="number">1</span></div><div class="line">        print(<span class="string">"Mutate: "</span> + str(counter))</div><div class="line">        self.SetFitness()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">BestSolutions</span><span class="params">(self, num)</span>:</span></div><div class="line">        reply = []</div><div class="line">        self.populous.sort(key=<span class="keyword">lambda</span> ind: ind.fit)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</div><div class="line">            reply.append(self.populous[i])</div><div class="line">        <span class="keyword">return</span> reply;</div><div class="line"></div><div class="line">    random.seed()</div><div class="line"></div><div class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</div><div class="line">sns.set_style(<span class="string">'white'</span>)</div><div class="line"></div><div class="line">limits = ([<span class="number">8.4</span>, <span class="number">8.8</span>], [<span class="number">-1</span>, <span class="number">-0.1</span>], [<span class="number">350</span>, <span class="number">400</span>], [<span class="number">.1</span>,<span class="number">.9</span>], [<span class="number">-1</span>,<span class="number">1</span>], [<span class="number">12</span>,<span class="number">18</span>], [<span class="number">0</span>, <span class="number">2</span>*np.pi])</div><div class="line">x = Population(limits, <span class="number">20</span>, <span class="number">0.3</span>, <span class="number">1.5</span>, <span class="number">.05</span>, <span class="number">4</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">2</span>):</div><div class="line">    x.Fitness()</div><div class="line">    x.Eliminate()</div><div class="line">    x.Mate()</div><div class="line">    x.Mutate()</div><div class="line">    </div><div class="line">x.Fitness() </div><div class="line">values = x.BestSolutions(<span class="number">3</span>)</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> values:</div><div class="line">    <span class="keyword">print</span> (x.PrintIndividual())</div></pre></td></tr></table></figure><p>別懷疑，就給它跑下去就對了，我也沒仔細看就跑了，需要跑一段時間。<br>跑完後應該會得到下圖：</p><center><img src="/用數學計算日馳何時崩盤！/log.png" alt="顯示的結果" title="顯示的結果"></center><p>可以看到這段代碼總共做了3次預測，以防算出來不準，其中的 critical time 就是指崩盤日期，約在380天左右，而我們總共測了200天，所以距離今天（2018-01-10），大概還需要 380 - 200 = 180 個交易日，才會有毀滅性的崩盤。</p><p>最後畫出圖，我也是複製貼上：</p><figure class="highlight python"><figcaption><span>畫圖</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">data = pd.DataFrame(&#123;<span class="string">'Date'</span>:values[<span class="number">0</span>].getDataSeries()[<span class="number">0</span>],<span class="string">'Index'</span>:values[<span class="number">0</span>].getDataSeries()[<span class="number">1</span>],<span class="string">'Fit1'</span>:values[<span class="number">0</span>].getExpData(),<span class="string">'Fit2'</span>:values[<span class="number">1</span>].getExpData(),<span class="string">'Fit3'</span>:values[<span class="number">2</span>].getExpData()&#125;)</div><div class="line">data = data.set_index(<span class="string">'Date'</span>)</div><div class="line">data.plot(figsize=(<span class="number">14</span>,<span class="number">8</span>))</div></pre></td></tr></table></figure><center><img src="/用數學計算日馳何時崩盤！/fit.png" alt="顯示的結果" title="顯示的結果"></center><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>LPPL這個模型看看就好，財報、月報也很重要，依照這個程式的結果，日馳距離泡沫崩盤還要很久，但千萬別因為這樣就買入，畢竟股票有太多要考量的因素了，大戶的脾氣不是數學模型可以模擬的XDDDDDDD…。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前我持有日馳的股票，前段時間噴高高，但最近不停漲停！跌停！搞的我心力交瘁。於是今天決定用一個數學模型來預測可能的崩盤時機。&lt;br&gt;LPPL是我之前在ricequant看到的泡沫預測模型，對於那些極右側交易者（追漲）滿有幫助的，然而這個模型只考慮股價，不考慮財報、月報等，所
      
    
    </summary>
    
      <category term="財經Python教學" scheme="https://www.finlab.tw/categories/%E8%B2%A1%E7%B6%93Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="python" scheme="https://www.finlab.tw/tags/python/"/>
    
      <category term="程式設計" scheme="https://www.finlab.tw/tags/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/"/>
    
  </entry>
  
  <entry>
    <title>自動下單（1）用Python爬取交易記錄</title>
    <link href="https://www.finlab.tw/%E7%94%A8python%E7%8D%B2%E5%8F%96%E6%8C%81%E8%82%A1%E6%90%8D%E7%9B%8A%E8%A1%A8/"/>
    <id>https://www.finlab.tw/用python獲取持股損益表/</id>
    <published>2018-01-08T14:07:16.000Z</published>
    <updated>2018-01-24T11:42:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>量化投資原來分為以下兩個步驟：</p><ol><li>用數學模型，運算出買賣股票清單</li><li>清單自動與看盤軟體對接，實現自動買賣</li></ol><p>今天就教你怎麼將自己的帳戶與python做連接，讓電腦得知你實際持股的部位。</p><center><img src="/用python獲取持股損益表/thumbnail.jpeg" alt="連接帳戶" title="連接帳戶"></center><h3 id="打開券商看盤軟體（網站）"><a href="#打開券商看盤軟體（網站）" class="headerlink" title="打開券商看盤軟體（網站）"></a>打開券商看盤軟體（網站）</h3><p>首先，我們針對新光證券來進行對接，其它證券的朋友就不好意思了，我只有新光XDD，但每一家的網站設計不會差太多，可以舉一反三，做出其它證券的對接系統。</p><p>雖然我是新光的用戶，但新光的網站真的很瞎！介面老舊不說，每天早上9點開盤必當機…好在我都是直接下開盤漲停買入，我是可憐窮散戶金額小所以沒差XDD。</p><h3 id="打開網頁，監控network"><a href="#打開網頁，監控network" class="headerlink" title="打開網頁，監控network"></a>打開網頁，監控network</h3><p>接下來我們要來查看登入機制是如何運作的，知道了內部的機制，才能用python來模擬登入的動作喔！</p><ol><li>用無痕視窗<a href="https://w.sk88.com.tw/Cross/Pc/Login.aspx" rel="external nofollow noopener noreferrer" target="_blank">登入頁面</a></li><li>對著網頁任何一處按右鍵，選擇inspect（中文忘記是什麼了，反正就是最下方那個XD）</li><li>選擇network（一樣請自己對照中文）</li></ol><p>做完這三步驟你應該會看到以下節圖：</p><center><img src="/用python獲取持股損益表/1.png" alt="螢幕節圖" title="螢幕節圖"></center><h1 id="這個-Network-列表是做什麼的？"><a href="#這個-Network-列表是做什麼的？" class="headerlink" title="這個 Network 列表是做什麼的？"></a>這個 Network 列表是做什麼的？</h1><p>network這個列表，最主要就是會紀錄網頁所用到的 get 跟 post 的請求，什麼是 get 跟 post 呢？籠統的說，這些就是你的瀏覽器跟網站主機互動時的通信方式，平常瀏覽網頁，將網頁從網路上下載到瀏覽器中，這個動作通常是用get，而隱私性比較高的（登入、修改網路上的資料），就會用 post。</p><p>輸入你的帳號密碼按下登入，你會看到network的列表出現了很多東西，大部分的都不重要，請點選其中的 Login.aspx，裡面紀錄著用來登入的通訊過程。</p><center><img src="/用python獲取持股損益表/2.png" alt="螢幕節圖" title="螢幕節圖"></center><p>你應該會看到以上的節圖，裡面有些重要的資訊，我們先把登入當作是一封寫給新光主機的信，上圖中包含了幾個重要的資訊：</p><ol><li>信寄到：<a href="https://w.sk88.com.tw/Cross/Pc/Login.aspx" rel="external nofollow noopener noreferrer" target="_blank">https://w.sk88.com.tw/Cross/Pc/Login.aspx</a> 這個地方</li><li>這是一個 POST request</li><li>server 回覆代號是 302 （通常是2XX、或3XX。4XX、5XX代表有問題）</li></ol><h3 id="查看-Request-內容"><a href="#查看-Request-內容" class="headerlink" title="查看 Request 內容"></a>查看 Request 內容</h3><p>目前知道的訊息有：信的種類為 post，而地址也有了。但信中的內容要寫什麼呢？無非就是跟登入有關的訊息吧！例如帳號密碼之類的，所以我們將視窗往下拉，看到form data這裡：</p><center><img src="/用python獲取持股損益表/3.png" alt="螢幕節圖" title="螢幕節圖"></center><p>你可以看到信封裡的內容：</p><ol><li>__EVENTTARGET: 欄位為空</li><li>__EVENTARGUMENT: 欄位為空</li><li>__VIEWSTATE: 亂碼</li><li>__VIEWSTATEGENERATOR: 亂碼</li><li>__EVENTVALIDATION: 亂碼</li><li>TxtIDNo: 你的身份證字號,</li><li>TxtPass: 你的密碼,</li><li>HiddenIDNo: 你的生份正字號,</li><li>Button1: 登入,</li></ol><p>我們可以發現除了帳號密碼外，還有很多怪東西，例如：「__EVENTTARGET」等等，這些東西我們不能亂填，我們得找到這些欄位的正確內容，登入才會生效。<br>我們可以到原本的登入網頁找：</p><ol><li>回到登入頁面（inspect依然開啟）</li><li>點選 inspect 中的 Element，打開網站的原始碼，並搜尋（Ctrl-F 或 Cmd-F），’__VIEWSTATE’，就可以找到一它的value是多少了！</li><li>其它如「<code>__EVENTARGUMENT</code>」、「<code>__VIEWSTATE</code>」、「<code>__VIEWSTATEGENERATOR</code>」、「<code>__EVENTVALIDATION</code>」也是用一樣的方式找</li></ol><p>以下是節圖：</p><center><img src="/用python獲取持股損益表/4.png" alt="螢幕節圖" title="螢幕節圖"></center><p>當然自己慢慢輸入肯定很蠢，所以這一切都要用python自動化才行！<br>以後真的只要1秒就可以下載好，省去網站慢吞吞填入帳密。。。</p><h3 id="寫code時間"><a href="#寫code時間" class="headerlink" title="寫code時間"></a>寫code時間</h3><p>所以你已經瞭解了原理了，接下來就是實做！<br>首先，我們要得到網頁，找尋當中的「__VIEWSTATE」等驗證碼：<br><figure class="highlight python"><figcaption><span>得到網頁、驗證碼</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</div><div class="line"></div><div class="line"><span class="comment"># 開啟瀏覽器</span></div><div class="line">ses = requests.Session()</div><div class="line"></div><div class="line"><span class="comment"># 打開登入網頁</span></div><div class="line">d = ses.get(<span class="string">'https://w.sk88.com.tw/Cross/Pc/Login.aspx'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 此函式會找特定的value，如「__VIEWSTATE」等</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_value</span><span class="params">(name, web)</span>:</span></div><div class="line">    reg = <span class="string">'name="'</span> + name + <span class="string">'".+value="(.*)" /&gt;'</span></div><div class="line">    pattern = re.compile(reg)</div><div class="line">    result  = pattern.findall(web.text)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">return</span> result[<span class="number">0</span>]</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">""</span></div><div class="line"></div><div class="line"><span class="comment"># 使用方式</span></div><div class="line">find_value(<span class="string">'__VIEWSTATE'</span>, d)</div><div class="line"></div></pre></td></tr></table></figure></p><p>我特別寫好了一個 <code>find_value</code> 的函式，它會幫你找出網頁中的怪碼，大家有興趣可以去研究 <a href="http://webber-pypyso.blogspot.fr/2011/02/10-1-1.html" rel="external nofollow noopener noreferrer" target="_blank">regex</a> ，用來解析字串用的。</p><center><img src="/用python獲取持股損益表/find_value.png" alt="find_value的用法" title="find_value的用法"></center><p>於是<code>__VIEWSTATEGENERATOR</code>、  <code>__EVENTVALIDATION</code>，這些怪東西的驗證碼就被找到了！</p><h3 id="寫信封的內容"><a href="#寫信封的內容" class="headerlink" title="寫信封的內容"></a>寫信封的內容</h3><p>接下來我們再來實際的登入：</p><figure class="highlight python"><figcaption><span>用python模擬登入</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">data = &#123;</div><div class="line">    <span class="string">'__EVENTTARGET'</span>: find_value(<span class="string">'__EVENTTARGET'</span>, d),</div><div class="line">    <span class="string">'__EVENTARGUMENT'</span>: find_value(<span class="string">'__EVENTARGUMENT'</span>, d),</div><div class="line">    <span class="string">'__VIEWSTATE'</span>: find_value(<span class="string">'__VIEWSTATE'</span>, d),</div><div class="line">    <span class="string">'__VIEWSTATEGENERATOR'</span>: find_value(<span class="string">'__VIEWSTATEGENERATOR'</span>, d),</div><div class="line">    <span class="string">'__EVENTVALIDATION'</span>: find_value(<span class="string">'__EVENTVALIDATION'</span>, d),</div><div class="line">    <span class="string">'TxtIDNo'</span>:<span class="string">'你的身份證字號（帳號）'</span>,</div><div class="line">    <span class="string">'TxtPass'</span>:<span class="string">'密碼'</span>,</div><div class="line">    <span class="string">'HiddenIDNo'</span>:<span class="string">'你的身份證字號（帳號）'</span>,</div><div class="line">    <span class="string">'Button1'</span>:<span class="string">'登入'</span>,</div><div class="line">&#125;</div><div class="line"></div><div class="line">login = ses.post(<span class="string">'https://w.sk88.com.tw/Cross/Pc/Login.aspx'</span>, data=data)</div></pre></td></tr></table></figure><p>以上的code，就是創建信封的內容 data，並發送「POST」，請求登入。記得要修改改帳號密碼才能用喔！</p><h3 id="下載持股部位"><a href="#下載持股部位" class="headerlink" title="下載持股部位"></a>下載持股部位</h3><p>接下來，由於已經登入了，我們就去相對應的網址，下載自己的持股部位：<br><figure class="highlight python"><figcaption><span>下載持股部位</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># 下載持股</span></div><div class="line">data = ses.get(<span class="string">'https://w.sk88.com.tw/Cross/Pc/QueryPositionRealTime.aspx'</span>)</div><div class="line">data.encoding = <span class="string">'utf-8'</span></div><div class="line"></div><div class="line"><span class="comment"># 用 pandas 整理</span></div><div class="line">df = pd.read_html(StringIO(data.text))[<span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="comment"># 設定第一行row 為 欄位名稱</span></div><div class="line">df.columns = df.iloc[<span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="comment"># 刪除第一行row</span></div><div class="line">df = df.iloc[<span class="number">1</span>:]</div><div class="line">df</div></pre></td></tr></table></figure></p><center><img src="/用python獲取持股損益表/df.png" alt="持股記錄" title="持股記錄"></center><p>以上是我的持股記錄，趁最近表現不錯放一下XDD，這只是表面績效很好，實際上沒那麼好，因為最近賣了很多虧損股，只剩好的股票，所以才看起來光鮮亮麗。絕對不能只看持股獲利，還必須考慮銀行帳戶中的存款才行喔！不然很有可能發現，持股獲利很高，但帳戶餘額慢慢變少的情況喔！</p><p>以上就是今天的教學，有以下幾個小重點：</p><ol><li>學習用chrome來找 get post 的方法</li><li>利用python 模擬登入帳號</li><li>下載自己的持股狀況</li></ol><p>下次會介紹如何串接自動化買賣，敬請期待！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;量化投資原來分為以下兩個步驟：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用數學模型，運算出買賣股票清單&lt;/li&gt;
&lt;li&gt;清單自動與看盤軟體對接，實現自動買賣&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;今天就教你怎麼將自己的帳戶與python做連接，讓電腦得知你實際持股的部位。&lt;/p&gt;
&lt;center
      
    
    </summary>
    
      <category term="財經Python教學" scheme="https://www.finlab.tw/categories/%E8%B2%A1%E7%B6%93Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="python" scheme="https://www.finlab.tw/tags/python/"/>
    
      <category term="程式設計" scheme="https://www.finlab.tw/tags/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/"/>
    
      <category term="爬蟲" scheme="https://www.finlab.tw/tags/%E7%88%AC%E8%9F%B2/"/>
    
  </entry>
  
  <entry>
    <title>新年賀禮 ─ 投信跟盤法！</title>
    <link href="https://www.finlab.tw/%E6%8A%95%E4%BF%A1%E8%B7%9F%E7%9B%A4%E6%B3%95%EF%BC%81/"/>
    <id>https://www.finlab.tw/投信跟盤法！/</id>
    <published>2018-01-01T14:55:40.000Z</published>
    <updated>2018-01-24T11:42:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>大家好！新年快樂，很久沒有寫文章了，今天要介紹的是投信的跟隨買賣，算是2018年送給大家的新年賀禮！這是一個完整的策略，方法非常簡單，看完這篇就可以直接使用，手動操作該策略喔！</p><center><img src="/投信跟盤法！/thumbnail.png" alt="2018 新年快樂！" title="2018 新年快樂！"></center><p>我趁著歐洲聖誕假期，跑去土耳其玩，土耳其真的很多商人，到處跟我裝熟、賣我東西，買了才發現不但品質差，價錢還是正常的好幾倍。他們的話術真的很強，去玩一定要小心。雖然被坑很多錢，但股票有賺一些XD，心沒有這麼痛。廢話不多說，開始介紹這個選股方法吧！</p><h3 id="投信就是基金"><a href="#投信就是基金" class="headerlink" title="投信就是基金"></a>投信就是基金</h3><p>投信簡單說，就是我們口中的基金公司啦！很多人懶得自己投資，就將錢交給高手，讓他們去操盤。</p><p>但是基金公司的缺點，在於管理費用太高了，賺的錢都進了基金公司的口袋，假如你要將資產交給基金公司的話，最好是大金額，才能藉由談判，壓低手續和管理費。</p><p>假如你想要省下管理費，假如你不止想投資理財，也想投資自己的腦袋，那就常來看一下我們的文章吧！我們的目標就是想要讓大家用很低的成本，學會如何穩定的獲利。</p><h3 id="投信買賣資料"><a href="#投信買賣資料" class="headerlink" title="投信買賣資料"></a>投信買賣資料</h3><p>台灣有很多獨特的數據，投信買賣數據就是台灣獨有的，證券交易所每天公布三大法人的當日買賣狀況，有外資、投信、自營商。</p><p>投信最重要的數據就是某支股票的當日總買賣張數，當某公司表現良好，基金公司通常會比散戶更快掌握狀況並買入，就會反映在這個數據上，我們就藉由這個原理，跟隨投信來買賣。</p><h3 id="策略思路"><a href="#策略思路" class="headerlink" title="策略思路"></a>策略思路</h3><p>投信擁有投資人大筆的金額，所以假如公司的市值比較小，投信就可以操弄其股價，迫使股價上漲，並出場結算。所以我們選取市值較小，投信又買入的股票，當</p><ul><li>市值（百萬） &lt; 10000</li><li>投信當日買賣 &gt; 200 張</li></ul><p>我們買入該股30天。</p><p>以上的條件都可以用 <a href="https://goodinfo.tw/StockInfo/StockList.asp?MARKET_CAT=%E8%87%AA%E8%A8%82%E7%AF%A9%E9%81%B8&amp;INDUSTRY_CAT=%E6%88%91%E7%9A%84%E6%A2%9D%E4%BB%B6&amp;FILTER_ITEM0=%E5%B9%B4%E5%BA%A6%E2%80%93ROE%28%25%29&amp;FILTER_VAL_S0=30&amp;FILTER_VAL_E0=&amp;FILTER_SHEET=%E5%B9%B4%E7%8D%B2%E5%88%A9%E8%83%BD%E5%8A%9B&amp;WITH_ROTC=F&amp;FILTER_QUERY=%E6%9F%A5++%E8%A9%A2" rel="external nofollow noopener noreferrer" target="_blank">GoodInfo 股票篩選功能</a> 來達成喔！</p><p>我們回測採用手續費6折，證交稅千分之三，由100萬當起始資金，平均分配到每日持有的標的。</p><h3 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h3><p>我們針對所有的上市公司，當日發現符合條件，隔日以開盤價買進，30天後開盤價賣出！可以得出權益曲線，也就是你資產的增加幅度（獲利金額持續投資）</p><center><img src="/投信跟盤法！/eq1.png" alt="權益曲線" title="權益曲線"></center><p>由圖可見，紅色的是策略，灰色的是大盤，這個策略在2008跟2011年的回檔都非常嚴重！但近五年的獲利超好，感覺投信的投資技巧有越來越進步的趨勢。</p><center><img src="/投信跟盤法！/md.png" alt="金融海嘯時，最大虧損來到了60％" title="金融海嘯時，最大虧損來到了60％"></center><p>為什麼大盤回檔時，投信會很慘呢？由於法規規定投信持股要70% 以上，所以當金融海嘯時，無法退出市場，所以虧損是無可避免的。</p><h3 id="策略再優化"><a href="#策略再優化" class="headerlink" title="策略再優化"></a>策略再優化</h3><p>既然這篇是新年賀禮，怎麼可能報酬率就只有這樣呢？我的讀者一定都知道，如何<a href="/過濾大盤的簡單方法！/">避開大盤大跌</a> ！假如你還沒看過那一篇的話，可以去看看！最近滿常用這個方法，有時候還滿好用的。</p><p>賣出條件（賣出所有持股）：</p><ul><li>大盤在均線下 且 均線比昨日低 （25日均線）</li></ul><p><center><img src="/投信跟盤法！/eq2.png" alt="權益曲線" title="權益曲線"></center><br>可以看到策略躲過了金融海嘯，且在金融海嘯一結束馬上啟動獲利！且14年獲利來到了16倍！</p><p><center><img src="/投信跟盤法！/ns2.png" alt="持股張數" title="持股張數"></center><br>持股都還算滿多的，但有時候會瞬間歸0，是由於要避開大盤大跌時，一次性的全部賣出導致的。</p><p><center><img src="/投信跟盤法！/md2.png" alt="權益曲線" title="權益曲線"></center><br>最大虧損降低到-30％以內，算是滿優秀的！</p><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>到此為止，投信跟隨策略就算差不多了！我們利用了幾個概念：</p><ol><li>市值小的公司，較容易被投信操控</li><li>避開大盤大跌</li></ol><p>簡單的構成了這個策略，不但條件少，而且獲利效果是<strong>目前為止最好的</strong>，可以直接用GoodInfo或類似的選股軟體篩選持股。</p><h3 id="謝謝大家的支持！2018繼續努力！"><a href="#謝謝大家的支持！2018繼續努力！" class="headerlink" title="謝謝大家的支持！2018繼續努力！"></a>謝謝大家的支持！2018繼續努力！</h3><p>部落格累積了很多留言，今天也一一回覆完了，有很多網友給我很好建議！之後都會最更詳細研究看看：</p><ul><li>凱利公式做資產配置</li><li>技術指標的回測模組</li><li>回測報表教學</li><li>營業現金流選股</li><li>外資跟隨買賣優化（有點難，還在想）</li></ul><p>假如大家有什麼感興趣的，想要我研究看看，都可以在下面留言喔！</p><p>祝大家2018投資順利！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;大家好！新年快樂，很久沒有寫文章了，今天要介紹的是投信的跟隨買賣，算是2018年送給大家的新年賀禮！這是一個完整的策略，方法非常簡單，看完這篇就可以直接使用，手動操作該策略喔！&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/投信跟盤法！/thumbnail.png&quot; alt
      
    
    </summary>
    
      <category term="指標分析" scheme="https://www.finlab.tw/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/"/>
    
      <category term="籌碼面" scheme="https://www.finlab.tw/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/%E7%B1%8C%E7%A2%BC%E9%9D%A2/"/>
    
    
      <category term="選股策略" scheme="https://www.finlab.tw/tags/%E9%81%B8%E8%82%A1%E7%AD%96%E7%95%A5/"/>
    
      <category term="歷史回測" scheme="https://www.finlab.tw/tags/%E6%AD%B7%E5%8F%B2%E5%9B%9E%E6%B8%AC/"/>
    
      <category term="投信" scheme="https://www.finlab.tw/tags/%E6%8A%95%E4%BF%A1/"/>
    
      <category term="量化投資" scheme="https://www.finlab.tw/tags/%E9%87%8F%E5%8C%96%E6%8A%95%E8%B3%87/"/>
    
      <category term="股票分析" scheme="https://www.finlab.tw/tags/%E8%82%A1%E7%A5%A8%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>利用Pandas輕鬆取得股價並回測</title>
    <link href="https://www.finlab.tw/%E5%88%A9%E7%94%A8Pandas%E8%BC%95%E9%AC%86%E5%8F%96%E5%BE%97%E6%AD%B7%E5%8F%B2%E8%82%A1%E5%83%B9/"/>
    <id>https://www.finlab.tw/利用Pandas輕鬆取得歷史股價/</id>
    <published>2017-12-11T21:19:49.000Z</published>
    <updated>2018-01-24T11:42:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>我們之前有教過怎麼樣取當日所有股票股價的方法，但是假如我們想要做歷史回測，除了慢慢一天天抓，也可以使用 <code>pandas_datareader</code> 這個 package（可以用<code>pip install pandas_datareader</code>來安裝）</p><center><img src="/利用Pandas輕鬆取得歷史股價/thumbnail.jpeg" alt="真的很簡單！" title="真的很簡單！"></center><h3 id="跟之前股價爬蟲的比較"><a href="#跟之前股價爬蟲的比較" class="headerlink" title="跟之前股價爬蟲的比較"></a>跟之前股價爬蟲的比較</h3><p>之前我們教的股價爬蟲，是採取一天天下載的方式，今天教的方法是幾支股票，一次下載全部歷史股價！這個方法的優點是超簡單，而且下載速度又快，缺點是有些下市的股票的股價沒有辦法取得，會有生存者偏差，而且資料比較不齊全，但偶爾玩玩，練習一下 <code>pandas</code> 是很不錯的！</p><h3 id="首先先用-pandas-datareader-取得資料"><a href="#首先先用-pandas-datareader-取得資料" class="headerlink" title="首先先用 pandas_datareader 取得資料"></a>首先先用 pandas_datareader 取得資料</h3><p>取得資料又更簡單了！先匯入要用的包</p><figure class="highlight python"><figcaption><span>import</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pandas_datareader <span class="keyword">import</span> data <span class="comment"># pip install pandas_datareader</span></div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt    <span class="comment"># pip install matplotlib</span></div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd                <span class="comment"># pip install pandas</span></div><div class="line">%matplotlib inline</div></pre></td></tr></table></figure><p>然後：</p><figure class="highlight python"><figcaption><span>get data</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">data = data.DataReader(<span class="string">"^TWII"</span>, <span class="string">"yahoo"</span>, <span class="string">"2000-01-01"</span>,<span class="string">"2018-01-01"</span>)</div><div class="line">c = data[<span class="string">'Close'</span>]</div><div class="line">c.plot()</div></pre></td></tr></table></figure><center><img src="/利用Pandas輕鬆取得歷史股價/twii.png" alt="台股 2000～2018 每天收盤價" title="台股 2000～2018 每天收盤價"></center><p>就這樣，真的超簡單吧！假如你之前不會…現在跟你講了，別打我XDD</p><p>這個方法爬到的資料真的比較不齊全啦！</p><h3 id="用-pandas-計算-60日收盤價格"><a href="#用-pandas-計算-60日收盤價格" class="headerlink" title="用 pandas 計算 60日收盤價格"></a>用 pandas 計算 60日收盤價格</h3><p>如何用 pandas 快速算出平均線呢？<br><figure class="highlight python"><figcaption><span>get data</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 近60日收盤</span></div><div class="line">c60 = c.rolling(<span class="number">60</span>, min_periods=<span class="number">1</span>).mean()</div><div class="line"></div><div class="line"><span class="comment"># 畫圖</span></div><div class="line">c[<span class="string">'2015'</span>:].plot()</div><div class="line">c60[<span class="string">'2015'</span>:].plot()</div></pre></td></tr></table></figure></p><center><img src="/利用Pandas輕鬆取得歷史股價/avg.png" alt="台股 2000～2018 每天收盤價" title="台股 2000～2018 每天收盤價"></center><p>第二行的 <code>c</code> 就是收盤價 <code>close</code> 的簡稱，是一個 <code>series</code> ，代表每一天收盤價的時間序列，可以上 <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.html" rel="external nofollow noopener noreferrer" target="_blank">pandas 官網上查詢</a> 相關的用法，其中有一個好用的 function 叫做 <code>rolling</code> 其實它的含意就是隨時間移動窗格，將窗格中的收盤價取：</p><ul><li>60天最大值（<code>c.rolling(60).max()</code>）</li><li>60天平均（<code>c.rolling(60).mean()</code>）</li><li>60天最小值（<code>c.rolling(60).min()</code>）</li></ul><p>那為何我們還需要一個<code>min_periods=1</code>這個參數呢？因為照原本的設定，60天內只要有一個值是<code>NaN</code>，則平均值就是<code>NaN</code>，只要一筆資料有問題，你就有60天算不出平均值，所以 <code>min_periods=1</code> 就是在說，只要60天裡面有一天不是 <code>NaN</code> 就強制算的意思。</p><p>第五行跟第六行是畫圖，因為我們不想畫整整18年的圖，畫最近三年就好了，所以利用 <code>[start:end]</code> 來選擇時間，我們希望從 <code>2015</code>年到此資料的最後一筆，所以<code>end</code>放空白（跟python array一樣的選取方式，只是改用日期）。</p><h3 id="用pandas算出買入訊號"><a href="#用pandas算出買入訊號" class="headerlink" title="用pandas算出買入訊號"></a>用pandas算出買入訊號</h3><p>假如當日收盤 &gt; 近60日收盤，則當日收盤瞬間買，不然則空手</p><p>這樣子的回測要怎麼寫呢？三行解決，有沒有比multichart還簡單！？</p><figure class="highlight python"><figcaption><span>backtest</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 進60日收盤</span></div><div class="line">c60 = c.rolling(<span class="number">60</span>, min_periods=<span class="number">1</span>).mean()</div><div class="line"></div><div class="line"><span class="comment"># 買入訊號</span></div><div class="line">signal = (c &gt; c60)</div><div class="line"></div><div class="line"><span class="comment"># 回測並跟大盤比較</span></div><div class="line">(c.shift(<span class="number">-1</span>) / c)[signal].cumprod().plot(color=<span class="string">'red'</span>)</div><div class="line">(c.shift(<span class="number">-1</span>) / c).cumprod().plot(color=<span class="string">'blue'</span>)</div><div class="line"></div></pre></td></tr></table></figure><center><img src="/利用Pandas輕鬆取得歷史股價/eq.png" alt="紅色是策略的權益函數，藍色是大盤" title="紅色是策略的權益函數，藍色是大盤"></center><ul><li><h3 id="買入訊號（line-5）是如何建立的呢？"><a href="#買入訊號（line-5）是如何建立的呢？" class="headerlink" title="買入訊號（line 5）是如何建立的呢？"></a>買入訊號（line 5）是如何建立的呢？</h3><p>原本的 <code>c</code> 和 <code>c60</code> 都是 <code>float series</code>，然而這邊的 <code>signal</code> 是一個 <code>boolean series</code>，代表當天的<code>c</code> 比 <code>c60</code>還要大，每一天都會有一個布林值，<code>True</code> 代表要在收盤價買入，而 <code>False</code> 代表在收盤價空手</p></li><li><h3 id="為何我們用一行（line-8）就可以回測呢？"><a href="#為何我們用一行（line-8）就可以回測呢？" class="headerlink" title="為何我們用一行（line 8）就可以回測呢？"></a>為何我們用一行（line 8）就可以回測呢？</h3><p>首先，我們將數值變成成長率 <code>c.shift(-1)/c</code>，其中<code>c.shift(-1)</code>代表明天的收盤價，而<code>c</code>代表今天的收盤價。這個成長率是一個近似於 1 的數值，大於1代表明天漲，小於1代表明天跌。我們將所有的成長率照著時間乘起來，就會還原成原本的大盤 <code>c</code>，然而我們只有在 <code>signal = True</code> 的時候持有大盤，資產才會隨著增長率變動。<code>xx[signal]</code>的意思就是選取一個 <code>sub-series</code>，將<code>signal = False</code>的天給去除。所以我們只選 <code>signal = True</code> 的每一天相對應的成長率乘起來（<code>cumprod()</code>），就會是回測結果了！</p></li><li><h3 id="最後一行（line-9）是做什麼的？"><a href="#最後一行（line-9）是做什麼的？" class="headerlink" title="最後一行（line 9）是做什麼的？"></a>最後一行（line 9）是做什麼的？</h3><p>用來畫出大盤的，假設我們沒有用<code>xx[signal]</code>篩選，等於每天都買入的狀況，利用 <code>cumprod</code> 把每一天的成長率都乘起來。其實這行也可以寫成 <code>(c/c[0]).plot(color=&#39;blue&#39;)</code> 都是互通的，各位可以試試看。</p></li></ul><p>這邊比較複雜，建議把 <code>c</code>、<code>(c.shift(-1)/c)</code>、<code>signal</code>，這些數值都print出來比較一番吧！<br><figure class="highlight python"><figcaption><span>get data</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pd.DataFrame(&#123;<span class="string">'c'</span>:c, <span class="string">'c60'</span>:c60, <span class="string">'增長率'</span>:c.shift(<span class="number">-1</span>)/c, <span class="string">'signal'</span>:signal&#125;).head()</div></pre></td></tr></table></figure></p><center><img src="/利用Pandas輕鬆取得歷史股價/tb.png" alt="印出來比較一下！" title="印出來比較一下！"></center><h3 id="小總結"><a href="#小總結" class="headerlink" title="小總結"></a>小總結</h3><ul><li>我沒有考慮手續費喔！考慮了以後，這個方法應該不會太好，這篇主要是帶大家練習pandas！</li><li>利用 Pandas 來攝取資料 1 行</li><li>利用 Pandas 簡易回測 3 行</li><li>學習 <code>series</code> 的操作</li></ul><p>第一次看，應該會覺得pandas怎麼這麼厲害，但又很無奈自己無法玩轉操弄它。不用擔心，只要常常看這個系列，就會慢慢對pandas有感覺囉！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我們之前有教過怎麼樣取當日所有股票股價的方法，但是假如我們想要做歷史回測，除了慢慢一天天抓，也可以使用 &lt;code&gt;pandas_datareader&lt;/code&gt; 這個 package（可以用&lt;code&gt;pip install pandas_datareader&lt;/cod
      
    
    </summary>
    
      <category term="財經Python教學" scheme="https://www.finlab.tw/categories/%E8%B2%A1%E7%B6%93Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="python" scheme="https://www.finlab.tw/tags/python/"/>
    
      <category term="大盤" scheme="https://www.finlab.tw/tags/%E5%A4%A7%E7%9B%A4/"/>
    
  </entry>
  
  <entry>
    <title>坊間沒在教的RSI選股技巧</title>
    <link href="https://www.finlab.tw/%E5%9D%8A%E9%96%93%E6%B2%92%E5%9C%A8%E6%95%99%E7%9A%84RSI-%E9%81%B8%E8%82%A1%E6%8A%80%E5%B7%A7/"/>
    <id>https://www.finlab.tw/坊間沒在教的RSI-選股技巧/</id>
    <published>2017-12-10T19:35:51.000Z</published>
    <updated>2018-01-24T11:39:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>RSI在個股預測上，都還算滿准的，有很多台指期策略都是使用RSI，但是在選股的時候，假如還是用一樣的方法囫圇吞棗，則會悽慘無比，就算不算手續費好了，經過我的實測，RSI黃金交叉死亡交叉的選股買賣，效果非常不好，甚至落後大盤。要如何改進呢？請接著看：</p><h3 id="RSI-超直覺介紹！"><a href="#RSI-超直覺介紹！" class="headerlink" title="RSI 超直覺介紹！"></a>RSI 超直覺介紹！</h3><p>RSI到底要怎麼用在選股上呢？首先讓我們來簡單複習一下RSI：</p><center><img src="/坊間沒在教的RSI-選股技巧/RS.png" alt="上漲和下疊的股價" title="上漲和下疊的股價"></center><p>上圖中，紅色跟綠色代表漲跟跌，長度代表漲跌幅。可以發現，當股價上漲時，雖然細部漲跌互見，但紅色線條的總長度大於綠色線條總長度，而下跌時正好相反。實際上RSI就只是這樣算而已：</p><p>$$RSI = \frac{n天內紅色總長}{n天內紅色總長 + n天內綠色總長} \times 100 \% $$</p><p>所以當 RSI = 100 時，代表近 n 天每一天都漲，而 RSI = 0 時，代表近 n 天每天都跌。RSI厲害的地方在於它考慮了股價移動的方向，而且不管任何股票，RSI永遠介於 0 ~ 1 之間。</p><h3 id="RSI-用在選股上的難題"><a href="#RSI-用在選股上的難題" class="headerlink" title="RSI 用在選股上的難題"></a>RSI 用在選股上的難題</h3><p>然而它的壞處是：每個股票漲跌的週期不同，例如有些股票跌5％會跌深反彈，但有些可能要道10%，每一支股票股性質不同。不能直接用，每個股票的 n 可能都不一樣，硬是將所有股票都用同一個 n 的 RSI 效果都非常差！</p><p>這就是為什麼明明同樣的 RSI ，有些人會說要追漲、又有人會說止跌！只能說股票特性不一樣，用法也不一樣，沒有什麼誰對誰錯的問題，也沒有說哪種比較好，完全看你的 n 值怎麼設定，所以這也是我說 RSI 用在期貨、外匯上比較好，因為可以針對同一個商品客製化參數 n，然而選股就沒辦法了。</p><h3 id="所以靠-RSI-選股就是個玄學！？"><a href="#所以靠-RSI-選股就是個玄學！？" class="headerlink" title="所以靠 RSI 選股就是個玄學！？"></a>所以靠 RSI 選股就是個玄學！？</h3><p>要如何用同一個 n 來選股呢？老實說半年前我就在琢磨這個問題，研究一直滿失敗的，但最近終於有所突破，而且方法很簡單，接下來的內容，集結了我好幾個月的研究，各位假如還滿意可以使用我們新的 email 訂閱我們的新文章喔！我們的文章含金量都很高XD（自己覺得）！</p><h3 id="在每個股票之間找尋統一的-n，實現-RSI-追漲策略"><a href="#在每個股票之間找尋統一的-n，實現-RSI-追漲策略" class="headerlink" title="在每個股票之間找尋統一的 n，實現 RSI 追漲策略"></a>在每個股票之間找尋統一的 n，實現 RSI 追漲策略</h3><p>我們硬是讓 n=定值，怎麼做好呢？<br>於是我做了很多的測試，結論是：<strong>長週期的股票RSI有共通性！</strong></p><p>以下面這個例子舉例：</p><center><img src="/坊間沒在教的RSI-選股技巧/rsi.png" alt="不同週期之下的獲利 (調整 n)" title="不同週期之下的獲利 (調整 n)"></center><p>上圖中我只用了一個簡單的選股策略：</p><ul><li>當 RSI &gt; 55 且 ROE &gt; 0 時買入。</li><li>當 買超過60天 或 跌破季線 賣出。</li></ul><p>（不考慮手續費，純實驗性質）</p><p>可以發現週期越長，股票越有共通性，RSI 越能在不同的股票間都有一致的作用！</p><p><strong>而當這種長週期 RSI 有點高時（55左右），代表股價正在上漲，此時跟風會有滿不錯的收穫！</strong></p><p>尤其是 RSI 週期 n = 60 以上，讓然感覺滿驚艷的！</p><h3 id="小結論"><a href="#小結論" class="headerlink" title="小結論"></a>小結論</h3><p>網路上沒有任何地方有教你，RSI選股要用<strong>這麼長的週期</strong>，可以自己找幾支股票追蹤看看，或許你跟我會得到類似的答案喔！</p><p>還是提醒一下大家，投資風散風險，這個方法不可能就這麼厲害，只是說上漲的期望值比較大而已，真正操作一個月，感受絕對是五五波，冷暖夾雜的啦XD，可以再多用點指標去過濾看看！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;RSI在個股預測上，都還算滿准的，有很多台指期策略都是使用RSI，但是在選股的時候，假如還是用一樣的方法囫圇吞棗，則會悽慘無比，就算不算手續費好了，經過我的實測，RSI黃金交叉死亡交叉的選股買賣，效果非常不好，甚至落後大盤。要如何改進呢？請接著看：&lt;/p&gt;
&lt;h3 id=&quot;
      
    
    </summary>
    
      <category term="指標分析" scheme="https://www.finlab.tw/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/"/>
    
      <category term="技術面" scheme="https://www.finlab.tw/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/%E6%8A%80%E8%A1%93%E9%9D%A2/"/>
    
    
      <category term="選股" scheme="https://www.finlab.tw/tags/%E9%81%B8%E8%82%A1/"/>
    
      <category term="RSI" scheme="https://www.finlab.tw/tags/RSI/"/>
    
  </entry>
  
  <entry>
    <title>腦力激盪的外資策略！</title>
    <link href="https://www.finlab.tw/%E8%85%A6%E5%8A%9B%E6%BF%80%E7%9B%AA%E7%9A%84%E5%A4%96%E8%B3%87%E7%AD%96%E7%95%A5%EF%BC%81/"/>
    <id>https://www.finlab.tw/腦力激盪的外資策略！/</id>
    <published>2017-12-08T12:13:29.000Z</published>
    <updated>2018-01-27T06:38:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近跟大家用email討論感覺很趣的！而且最近也比較忙，所以比較少時間寫blog跟大家道歉！這個週末我會利用假日來研究一下巴菲特選股！敬請期待～～</p><p>以下是其中一篇email，我們在討論一個外資策略，從原本一個普通的策略，變得可以很有效的避開大盤大跌，成為長年穩定獲利的投資方法！有時候真的是要互相討論，互相切磋，從大家身上學到很多東西！真的非常謝謝各位！</p><p>然而有時候回信比較慢，請見諒，手邊事情有點多，因為歐洲要放聖誕節了，最近會特別忙！</p><p>也歡迎大家跟我一起討論策略，我可以幫你回測跟優化，也不會隨意公布，除非你同意，我回信時間比較不固定，但我一定盡量早點回！</p><center><img src="/腦力激盪的外資策略！/thumbnail.jpeg" alt="一起互相幫忙！" title="一起互相幫忙！"></center><h3 id="P大："><a href="#P大：" class="headerlink" title="P大："></a>P大：</h3><p>最近在觀察一個選股邏輯，法人連買10日以上，且股價還沒漲多，通常之後會有不錯的漲勢～或許你有系統可以研究或是討論看看</p><h3 id="我："><a href="#我：" class="headerlink" title="我："></a>我：</h3><p>我幫你做了一下回測：</p><center><img src="/腦力激盪的外資策略！/eq1.png" alt="第一個實驗" title="第一個實驗"></center><p>的確是會比大盤好，我用的是外資買賣正的超過十天以上，且十天內報酬率不超過5%時買入，持有20天或是60天，都會比大盤還好喔！我比較喜歡持有60的版本，因為效果差不多，且手續費比較便宜。</p><p>這個方法有時候還是會同時出現100檔股票，感覺還可以再增加條件篩選出優質股，我們可以用email來回討論你的想法！讓這個策略越來越好。</p><h3 id="P大：-1"><a href="#P大：-1" class="headerlink" title="P大："></a>P大：</h3><p>遇到好人可以討論真的太好了～<br>沒關係，要怎麼運用都可以，一起進步，一起賺錢～<br>我也不太好意思，因為不知道怎麼回測，所以還請您幫忙，不過儘量提供出一些假設性的問題。～<br>關於這個策略，或許可以再加上price大於ma60，本益比小於15，或是股價淨值小於0.8之類的呢？承佑什麼想法建議的嗎？</p><p>對了 想請叫一下 怎麼不繼續使用14年那邊的策略呢？</p><h3 id="我：-1"><a href="#我：-1" class="headerlink" title="我："></a>我：</h3><p>最近比較忙，拖了一下才回信，為什麼我不用14年那個策略呢？因為很多策略都很猛呀XDD，14年那個只是還好而已。我剛剛幫你設計一下，加了一些條件，不算手續費也14倍呀。但計算了手續費後，獲利只剩下六倍，也不錯啦XD。這個策略的優點是下跌幅度滿小的，都在15%以內！金融海嘯那年竟然還賺錢。很適合穩健型的投資！<br>我是用100萬去模擬的。</p><center><img src="/腦力激盪的外資策略！/eq2.png" alt="第二個實驗" title="第二個實驗"></center><p>這個策略的思路就像你說的，加了</p><ul><li>本益比&lt;20</li><li>股價淨值比&lt;0.8</li></ul><p>另外還加了測試後發現有用的：</p><ul><li><p>市值小於5000千：選擇一些外資喜歡但市值還不會太大的小型股（外資比較好操弄）。</p></li><li><p><a href="/%E9%81%8E%E6%BF%BE%E5%A4%A7%E7%9B%A4%E7%9A%84%E7%B0%A1%E5%96%AE%E6%96%B9%E6%B3%95%EF%BC%81/">避開大盤大跌的方法</a> 當中提到的大盤濾網（在此策略調整成25天均線）。當反向條件成立時，立刻賣出手中所有持股。</p></li></ul><p>另外外資連買10天改成5天。</p><p>我覺得這幾封信的內容很有價值，我們將一個構想中的策略實現，並且回測，適合放在blog中，你覺得呢？有什麼其它想法歡迎跟我討論喔！</p><h3 id="P-大"><a href="#P-大" class="headerlink" title="P 大"></a>P 大</h3><p>如果可以成為您其中一篇文章的構想覺得榮幸哈哈哈～</p><h3 id="歡迎大家跟我討論策略喔！"><a href="#歡迎大家跟我討論策略喔！" class="headerlink" title="歡迎大家跟我討論策略喔！"></a>歡迎大家跟我討論策略喔！</h3><p>這個大概就是我們討論的經過，最後P大也同意把討論的過程放上blog，歡迎對策略有興趣的人也可以跟我一起討論喔！<br>這也是督促我研發新策略的一個動力！新策略研發最主要是幫助你可以更確定策略的有效性，而我獲得的好處就是多一點寫blog的靈感，當然我一定會詢問經過你的同意，才把策略放上blog，目前手邊有很多策略了，不缺策略，只缺本金阿XDD。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近跟大家用email討論感覺很趣的！而且最近也比較忙，所以比較少時間寫blog跟大家道歉！這個週末我會利用假日來研究一下巴菲特選股！敬請期待～～&lt;/p&gt;
&lt;p&gt;以下是其中一篇email，我們在討論一個外資策略，從原本一個普通的策略，變得可以很有效的避開大盤大跌，成為長年穩
      
    
    </summary>
    
      <category term="指標分析" scheme="https://www.finlab.tw/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/"/>
    
      <category term="籌碼面" scheme="https://www.finlab.tw/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/%E7%B1%8C%E7%A2%BC%E9%9D%A2/"/>
    
    
      <category term="外資" scheme="https://www.finlab.tw/tags/%E5%A4%96%E8%B3%87/"/>
    
  </entry>
  
  <entry>
    <title>Python 簡單選股和回測</title>
    <link href="https://www.finlab.tw/Python-%E7%B0%A1%E5%96%AE%E9%81%B8%E8%82%A1%E5%92%8C%E5%9B%9E%E6%B8%AC/"/>
    <id>https://www.finlab.tw/Python-簡單選股和回測/</id>
    <published>2017-11-30T12:21:38.000Z</published>
    <updated>2018-02-01T23:48:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看一些比較古典而學術的策略文章，雖然已經眾所皆知，但是好像很少人用，所以今天來介紹一下，如何利用 python 實做 portfolio trading。</p><center><img src="/Python-簡單選股和回測/thumbnail.jpeg" alt="動手做" title="動手做"></center><p>Portfolio Trading 的意思就是選擇一籃子股票，並且照著一定的比例買入，今天我就不介紹太詳細，先用最簡單的篩選法，選出一些股票，並觀察買入一兩年後的變化。</p><p>首先，大家必須要把之前的 <a href="/Python-時間序列實作！/">Python-時間序列實作！</a> 那一篇複習下，我們會用到當中的 close 這個成品，最好是跑五年以上的資料，會比較有可靠性。</p><h3 id="先寫好策略框架"><a href="#先寫好策略框架" class="headerlink" title="先寫好策略框架"></a>先寫好策略框架</h3><p>在開始寫策略時，先用簡單的兩三句話，來闡述所有的code在做什麼，並且逐段擴寫：</p><figure class="highlight python"><figcaption><span>pseudo code</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> 每年:</div><div class="line">    <span class="number">1.</span> 先看前三年每個股票的表現</div><div class="line">    <span class="number">2.</span> 篩選股票</div><div class="line">    <span class="number">3.</span> 回測當年的狀況</div></pre></td></tr></table></figure><p>於是接下來我們就依照這三點來建構回測。</p><h3 id="前三年股票的狀況"><a href="#前三年股票的狀況" class="headerlink" title="前三年股票的狀況"></a>前三年股票的狀況</h3><p>假設我們目前在第<code>year</code>年，，我們把最近<code>lookback_period</code>年所有股票的股價選取出來</p><figure class="highlight python"><figcaption><span>lookback three years</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 拿取近n年股票</span></div><div class="line">c = close.truncate(str(year-lookback_period), str(year))</div><div class="line"></div><div class="line"><span class="comment"># 計算近n年最大下跌幅度</span></div><div class="line">dropdown = (c.cummax() - c).max()/c.max()*<span class="number">100</span></div><div class="line"></div><div class="line"><span class="comment"># 計算近n年報酬率</span></div><div class="line">profit = (c.iloc[<span class="number">-1</span>] / c.iloc[<span class="number">0</span>] - <span class="number">1</span>) * <span class="number">100</span></div><div class="line"></div><div class="line"><span class="comment"># 計算近n年標準差(波動率)</span></div><div class="line">std = (c/c.shift()).std() * <span class="number">200</span></div></pre></td></tr></table></figure><p>第5、8、11行是計算三個指標，當然你也可以建構自己的一些指標，我這邊就先舉這三個例子，這邊的每一行都很值得玩味，假如你都看不懂，建議你先去看 <a href="https://pandas.pydata.org/pandas-docs/stable/tutorials.html" rel="external nofollow noopener noreferrer" target="_blank">pandas 的新手教學</a>。</p><h3 id="篩選股票"><a href="#篩選股票" class="headerlink" title="篩選股票"></a>篩選股票</h3><p>這邊我們就用剛剛計算的三個指標來選股：</p><figure class="highlight python"><figcaption><span>select stocks</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">constraint = (std[std &lt; <span class="number">2</span>].index &amp; </div><div class="line">              profit[profit &gt; <span class="number">10</span>].index &amp; </div><div class="line">              dropdown[dropdown &lt; <span class="number">50</span>].index)</div></pre></td></tr></table></figure><p>這邊顧名思義，我們希望選取：</p><ul><li>波動率 &lt; 2％：波動率越大代表股價變化幅度越大，我們只選波動率小的股票</li><li>獲利 &gt; 10%：近三年報酬率大於10的股票</li><li>最大下跌幅度 &lt; 50%：下跌幅度也不能太大</li></ul><h3 id="回測"><a href="#回測" class="headerlink" title="回測"></a>回測</h3><p>接著就是回測，這邊的回測只求簡單算算，跟實際情況一定不一樣，這邊我們將資產均勻分佈於選出來的股票，不計算手續費，也不計算除權息、減資等等。建議有餘力的人可以用 adjust close取代普通的 close price，結果會比較準確。</p><figure class="highlight python"><figcaption><span>backtest</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 取出今年的股價</span></div><div class="line">c2 = close.truncate(str(year), str(year + <span class="number">1</span>))</div><div class="line"></div><div class="line"><span class="comment"># 依照剛剛的條件選取股票</span></div><div class="line">selected_stocks = constraint &amp; c2.columns</div><div class="line">print(year, <span class="string">'年買了'</span>,len(selected_stocks),<span class="string">'支股票'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 回測</span></div><div class="line">equality = c2[selected_stocks].dropna(axis=<span class="number">1</span>).mean(axis=<span class="number">1</span>)</div><div class="line">total_equality = (equality / equality[<span class="number">0</span>] * start_capital)</div><div class="line">total_equality.plot(color=<span class="string">'blue'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 今年底的資產，變成明年初的資產</span></div><div class="line">start_capital = total_equality[<span class="number">-1</span>]</div></pre></td></tr></table></figure><p>什麼！回測竟然只要這麼少行！！是的因為我們是平均分散所有要買的股票，所以只要把選出來的股價做平均，買入這個平均指數就可以了。由於有了前面的假設，結果會是一樣的。</p><h3 id="完整的範例"><a href="#完整的範例" class="headerlink" title="完整的範例"></a>完整的範例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line">%matplotlib inline</div><div class="line"></div><div class="line">lookback_period = <span class="number">3</span></div><div class="line">start_capital = <span class="number">1</span></div><div class="line"><span class="keyword">for</span> year <span class="keyword">in</span> range(<span class="number">2010</span>, <span class="number">2018</span>):</div><div class="line">    </div><div class="line">    <span class="comment"># calculate performance of stocks</span></div><div class="line">    <span class="comment"># -------------------------------</span></div><div class="line"></div><div class="line">    <span class="comment"># 拿取近n年股票</span></div><div class="line">    c = close.truncate(str(year-lookback_period), str(year))</div><div class="line"></div><div class="line">    <span class="comment"># 計算近n年最大下跌幅度</span></div><div class="line">    dropdown = (c.cummax() - c).max()/c.max()*<span class="number">100</span></div><div class="line"></div><div class="line">    <span class="comment"># 計算近n年報酬率</span></div><div class="line">    profit = (c.iloc[<span class="number">-1</span>] / c.iloc[<span class="number">0</span>] - <span class="number">1</span>) * <span class="number">100</span></div><div class="line"></div><div class="line">    <span class="comment"># 計算近n年標準差(波動率)</span></div><div class="line">    std = (c/c.shift()).std()</div><div class="line"></div><div class="line">    <span class="comment"># constraint</span></div><div class="line">    <span class="comment"># ----------</span></div><div class="line">    </div><div class="line">    constraint = (std[std &lt; <span class="number">0.02</span>].index &amp; </div><div class="line">                profit[profit &gt; <span class="number">10</span>].index &amp; </div><div class="line">                dropdown[dropdown &lt; <span class="number">50</span>].index) </div><div class="line"></div><div class="line">    <span class="comment"># backtest</span></div><div class="line">    <span class="comment"># --------</span></div><div class="line"></div><div class="line">    <span class="comment"># 取出今年的股價</span></div><div class="line">    c2 = close.truncate(str(year), str(year + <span class="number">1</span>))</div><div class="line"></div><div class="line">    <span class="comment"># 依照剛剛的條件選取股票</span></div><div class="line">    selected_stocks = constraint &amp; c2.columns</div><div class="line">    print(year, <span class="string">'年買了'</span>,len(selected_stocks),<span class="string">'支股票'</span>)</div><div class="line"></div><div class="line">    <span class="comment"># 回測</span></div><div class="line">    equality = c2[selected_stocks].dropna(axis=<span class="number">1</span>).mean(axis=<span class="number">1</span>)</div><div class="line">    total_equality = (equality / equality[<span class="number">0</span>] * start_capital)</div><div class="line">    total_equality.plot(color=<span class="string">'blue'</span>)</div><div class="line"></div><div class="line">    <span class="comment"># 今年底的資產，變成明年初的資產</span></div><div class="line">    start_capital = total_equality[<span class="number">-1</span>]</div><div class="line"></div></pre></td></tr></table></figure><center><img src="/Python-簡單選股和回測/eq.png" alt="權益曲線" title="權益曲線"></center><p>這邊已知的問題是，假如你當年沒有任何股票的話，回測會有點問題喔！盡量讓每一年都持有一些股票吧！（或者debug一下XD）<br>可以看出前幾年獲利滿好的，近年來獲利普普，感覺還得加入其它的條件吧？<br>大家可以新增一些指標，並且用類似的方法做回測喔！</p><p>另外，假如想要實做更多有用的指標，可以參考：<a href="/Python-簡單158種技術指標計算/">超簡單108種技術指標</a>，找一個你喜歡的吧！</p><p>除了開高低收，想要有更多數據做回測嗎？也歡迎到<br><a href="Python-財報爬蟲-1-綜合損益表">財報爬蟲</a><br><a href="/超簡單用python抓取每月營收/">月營收爬蟲</a><br>來找找喔！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在看一些比較古典而學術的策略文章，雖然已經眾所皆知，但是好像很少人用，所以今天來介紹一下，如何利用 python 實做 portfolio trading。&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/Python-簡單選股和回測/thumbnail.jpeg&quot; al
      
    
    </summary>
    
      <category term="財經Python教學" scheme="https://www.finlab.tw/categories/%E8%B2%A1%E7%B6%93Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="python" scheme="https://www.finlab.tw/tags/python/"/>
    
      <category term="程式設計" scheme="https://www.finlab.tw/tags/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/"/>
    
  </entry>
  
  <entry>
    <title>威廉．納葛維茲-價值型選股策略</title>
    <link href="https://www.finlab.tw/%E5%A8%81%E5%BB%89%EF%BC%8E%E7%B4%8D%E8%91%9B%E7%B6%AD%E8%8C%B2-%E5%83%B9%E5%80%BC%E5%9E%8B%E9%81%B8%E8%82%A1%E7%AD%96%E7%95%A5/"/>
    <id>https://www.finlab.tw/威廉．納葛維茲-價值型選股策略/</id>
    <published>2017-11-28T16:46:51.000Z</published>
    <updated>2018-01-24T11:39:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近偶然看到了<a href="http://www.tej.com.tw/twsite/Default.aspx?TabId=389" rel="external nofollow noopener noreferrer" target="_blank">TEJ網頁中</a>，有很多策略，公式都寫好了，只要無腦回測！好開心XD，但裡面策略也太多了吧！有些有用，有些沒用，還是要慢慢撈珍，原本在大海裡撈珍，現在在河川裡撈珍，輕鬆多了。</p><p>今天要介紹的是裡面的 <strong>威廉．納葛維茲-價值型選股策略</strong> 然而為了讓回測更有用，我有做了一些小調整，條件做了一些更動，以下是這篇策略的思路：</p><h3 id="營運合格的小市值股票"><a href="#營運合格的小市值股票" class="headerlink" title="營運合格的小市值股票"></a>營運合格的小市值股票</h3><p>這個價值型策略，尋找的標的是小而美的股票，價格都在五十塊以下，然而小市值的公司通常風險比較高，所以此策略利用了 <strong>自由現金流</strong> 跟 <strong>負債比率</strong>，來觀察此公司的營運狀況，營運狀況不用到非常好，只求不要太差就可以了：</p><ul><li><a href="https://zh.wikipedia.org/wiki/%E5%B8%82%E5%80%BC" rel="external nofollow noopener noreferrer" target="_blank">市值</a> &lt; 10000（千）</li><li>近四季<a href="http://www.cmoney.tw/learn/course/0520/topic/696" rel="external nofollow noopener noreferrer" target="_blank">自由現金流量</a>&gt; 0</li><li><a href="http://statementdog.com/explain/debt-ratio.html" rel="external nofollow noopener noreferrer" target="_blank">負債比率</a> &lt; 70</li></ul><p>很多網站都會說 <strong>負債比率</strong> 是個很重要的指標，但我多次測試，發現它在很多策略中都無法增加獲利，甚至還會減少…，然而這只是我的經驗，不代表 <strong>負債比率</strong> 真的不用看，還是請各位自行斟酌。除了我這麼說外，原來Mr. Market跟我看法有志一同：<a href="http://www.rich01.com/2015/03/blog-post_25.html" rel="external nofollow noopener noreferrer" target="_blank">你覺得「負債比率」越低越好嗎？其實，它沒有想像中這麼有效！</a></p><h3 id="營收高是王道！"><a href="#營收高是王道！" class="headerlink" title="營收高是王道！"></a>營收高是王道！</h3><p>以上的條件看起來都挺保守的，接下來才是比較積極的指標，以下的指標都是用來觀察一家公司的營收跟淨利！假如一家正常營運的公司獲利比其它公司好，那沒理由不投資呀！所以這個策略用了 <strong>市值營收比</strong> 、 <strong>本益比</strong> 、<strong>營業利益成長率</strong>，來觀察公司是否持續獲利，並且獲利越來越高。</p><ul><li><a href="/市值營收比/">市值營收比</a> = 市值 / 月營收 &gt; 3</li><li><a href="/本益比能幫你選出優質股？/">本益比</a> &lt; 20</li><li><a href="http://ifund.tcbbank.com.tw/z/glossary/glexp_4902.djhtm" rel="external nofollow noopener noreferrer" target="_blank">營業利益成長率</a> &gt; 0</li></ul><p>市值營收比也是一個很好用的財務指標，可以參考<a href="/市值營收比/">我的文章</a>。</p><h3 id="稅後淨利要考慮！"><a href="#稅後淨利要考慮！" class="headerlink" title="稅後淨利要考慮！"></a>稅後淨利要考慮！</h3><p>一家獲利良好的公司，獲利持續成長，固然是好事，但不能只是獲利表面上成長，而稅後淨利卻很少，那也不行！所以這邊就用了額外的一個指標，來判斷稅後淨利的大小：</p><ul><li>股東權益報酬率 = 稅後淨利 / 股東權益總額 &gt; 市場均值</li></ul><p>這邊的 除 <strong>股東權益總額</strong> 是用來對整個市場做一個公平的比較，例如某公司發行很多股票，且股價很高，那就更應該有很好的 <strong>稅後淨利</strong> ，不然投資人為何要拿錢給你呢？</p><h3 id="思路總結："><a href="#思路總結：" class="headerlink" title="思路總結："></a>思路總結：</h3><p>這個策略基本上就是找小巧、獲利高的股票，我覺得其中很棒的概念是</p><ol><li>用市值營收比，而不是單純的營收</li><li>用股東權益報酬率，而不是單純的毛利率或稅後淨利</li></ol><p>利用上述兩個指標，才能將每家公司更公平的做比較，進而找出小而美的股票！</p><h3 id="回測結果"><a href="#回測結果" class="headerlink" title="回測結果"></a>回測結果</h3><p>符合上述條件，持有60天，每60天換一輪股票：</p><center><img src="/威廉．納葛維茲-價值型選股策略/eq.png" alt="權益曲線" title="權益曲線"></center><p>由於很久沒有介紹回測結果了，這邊在重新複習一下，藍色的就是不含手續費，紅色的是有含手續費，灰色的是台股。看起來領先台股非常多，代表這個TEJ策略裡面真的有些黃金可以挖寶，然而調整參數還是滿必要的就是了，照著TEJ直接使用，效果沒那麼好。</p><h3 id="買股數量"><a href="#買股數量" class="headerlink" title="買股數量"></a>買股數量</h3><center><img src="/威廉．納葛維茲-價值型選股策略/ns.png" alt="股票每次買入張數" title="股票每次買入張數"></center><p>每次換股的時候，我們就盡量平均自己的資產，當然每張股票價格都不一樣，所以不可能會超級平均，只求盡量。另外我們可以看到，金融海嘯的時候，藍色線買了將近150支股票，而紅色線只買了80種不同的股票，為什麼會這樣呢？因為藍色曲線是最理想的狀況，也就是全部都買，全部超級平均分散，而紅色的就是只看現有資產是多少，盡量分散，買不起就放棄。</p><p>為何金融海嘯時，有那麼多股票？因為金融海嘯不管好股壞股，都跌到了很低的價位，於是市值變小，此策略就會撈出比較多股票。</p><h3 id="跌幅"><a href="#跌幅" class="headerlink" title="跌幅"></a>跌幅</h3><center><img src="/威廉．納葛維茲-價值型選股策略/dd.png" alt="下跌幅度" title="下跌幅度"></center><p>此策略在金融海嘯時讓你的資產虧損一半多，但一般狀況表現非常傑出，約有20％的回撤，但不算太大，算是滿傑出的。</p><h3 id="總結："><a href="#總結：" class="headerlink" title="總結："></a>總結：</h3><ul><li>用自由現金流來、負債比率來看公司體質</li><li>用營收增長率及股東報酬率來衡量公司的獲利能力</li><li>分享<a href="http://www.tej.com.tw/twsite/Default.aspx?TabId=389" rel="external nofollow noopener noreferrer" target="_blank">TEJ</a>網站中的策略</li></ul><h3 id="外部延伸閱讀："><a href="#外部延伸閱讀：" class="headerlink" title="外部延伸閱讀："></a>外部延伸閱讀：</h3><p>黃國華：<a href="http://bonddealerbook.pixnet.net/blog/post/202548719-%E5%B8%82%E5%80%BC%E8%88%87%E7%87%9F%E6%94%B6%E4%B9%8B%E9%96%93%E7%9A%84%E5%90%88%E7%90%86%E9%97%9C%E4%BF%82" rel="external nofollow noopener noreferrer" target="_blank">市值跟營收之間的合理關係</a></p><p>今天介紹了<a href="http://www.tej.com.tw/twsite/Default.aspx?TabId=389" rel="external nofollow noopener noreferrer" target="_blank">TEJ網頁中</a>的策略，發現滿有用的，想在多寫點，不知到大家最有興趣的是其中的哪一個策略呢？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近偶然看到了&lt;a href=&quot;http://www.tej.com.tw/twsite/Default.aspx?TabId=389&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;TEJ網頁中&lt;/
      
    
    </summary>
    
      <category term="選股策略" scheme="https://www.finlab.tw/categories/%E9%81%B8%E8%82%A1%E7%AD%96%E7%95%A5/"/>
    
    
      <category term="選股策略" scheme="https://www.finlab.tw/tags/%E9%81%B8%E8%82%A1%E7%AD%96%E7%95%A5/"/>
    
      <category term="歷史回測" scheme="https://www.finlab.tw/tags/%E6%AD%B7%E5%8F%B2%E5%9B%9E%E6%B8%AC/"/>
    
      <category term="選股" scheme="https://www.finlab.tw/tags/%E9%81%B8%E8%82%A1/"/>
    
      <category term="市值營收比" scheme="https://www.finlab.tw/tags/%E5%B8%82%E5%80%BC%E7%87%9F%E6%94%B6%E6%AF%94/"/>
    
  </entry>
  
  <entry>
    <title>市值營收比-幫你找到便宜獲利股</title>
    <link href="https://www.finlab.tw/%E5%B8%82%E5%80%BC%E7%87%9F%E6%94%B6%E6%AF%94/"/>
    <id>https://www.finlab.tw/市值營收比/</id>
    <published>2017-11-24T09:19:11.000Z</published>
    <updated>2018-01-24T11:42:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>我才疏學淺，最近才發現這個指標，一用之下大為驚嘆，回測的效果還滿好的，今天分享給大家。網路上有各種算法，究竟要用財報上的營收總額算，還是直接用月營收算？用月營收算的話，要加總幾個月比較好？在這篇做簡單的分析。</p><center><img src="/市值營收比/thumb.jpeg" alt="計算市值營收比" title="計算市值營收比"></center><p>市值營收比的計算方式如下：</p><p>$$ 市值營收比 = 市值 / n個月營收總和 $$</p><p>一般來說，我們都是希望 <strong>市值營收比</strong> 越小越好，因為 <strong>市值營收比</strong> 越小代表市值越小，而營收越高，也代表較便宜的高營收股。<strong>市值營收比</strong> 有很多好處，它的變化速度非常快，市值是每個交易日都會變動，而月營收也是每個月都有新的數字，讓它的反應速度比其它的基本面指數再快一些。</p><p>也有人會把分母換成每季的營收總額，但我實測後發現效果沒有用月營收好。</p><p>分母中的 n 是個使用者決定的數字，例如你想計算每一季的 <strong>市值營收比</strong>，那就帶入4，這邊以4為例子。</p><p>首先我們來看 <strong>市值營收比</strong> 分佈圖：</p><center><img src="/市值營收比/hist.png" alt="市值營收比分佈圖" title="市值營收比分佈圖"></center><p>可以發現這又是一個類似於1/x曲線的分佈圖，我們將其照高低分成四組去持有，每60天換一次股，不計算手續費：</p><center><img src="/市值營收比/pr-half-y.png" alt="半年市值營收比分佈圖" title="半年市值營收比分佈圖"></center><p>很漂亮的一字排開！我發現120天換一次股，效果比60天或是240天都還要好（無論n＝4，6，12，24，36）。<br>然而這邊的回測只是建立在一次持有幾百種不同股票的狀況下，真實的情況，我們沒有那麼多錢去分散投資時，不能只看 <strong>市值營收比</strong> 來選股，不然<strong>漲跌機率還是跟擲銅板的機率沒兩樣</strong>，還必須做更多的篩選。</p><p> <strong>市值營收比</strong> 的缺點是，營收不代表稅後淨利，可能有些公司表面上賣出很多產品，但都是賠本生意，這種公司沒辦法被過濾，所以下一篇我們就來看看 <strong>市值營收比</strong> 搭配其它指標來做回測吧！</p><ul><li>計算 <strong>市值營收比</strong> 時，用月營收計算獲利效果比較好！</li><li>市值營收比（季）還滿好用的，是我認為排名前十的基本面指標</li><li>市值營收比找出來的股票，小型股偏多</li><li>可以用 3.77（50％）當作 <strong>市值營收比</strong> 的中位數，作為選股的依據，越低越好。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我才疏學淺，最近才發現這個指標，一用之下大為驚嘆，回測的效果還滿好的，今天分享給大家。網路上有各種算法，究竟要用財報上的營收總額算，還是直接用月營收算？用月營收算的話，要加總幾個月比較好？在這篇做簡單的分析。&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/市值營收比/thu
      
    
    </summary>
    
      <category term="指標分析" scheme="https://www.finlab.tw/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/"/>
    
      <category term="基本面" scheme="https://www.finlab.tw/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/%E5%9F%BA%E6%9C%AC%E9%9D%A2/"/>
    
    
      <category term="選股" scheme="https://www.finlab.tw/tags/%E9%81%B8%E8%82%A1/"/>
    
      <category term="指標" scheme="https://www.finlab.tw/tags/%E6%8C%87%E6%A8%99/"/>
    
      <category term="市值營收比" scheme="https://www.finlab.tw/tags/%E5%B8%82%E5%80%BC%E7%87%9F%E6%94%B6%E6%AF%94/"/>
    
  </entry>
  
  <entry>
    <title>避開大盤大跌的方法！</title>
    <link href="https://www.finlab.tw/%E9%81%8E%E6%BF%BE%E5%A4%A7%E7%9B%A4%E7%9A%84%E7%B0%A1%E5%96%AE%E6%96%B9%E6%B3%95%EF%BC%81/"/>
    <id>https://www.finlab.tw/過濾大盤的簡單方法！/</id>
    <published>2017-11-21T13:37:34.000Z</published>
    <updated>2018-02-22T09:59:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>目前這個blog上的策略大部分都是一直持股，就算大盤跌到慘慘慘，反正就繼續持有就對了！<br>我們能不能想一個過濾的方法，讓我們躲避掉大盤下跌的時候呢？其實是可以辦到的，這篇文章就是討論大盤過濾的效果和得失。</p><center><img src="/過濾大盤的簡單方法！/thubnail.jpeg" alt="熊市驚驚跌" title="熊市驚驚跌"></center><h3 id="何時該用大盤過濾？"><a href="#何時該用大盤過濾？" class="headerlink" title="何時該用大盤過濾？"></a>何時該用大盤過濾？</h3><p>使用時機，最白話的說法就是：你不希望賺錢之後連本帶利虧回去，但是如何定義虧很多呢？例如，今天某人虧損30萬，很多嗎？對於一個小資族如我，這樣算是非常多的，得上班好幾個月才能補回來。但對於手上持有一億元的基金公司，其實也才千分之三，是常有的事情。</p><p>所以我們通常會去看一個數值，叫做dropdown（DD），也叫虧損，或是回撤。</p><p>今天的投資資本 - 投資資本歷史最高點</p><p>用比較數學正式的角度講，我們先假設總投資資產為<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mo>(</mo><mi>t</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">c(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">c</span><span class="mopen">(</span><span class="mord mathit">t</span><span class="mclose">)</span></span></span></span>，那dropdown，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>(</mo><mi>t</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">d(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">d</span><span class="mopen">(</span><span class="mord mathit">t</span><span class="mclose">)</span></span></span></span>，就可以寫成：<span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>(</mo><mi>t</mi><mo>)</mo><mo>=</mo><mrow><mo fence="true">(</mo><mfrac><mrow><mi>c</mi><mo>(</mo><mi>t</mi><mo>)</mo></mrow><mrow><mi>max</mi><mrow><mo fence="true">{</mo><mi>c</mi><mo>(</mo><mi>i</mi><mo>)</mo><mo>∣</mo><mn>0</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>t</mi><mo fence="true">}</mo></mrow></mrow></mfrac><mo>−</mo><mn>1</mn><mo fence="true">)</mo></mrow><mo>×</mo><mn>1</mn><mn>0</mn><mn>0</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">d(t)=\left(\frac{c(t)}{\max\left\{ c(i)\mid0\le i\le t\right\} }-1\right)\times100\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.45em;"></span><span class="strut bottom" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit">d</span><span class="mopen">(</span><span class="mord mathit">t</span><span class="mclose">)</span><span class="mrel">=</span><span class="minner displaystyle textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mop">max</span><span class="minner textstyle cramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">{</span><span class="mord mathit">c</span><span class="mopen">(</span><span class="mord mathit">i</span><span class="mclose">)</span><span class="mrel">∣</span><span class="mord mathrm">0</span><span class="mrel">≤</span><span class="mord mathit">i</span><span class="mrel">≤</span><span class="mord mathit">t</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">}</span></span></span></span></span><span style="top:-0.2300000000000001em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathit">c</span><span class="mopen">(</span><span class="mord mathit">t</span><span class="mclose">)</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mbin">×</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mord mathrm">%</span></span></span></span></span></p><p>某人原本有100元，賺了50元，獲利繼續投資，但後來虧了30元，來到了120元，請問dropdown是多少？</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mfrac><mrow><mn>1</mn><mn>2</mn><mn>0</mn></mrow><mrow><mn>1</mn><mn>5</mn><mn>0</mn></mrow></mfrac><mo>−</mo><mn>1</mn><mo>)</mo><mo>×</mo><mn>1</mn><mn>0</mn><mn>0</mn><mi mathvariant="normal">%</mi><mo>=</mo><mo>−</mo><mn>2</mn><mn>0</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">(\frac{120}{150} - 1)\times100\%=-20\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.32144em;"></span><span class="strut bottom" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="base displaystyle textstyle uncramped"><span class="mopen">(</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathrm">1</span><span class="mord mathrm">5</span><span class="mord mathrm">0</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathrm">1</span><span class="mord mathrm">2</span><span class="mord mathrm">0</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mclose">)</span><span class="mbin">×</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mord mathrm">%</span><span class="mrel">=</span><span class="mord">−</span><span class="mord mathrm">2</span><span class="mord mathrm">0</span><span class="mord mathrm">%</span></span></span></span></span><p>假如100塊直接虧損30塊，那dropdown會是 -30％，但好在某人已經先獲利了50%並且持續投入股市，所以從150虧損到120元，這個策略的 dropdown 其實是 -20%。</p><p>所以不管是資金規模大小，我們有了一個統一的指標去衡量策略的下跌幅度了！<br>通常我們會進一步去看整個回測，例如十年當中，虧損最慘最慘的位置，也就是最大下跌幅度，maximum dropdown（MDD）：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext><mi mathvariant="normal">a</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">g</mi></mtext><msub><mi>min</mi><mi>t</mi></msub><mi>d</mi><mo>(</mo><mi>t</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">\text{arg} \min_t d(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1.45em;vertical-align:-0.7em;"></span><span class="base displaystyle textstyle uncramped"><span class="text mord displaystyle textstyle uncramped"><span class="mord mathrm">a</span><span class="mord mathrm">r</span><span class="mord mathrm" style="margin-right:0.01389em;">g</span></span><span class="mop op-limits"><span class="vlist"><span style="top:0.6em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">t</span></span></span><span style="top:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span><span class="mop">min</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit">d</span><span class="mopen">(</span><span class="mord mathit">t</span><span class="mclose">)</span></span></span></span></span><p>而 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.61508em;"></span><span class="strut bottom" style="height:0.61508em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">t</span></span></span></span> 通常發生在 2008～2009 金融海嘯附近。所以我習慣真的要用的策略，會測到2007年，才能看出虧損最嚴重的情行在哪裡。</p><p>我所有的策略不加大盤濾網平均dropdown在 -30% ~ -40% 左右，有些稍好在 -20%（沒有槓桿），很多有到-60%，所以投資股票當大盤大跌時，你用了沒有融券的單一策略，那就要有承受損失 -20％ ~ -30% 的心理準備。</p><p>當今天發現某個策略效果不錯，但是金融海嘯時特別差（40%～60％），那就可以使用大盤過濾了！</p><h3 id="大盤過濾的優劣得失"><a href="#大盤過濾的優劣得失" class="headerlink" title="大盤過濾的優劣得失"></a>大盤過濾的優劣得失</h3><p>當你加入了大盤過濾的策略後，很可能會發生以下情形：</p><ul><li>策略變差</li></ul><p>大家都說大盤過濾可以幫助我們將獲利保護好，以便賺更多。但不好意思要潑個冷水。我的回測經驗是，大部分的大盤過濾都會讓策略獲利變差，尤其是那些原本就獲利很好的策略。常常會發現原本可以獲利的策略，瞬間變得黯淡無光，這種事情經常發生！我的心得是，沒有一種大盤過濾法是萬用的，應該說有幾種可能有用，可以試試看，但不用抱持太大的期待。</p><ul><li>Dropdown 變小</li></ul><p>dropdown會有很明顯的變小，但是要比 -30% 好甚至到 -20%，以日為頻率做買賣個人覺得是有難度的，所以除非金融海嘯你的策略虧損來到了40%以上，再考慮使用大盤的過濾就好了。</p><h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><p>這篇的重點應該是用大盤過濾來降低dropdown，所以這邊給了一個簡單的策略。</p><ul><li>PB &lt; 1.5</li><li>ROE &gt; 1 (當季)</li><li>EPS &gt; 0 (當季)</li><li>上次寫過<a href="/絕無僅有的超強指標！/">自己愛用的指標</a></li></ul><p>每80天換一次股，看一下結果：</p><center><img src="/過濾大盤的簡單方法！/eq1.png" alt="權益曲線" title="權益曲線"></center><br><center><img src="/過濾大盤的簡單方法！/ns1.png" alt="持有股票數量" title="持有股票數量"></center><br><center><img src="/過濾大盤的簡單方法！/dd1.png" alt="dropdown" title="dropdown"></center><p>這個策略算是可以穩定慢慢的獲利，而且買股數量也不會很多，這邊我的起始資金設定成50萬，紅色的權益曲線是計算了手續費後的結果，藍色的則沒有計算手續費，這應該也算是一個小資族存點錢後可以使用的策略。然而在金融海嘯時，dropdown非常大，竟然來到了 -60%，這樣的策略就算長年下來可以獲利，我也是不敢用，誰知道下一次金融海嘯什麼時候來呢…。</p><p>所以我們用了一個大盤的濾網，在設計濾網時，可以直接買賣大盤，初步看一下是否真的有用，我最後設計的條件：</p><ul><li>大盤在21日均線上 或 21日均線上升（比昨日高）</li></ul><p>為什麼要用21呢？其實只是一種斐波那契数列的迷信而已，也可以用20啦，沒差多少。<br>以下是直接回測大盤，但不考慮手續費，反正只是想看一下這個濾網有沒有用：</p><center><img src="/過濾大盤的簡單方法！/twii.png" alt="dropdown" title="dropdown"></center><p>藍色就是真正的大盤，我們從2000年開始測試<br>橘色的是買賣大盤的結果，這邊的曲線是只有買大盤，沒有空的部分，總結這17年，此方法是有一定的獲利能力的，甚至可以拿來用在台指期策略上，我們今天只用在改善選股策略，避開一些不必要的虧損。大家可以去<a href="http://www.cmoney.tw/finance/f00008.aspx" rel="external nofollow noopener noreferrer" target="_blank">Cmoney</a>或是<a href="http://www.wantgoo.com/global/stockindex?StockNo=0000" rel="external nofollow noopener noreferrer" target="_blank">玩股網</a>，人工的方式去比對這個簡單的大盤條件。</p><p>說到這個，我跟玩股網、CMoney、財報狗都沒有什麼關係，只是網路上好用的工具就那幾個網站，而且順便提升一下這個blog的外部優質連結，如此而已啦！我還太小咖不會有人找我業配XDD</p><p>這邊只是簡單的過濾，另外還可以用KD、RSI，都試試看，甚至上網搜尋台指期的期貨策略，直接套成濾網（當然前提是時間尺度要match，這邊的最小單位是”天”）。</p><p>接下來我們修正原本的策略，加上了以上的大盤過濾條件，這邊要注意的是，我們在換股當下檢查大盤就好了，不需要每天都檢查，就是一翻兩瞪眼，也就是要買就買80天，不然就空手80天：</p><center><img src="/過濾大盤的簡單方法！/eq2.png" alt="權益曲線" title="權益曲線"></center><br><center><img src="/過濾大盤的簡單方法！/ns2.png" alt="持有股票數量" title="持有股票數量"></center><br><center><img src="/過濾大盤的簡單方法！/dd2.png" alt="dropdown" title="dropdown"></center><p>可以看到，它的dropdown從 原本的 -60% 縮小到 -30% 左右，且總獲利甚至提升了一些，這樣的結果還算滿意，覺得這應該算是過濾大盤的一個成功案例，要秀失敗策略的很簡單，因為太多了XDD，但我還是盡可能的把優質的內容呈獻給各位，今天的總結：</p><ul><li>dropdown的定義</li><li>過濾大盤的利弊</li><li>一個真實的大盤過濾方法，有可能可以套用再其它策略</li><li>大盤過濾研發的思路，及過濾的前後比較</li></ul><p>假如喜歡這個blog，可以定期追蹤喔！我每個禮拜都會不定時發文。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前這個blog上的策略大部分都是一直持股，就算大盤跌到慘慘慘，反正就繼續持有就對了！&lt;br&gt;我們能不能想一個過濾的方法，讓我們躲避掉大盤下跌的時候呢？其實是可以辦到的，這篇文章就是討論大盤過濾的效果和得失。&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/過濾大盤的簡單方法
      
    
    </summary>
    
      <category term="大盤漲跌" scheme="https://www.finlab.tw/categories/%E5%A4%A7%E7%9B%A4%E6%BC%B2%E8%B7%8C/"/>
    
    
      <category term="歷史回測" scheme="https://www.finlab.tw/tags/%E6%AD%B7%E5%8F%B2%E5%9B%9E%E6%B8%AC/"/>
    
      <category term="大盤" scheme="https://www.finlab.tw/tags/%E5%A4%A7%E7%9B%A4/"/>
    
  </entry>
  
  <entry>
    <title>Python 簡單158種技術指標計算</title>
    <link href="https://www.finlab.tw/Python-%E7%B0%A1%E5%96%AE158%E7%A8%AE%E6%8A%80%E8%A1%93%E6%8C%87%E6%A8%99%E8%A8%88%E7%AE%97/"/>
    <id>https://www.finlab.tw/Python-簡單158種技術指標計算/</id>
    <published>2017-11-19T18:46:09.000Z</published>
    <updated>2018-02-25T03:24:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>這篇接續著<a href="/Python-時間序列實作！/">Python時間序列實做</a>，先複習一下，上回合結束，我們有一個最重要的成果：close，它的columns是所有的股票代號，而index是日期。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">close = pd.DataFrame(&#123;k:d[<span class="string">'收盤價'</span>] <span class="keyword">for</span> k,d <span class="keyword">in</span> data.items()&#125;).transpose()</div><div class="line">close.index = pd.to_datetime(close.index)</div><div class="line">close</div></pre></td></tr></table></figure><p>還記得嗎？上方式是上次的code，將data，把每個股票的收盤價拿出來。因為很重要所以說三遍：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">open = pd.DataFrame(&#123;k:d[<span class="string">'開盤價'</span>] <span class="keyword">for</span> k,d <span class="keyword">in</span> data.items()&#125;).transpose()</div><div class="line">open.index = pd.to_datetime(open.index)</div><div class="line"></div><div class="line">high = pd.DataFrame(&#123;k:d[<span class="string">'最高價'</span>] <span class="keyword">for</span> k,d <span class="keyword">in</span> data.items()&#125;).transpose()</div><div class="line">high.index = pd.to_datetime(high.index)</div><div class="line"></div><div class="line">low = pd.DataFrame(&#123;k:d[<span class="string">'最低價'</span>] <span class="keyword">for</span> k,d <span class="keyword">in</span> data.items()&#125;).transpose()</div><div class="line">low.index = pd.to_datetime(low.index)</div><div class="line"></div><div class="line">volume = pd.DataFrame(&#123;k:d[<span class="string">'成交股數'</span>] <span class="keyword">for</span> k,d <span class="keyword">in</span> data.items()&#125;).transpose()</div><div class="line">volume.index = pd.to_datetime(volume.index)</div><div class="line"></div></pre></td></tr></table></figure><p>大家有沒有發現，相同的東西抄了五次，但我們拿出來的不是close，是open、high、low 跟 volume。把所有的東西都統整好。<br>統整好後，再將我們想看的股票拿出來，我們以近年超紅的台積電。</p><figure class="highlight python"><figcaption><span>把其中的股票拿出來，變成 dict 結構</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">tsmc = &#123;</div><div class="line">    <span class="string">'close'</span>:close[<span class="string">'2330'</span>][<span class="string">'2017'</span>].dropna().astype(float),</div><div class="line">    <span class="string">'open'</span>:open[<span class="string">'2330'</span>][<span class="string">'2017'</span>].dropna().astype(float),</div><div class="line">    <span class="string">'high'</span>:high[<span class="string">'2330'</span>][<span class="string">'2017'</span>].dropna().astype(float),</div><div class="line">    <span class="string">'low'</span>:low[<span class="string">'2330'</span>][<span class="string">'2017'</span>].dropna().astype(float),</div><div class="line">    <span class="string">'volume'</span>: volume[<span class="string">'2330'</span>][<span class="string">'2017'</span>].dropna().astype(float),</div><div class="line">&#125;</div><div class="line"></div><div class="line">tsmc[<span class="string">'close'</span>].plot()</div></pre></td></tr></table></figure><center><img src="/Python-簡單158種技術指標計算/tsmc.png" alt="台積電2017年收盤價" title="台積電2017年收盤價"></center><p>花這麼久時間，tsmc 這個結構有什麼用？來，接下來我們配合一個超厲害的python package：talib。<br>安裝talib不是直接<code>pip install</code>那麼簡單，請參考<a href="https://github.com/mrjbq7/ta-lib" rel="external nofollow noopener noreferrer" target="_blank">python talib 的網頁</a> 來安裝。</p><p>接下來任意找出105種指標！</p><h3 id="KD-值計算"><a href="#KD-值計算" class="headerlink" title="KD 值計算"></a>KD 值計算</h3><figure class="highlight python"><figcaption><span>KD指標</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">talib2df</span><span class="params">(talib_output)</span>:</span></div><div class="line">    <span class="keyword">if</span> type(talib_output) == list:</div><div class="line">        ret = pd.DataFrame(talib_output).transpose()</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        ret = pd.Series(talib_output)</div><div class="line">    ret.index = tsmc[<span class="string">'close'</span>].index</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line"></div><div class="line">talib2df(talib.abstract.STOCH(tsmc)).plot()</div><div class="line">tsmc[<span class="string">'close'</span>].plot(secondary_y=<span class="keyword">True</span>)</div></pre></td></tr></table></figure><p>其中，最重要的是第 9 行，我們利用 <code>talib.abstract.STOCH</code> 這個函式，來計算KD值，計算好後，再由<code>talib2df</code>將格式轉換成 dataframe 方便我們畫圖。第 10 行是說，我們想要同時顯示tsmc的收盤價，<code>secondary_y</code> 是說我們需要用第二個 y軸，因為KD我們知道是在0～100之間，而台積電股價在200左右。</p><p>以下就是我們的成品，橘色、藍色代表的就是KD值。而紫色的就是收盤價！</p><center><img src="/Python-簡單158種技術指標計算/kd.png" alt="成品：KD曲線" title="成品：KD曲線"></center><p>收盤價對應到右邊的 y 軸，而左邊的y 軸則是 KD 值。</p><h3 id="MACD-計算"><a href="#MACD-計算" class="headerlink" title="MACD 計算"></a>MACD 計算</h3><p>這還不夠酷炫，以上的鋪陳都是為了接下來的爽：</p><figure class="highlight plain"><figcaption><span>MACD 計算</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">talib2df(talib.abstract.MACD(tsmc)).plot()</div><div class="line">tsmc[&apos;close&apos;].plot(secondary_y=True)</div></pre></td></tr></table></figure><center><img src="/Python-簡單158種技術指標計算/macd.png" alt="成品：KD曲線" title="成品：KD曲線"></center><p>只要把<code>STOCH</code>改成<code>MACD</code>就好了，各種指標隨便用：</p><h3 id="OBV計算"><a href="#OBV計算" class="headerlink" title="OBV計算"></a>OBV計算</h3><figure class="highlight plain"><figcaption><span>OBV 計算</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">talib2df(talib.abstract.OBV(tsmc)).plot()</div><div class="line">tsmc[&apos;close&apos;].plot(secondary_y=True)</div></pre></td></tr></table></figure><center><img src="/Python-簡單158種技術指標計算/obv.png" alt="成品：MACD曲線" title="成品：MACD曲線"></center><h3 id="威廉指數計算"><a href="#威廉指數計算" class="headerlink" title="威廉指數計算"></a>威廉指數計算</h3><figure class="highlight plain"><figcaption><span>WILLR 計算</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">talib2df(talib.abstract.WILLR(tsmc)).plot()</div><div class="line">tsmc[&apos;close&apos;].plot(secondary_y=True)</div></pre></td></tr></table></figure><center><img src="/Python-簡單158種技術指標計算/willr.png" alt="成品：WILLR 曲線" title="成品：WILLR 曲線"></center><h3 id="ATR-計算"><a href="#ATR-計算" class="headerlink" title="ATR 計算"></a>ATR 計算</h3><figure class="highlight plain"><figcaption><span>ATR 計算</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">talib2df(talib.abstract.ATR(tsmc)).plot()</div><div class="line">tsmc[&apos;close&apos;].plot(secondary_y=True)</div></pre></td></tr></table></figure><center><img src="/Python-簡單158種技術指標計算/atr.png" alt="成品：WILLR 曲線" title="成品：WILLR 曲線"></center><p>我的天所以到底有幾種指標？！總共有</p><figure class="highlight plain"><figcaption><span>all indicators</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">talib.get_functions()</div></pre></td></tr></table></figure><center><img src="/Python-簡單158種技術指標計算/list.png" alt="所有talib指標" title="所有talib指標"></center><p>這些就是可以用的指標，總共有158種，慢慢看，學也學不完XDD。</p><h3 id="改變參數"><a href="#改變參數" class="headerlink" title="改變參數"></a>改變參數</h3><p>之前不是說KD指標有三個參數：（9、3、3），假如今天我想要客製化，怎麼修改呢？<br>我們現在只知道KD指標是 <code>talib.abstract.STOCH</code> 這個function，要如何看如何設定呢？直接 <code>print</code> 這個函式看看：</p><figure class="highlight plain"><figcaption><span>function detail</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(talib.abstract.STOCH)</div></pre></td></tr></table></figure><center><img src="/Python-簡單158種技術指標計算/kddetail.png" alt="KD（STOCH）function詳細使用資訊" title="KD（STOCH）function詳細使用資訊"></center><p>我們可以改變得參數是 <code>Parameters</code> 項目中的五個，可以看到假如什麼都不輸入的話，它的值預設是（5、3、0、3、0），這邊的0代表的就是平滑的演算法式哪一種，例如我們希望它的三個參數不要是（5、3、3），想改成台灣常用的（9、3、3），也就是我們想把 <code>fast_period</code>從原本的5改成9，只要在呼叫 <code>talib.abstract.STOCH</code> 的時候輸入 <code>fastk_period=9</code> 就可以了：</p><figure class="highlight plain"><figcaption><span>MACD 計算</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">talib2df(talib.abstract.STOCH(tsmc, fastk_period=9)).plot()</div><div class="line">tsmc[&apos;close&apos;].plot(secondary_y=True)</div></pre></td></tr></table></figure><p>今天教了大家這麼多的index，大家幾乎可以做自己的玩股網，Cmoney了，再配合上次教的用pandas選股，一個系統就快被搭建起來了！</p><p>接下來，你應該會想要建立自己的回測系統吧！不妨看一下<a href="/利用Pandas輕鬆取得歷史股價/">這篇文章</a>喔！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;這篇接續著&lt;a href=&quot;/Python-時間序列實作！/&quot;&gt;Python時間序列實做&lt;/a&gt;，先複習一下，上回合結束，我們有一個最重要的成果：close，它的columns是所有的股票代號，而index是日期。&lt;/p&gt;
&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="財經Python教學" scheme="https://www.finlab.tw/categories/%E8%B2%A1%E7%B6%93Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="python" scheme="https://www.finlab.tw/tags/python/"/>
    
      <category term="程式設計" scheme="https://www.finlab.tw/tags/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/"/>
    
  </entry>
  
</feed>
