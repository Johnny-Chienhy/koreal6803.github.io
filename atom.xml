<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FinLab 量化實驗室</title>
  
  <subtitle>用統計、回測的方式教你如何買股票</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://koreal6803.github.io/"/>
  <updated>2017-12-12T22:58:36.000Z</updated>
  <id>https://koreal6803.github.io/</id>
  
  <author>
    <name>koreal6803</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用Pandas輕鬆取得股價並回測</title>
    <link href="https://koreal6803.github.io/%E5%88%A9%E7%94%A8Pandas%E8%BC%95%E9%AC%86%E5%8F%96%E5%BE%97%E6%AD%B7%E5%8F%B2%E8%82%A1%E5%83%B9/"/>
    <id>https://koreal6803.github.io/利用Pandas輕鬆取得歷史股價/</id>
    <published>2017-12-11T21:19:49.000Z</published>
    <updated>2017-12-12T22:58:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>我們之前有教過怎麼樣取當日所有股票股價的方法，但是假如我們想要做歷史回測，除了慢慢一天天抓，也可以使用 <code>pandas_datareader</code> 這個 package（可以用<code>pip install pandas_datareader</code>來安裝）</p><center><img src="/利用Pandas輕鬆取得歷史股價/thumbnail.jpeg" alt="真的很簡單！" title="真的很簡單！"></center><h3 id="跟之前股價爬蟲的比較"><a href="#跟之前股價爬蟲的比較" class="headerlink" title="跟之前股價爬蟲的比較"></a>跟之前股價爬蟲的比較</h3><p>之前我們教的股價爬蟲，是採取一天天下載的方式，今天教的方法是幾支股票，一次下載全部歷史股價！這個方法的優點是超簡單，而且下載速度又快，缺點是有些下市的股票的股價沒有辦法取得，會有生存者偏差，而且資料比較不齊全，但偶爾玩玩，練習一下 <code>pandas</code> 是很不錯的！</p><h3 id="首先先用-pandas-datareader-取得資料"><a href="#首先先用-pandas-datareader-取得資料" class="headerlink" title="首先先用 pandas_datareader 取得資料"></a>首先先用 pandas_datareader 取得資料</h3><p>取得資料又更簡單了！先匯入要用的包</p><figure class="highlight python"><figcaption><span>import</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pandas_datareader <span class="keyword">import</span> data <span class="comment"># pip install pandas_datareader</span></div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt    <span class="comment"># pip install matplotlib</span></div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd                <span class="comment"># pip install pandas</span></div><div class="line">%matplotlib inline <span class="comment"># show figures in jupyter notebook</span></div></pre></td></tr></table></figure><p>然後：</p><figure class="highlight python"><figcaption><span>get data</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">data = data.DataReader(<span class="string">"^TWII"</span>, <span class="string">"yahoo"</span>, <span class="string">"2000-01-01"</span>,<span class="string">"2018-01-01"</span>)</div><div class="line">c = data[<span class="string">'Close'</span>]</div><div class="line">c.plot()</div></pre></td></tr></table></figure><center><img src="/利用Pandas輕鬆取得歷史股價/twii.png" alt="台股 2000～2018 每天收盤價" title="台股 2000～2018 每天收盤價"></center><p>就這樣，真的超簡單吧！假如你之前不會…現在跟你講了，別打我XDD</p><p>這個方法爬到的資料真的比較不齊全啦！</p><h3 id="用-pandas-計算-60日收盤價格"><a href="#用-pandas-計算-60日收盤價格" class="headerlink" title="用 pandas 計算 60日收盤價格"></a>用 pandas 計算 60日收盤價格</h3><p>如何用 pandas 快速算出平均線呢？<br><figure class="highlight python"><figcaption><span>get data</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 近60日收盤</span></div><div class="line">c60 = c.rolling(<span class="number">60</span>, min_periods=<span class="number">1</span>).mean()</div><div class="line"></div><div class="line"><span class="comment"># 畫圖</span></div><div class="line">c[<span class="string">'2015'</span>:].plot()</div><div class="line">c60[<span class="string">'2015'</span>:].plot()</div></pre></td></tr></table></figure></p><center><img src="/利用Pandas輕鬆取得歷史股價/avg.png" alt="台股 2000～2018 每天收盤價" title="台股 2000～2018 每天收盤價"></center><p>第二行的 <code>c</code> 就是收盤價 <code>close</code> 的簡稱，是一個 <code>series</code> ，代表每一天收盤價的時間序列，可以上 <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.html" rel="external nofollow noopener noreferrer" target="_blank">pandas 官網上查詢</a> 相關的用法，其中有一個好用的 function 叫做 <code>rolling</code> 其實它的含意就是隨時間移動窗格，將窗格中的收盤價取：</p><ul><li>60天最大值（<code>c.rolling(60).max()</code>）</li><li>60天平均（<code>c.rolling(60).mean()</code>）</li><li>60天最小值（<code>c.rolling(60).min()</code>）</li></ul><p>那為何我們還需要一個<code>min_periods=1</code>這個參數呢？因為照原本的設定，60天內只要有一個值是<code>NaN</code>，則平均值就是<code>NaN</code>，只要一筆資料有問題，你就有60天算不出平均值，所以 <code>min_periods=1</code> 就是在說，只要60天裡面有一天不是 <code>NaN</code> 就強制算的意思。</p><p>第五行跟第六行是畫圖，因為我們不想畫整整18年的圖，畫最近三年就好了，所以利用 <code>[start:end]</code> 來選擇時間，我們希望從 <code>2015</code>年到此資料的最後一筆，所以<code>end</code>放空白（跟python array一樣的選取方式，只是改用日期）。</p><h3 id="用pandas算出買入訊號"><a href="#用pandas算出買入訊號" class="headerlink" title="用pandas算出買入訊號"></a>用pandas算出買入訊號</h3><p>假如當日收盤 &gt; 近60日收盤，則當日收盤瞬間買，不然則空手</p><p>這樣子的回測要怎麼寫呢？三行解決，有沒有比multichart還簡單！？</p><figure class="highlight python"><figcaption><span>backtest</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 進60日收盤</span></div><div class="line">c60 = c.rolling(<span class="number">60</span>, min_periods=<span class="number">1</span>).mean()</div><div class="line"></div><div class="line"><span class="comment"># 買入訊號</span></div><div class="line">signal = (c &gt; c60)</div><div class="line"></div><div class="line"><span class="comment"># 回測並跟大盤比較</span></div><div class="line">(c.shift(<span class="number">-1</span>) / c)[signal].cumprod().plot(color=<span class="string">'red'</span>)</div><div class="line">(c.shift(<span class="number">-1</span>) / c).cumprod().plot(color=<span class="string">'blue'</span>)</div><div class="line"></div></pre></td></tr></table></figure><center><img src="/利用Pandas輕鬆取得歷史股價/eq.png" alt="紅色是策略的權益函數，藍色是大盤" title="紅色是策略的權益函數，藍色是大盤"></center><ul><li><h3 id="買入訊號（line-5）是如何建立的呢？"><a href="#買入訊號（line-5）是如何建立的呢？" class="headerlink" title="買入訊號（line 5）是如何建立的呢？"></a>買入訊號（line 5）是如何建立的呢？</h3><p>原本的 <code>c</code> 和 <code>c60</code> 都是 <code>float series</code>，然而這邊的 <code>signal</code> 是一個 <code>boolean series</code>，代表當天的<code>c</code> 比 <code>c60</code>還要大，每一天都會有一個布林值，<code>True</code> 代表要在收盤價買入，而 <code>False</code> 代表在收盤價空手</p></li><li><h3 id="為何我們用一行（line-8）就可以回測呢？"><a href="#為何我們用一行（line-8）就可以回測呢？" class="headerlink" title="為何我們用一行（line 8）就可以回測呢？"></a>為何我們用一行（line 8）就可以回測呢？</h3><p>首先，我們將數值變成成長率 <code>c.shift(-1)/c</code>，其中<code>c.shift(-1)</code>代表明天的收盤價，而<code>c</code>代表今天的收盤價。這個成長率是一個近似於 1 的數值，大於1代表明天漲，小於1代表明天跌。我們將所有的成長率照著時間乘起來，就會還原成原本的大盤 <code>c</code>，然而我們只有在 <code>signal = True</code> 的時候持有大盤，資產才會隨著增長率變動。<code>xx[signal]</code>的意思就是選取一個 <code>sub-series</code>，將<code>signal = False</code>的天給去除。所以我們只選 <code>signal = True</code> 的每一天相對應的成長率乘起來（<code>cumprod()</code>），就會是回測結果了！</p></li><li><h3 id="最後一行（line-9）是做什麼的？"><a href="#最後一行（line-9）是做什麼的？" class="headerlink" title="最後一行（line 9）是做什麼的？"></a>最後一行（line 9）是做什麼的？</h3><p>用來畫出大盤的，假設我們沒有用<code>xx[signal]</code>篩選，等於每天都買入的狀況，利用 <code>cumprod</code> 把每一天的成長率都乘起來。其實這行也可以寫成 <code>(c/c[0]).plot(color=&#39;blue&#39;)</code> 都是互通的，各位可以試試看。</p></li></ul><p>這邊比較複雜，建議把 <code>c</code>、<code>(c.shift(-1)/c)</code>、<code>signal</code>，這些數值都print出來比較一番吧！<br><figure class="highlight python"><figcaption><span>get data</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pd.DataFrame(&#123;<span class="string">'c'</span>:c, <span class="string">'c60'</span>:c60, <span class="string">'增長率'</span>:c.shift(<span class="number">-1</span>)/c, <span class="string">'signal'</span>:signal&#125;).head()</div></pre></td></tr></table></figure></p><center><img src="/利用Pandas輕鬆取得歷史股價/tb.png" alt="印出來比較一下！" title="印出來比較一下！"></center><h3 id="小總結"><a href="#小總結" class="headerlink" title="小總結"></a>小總結</h3><ul><li>我沒有考慮手續費喔！考慮了以後，這個方法應該不會太好，這篇主要是帶大家練習pandas！</li><li>利用 Pandas 來攝取資料 1 行</li><li>利用 Pandas 簡易回測 3 行</li><li>學習 <code>series</code> 的操作</li></ul><p>第一次看，應該會覺得pandas怎麼這麼厲害，但又很無奈自己無法玩轉操弄它。不用擔心，只要常常看這個系列，就會慢慢對pandas有感覺囉！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我們之前有教過怎麼樣取當日所有股票股價的方法，但是假如我們想要做歷史回測，除了慢慢一天天抓，也可以使用 &lt;code&gt;pandas_datareader&lt;/code&gt; 這個 package（可以用&lt;code&gt;pip install pandas_datareader&lt;/cod
      
    
    </summary>
    
      <category term="財經Python教學" scheme="https://koreal6803.github.io/categories/%E8%B2%A1%E7%B6%93Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="python" scheme="https://koreal6803.github.io/tags/python/"/>
    
      <category term="大盤" scheme="https://koreal6803.github.io/tags/%E5%A4%A7%E7%9B%A4/"/>
    
  </entry>
  
  <entry>
    <title>坊間沒在教的RSI選股技巧</title>
    <link href="https://koreal6803.github.io/%E5%9D%8A%E9%96%93%E6%B2%92%E5%9C%A8%E6%95%99%E7%9A%84RSI-%E9%81%B8%E8%82%A1%E6%8A%80%E5%B7%A7/"/>
    <id>https://koreal6803.github.io/坊間沒在教的RSI-選股技巧/</id>
    <published>2017-12-10T19:35:51.000Z</published>
    <updated>2017-12-11T09:42:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>RSI在個股預測上，都還算滿准的，有很多台指期策略都是使用RSI，但是在選股的時候，假如還是用一樣的方法囫圇吞棗，則會悽慘無比，就算不算手續費好了，經過我的實測，RSI黃金交叉死亡交叉的選股買賣，效果非常不好，甚至落後大盤。要如何改進呢？請接著看：</p><h3 id="RSI-超直覺介紹！"><a href="#RSI-超直覺介紹！" class="headerlink" title="RSI 超直覺介紹！"></a>RSI 超直覺介紹！</h3><p>RSI到底要怎麼用在選股上呢？首先讓我們來簡單複習一下RSI：</p><center><img src="/坊間沒在教的RSI-選股技巧/RS.png" alt="上漲和下疊的股價" title="上漲和下疊的股價"></center><p>上圖中，紅色跟綠色代表漲跟跌，長度代表漲跌幅。可以發現，當股價上漲時，雖然細部漲跌互見，但紅色線條的總長度大於綠色線條總長度，而下跌時正好相反。實際上RSI就只是這樣算而已：</p><p>$$RSI = \frac{n天內紅色總長}{n天內紅色總長 + n天內綠色總長} \times 100 \% $$</p><p>所以當 RSI = 100 時，代表近 n 天每一天都漲，而 RSI = 0 時，代表近 n 天每天都跌。RSI厲害的地方在於它考慮了股價移動的方向，而且不管任何股票，RSI永遠介於 0 ~ 1 之間。</p><h3 id="RSI-用在選股上的難題"><a href="#RSI-用在選股上的難題" class="headerlink" title="RSI 用在選股上的難題"></a>RSI 用在選股上的難題</h3><p>然而它的壞處是：每個股票漲跌的週期不同，例如有些股票跌5％會跌深反彈，但有些可能要道10%，每一支股票股性質不同。不能直接用，每個股票的 n 可能都不一樣，硬是將所有股票都用同一個 n 的 RSI 效果都非常差！</p><p>這就是為什麼明明同樣的 RSI ，有些人會說要追漲、又有人會說止跌！只能說股票特性不一樣，用法也不一樣，沒有什麼誰對誰錯的問題，也沒有說哪種比較好，完全看你的 n 值怎麼設定，所以這也是我說 RSI 用在期貨、外匯上比較好，因為可以針對同一個商品客製化參數 n，然而選股就沒辦法了。</p><h3 id="所以靠-RSI-選股就是個玄學！？"><a href="#所以靠-RSI-選股就是個玄學！？" class="headerlink" title="所以靠 RSI 選股就是個玄學！？"></a>所以靠 RSI 選股就是個玄學！？</h3><p>要如何用同一個 n 來選股呢？老實說半年前我就在琢磨這個問題，研究一直滿失敗的，但最近終於有所突破，而且方法很簡單，接下來的內容，集結了我好幾個月的研究，各位假如還滿意可以使用我們新的 email 訂閱我們的新文章喔！我們的文章含金量都很高XD（自己覺得）！</p><h3 id="在每個股票之間找尋統一的-n，實現-RSI-追漲策略"><a href="#在每個股票之間找尋統一的-n，實現-RSI-追漲策略" class="headerlink" title="在每個股票之間找尋統一的 n，實現 RSI 追漲策略"></a>在每個股票之間找尋統一的 n，實現 RSI 追漲策略</h3><p>我們硬是讓 n=定值，怎麼做好呢？<br>於是我做了很多的測試，結論是：<strong>長週期的股票RSI有共通性！</strong></p><p>以下面這個例子舉例：</p><center><img src="/坊間沒在教的RSI-選股技巧/rsi.png" alt="不同週期之下的獲利 (調整 n)" title="不同週期之下的獲利 (調整 n)"></center><p>上圖中我只用了一個簡單的選股策略：</p><ul><li>當 RSI &gt; 55 且 ROE &gt; 0 時買入。</li><li>當 買超過60天 或 跌破季線 賣出。</li></ul><p>（不考慮手續費，純實驗性質）</p><p>可以發現週期越長，股票越有共通性，RSI 越能在不同的股票間都有一致的作用！</p><p><strong>而當這種長週期 RSI 有點高時（55左右），代表股價正在上漲，此時跟風會有滿不錯的收穫！</strong></p><p>尤其是 RSI 週期 n = 60 以上，讓然感覺滿驚艷的！</p><h3 id="小結論"><a href="#小結論" class="headerlink" title="小結論"></a>小結論</h3><p>網路上沒有任何地方有教你，RSI選股要用<strong>這麼長的週期</strong>，可以自己找幾支股票追蹤看看，或許你跟我會得到類似的答案喔！</p><p>還是提醒一下大家，投資風散風險，這個方法不可能就這麼厲害，只是說上漲的期望值比較大而已，真正操作一個月，感受絕對是五五波，冷暖夾雜的啦XD，可以再多用點指標去過濾看看！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;RSI在個股預測上，都還算滿准的，有很多台指期策略都是使用RSI，但是在選股的時候，假如還是用一樣的方法囫圇吞棗，則會悽慘無比，就算不算手續費好了，經過我的實測，RSI黃金交叉死亡交叉的選股買賣，效果非常不好，甚至落後大盤。要如何改進呢？請接著看：&lt;/p&gt;
&lt;h3 id=&quot;
      
    
    </summary>
    
      <category term="指標分析" scheme="https://koreal6803.github.io/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/"/>
    
      <category term="技術面" scheme="https://koreal6803.github.io/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/%E6%8A%80%E8%A1%93%E9%9D%A2/"/>
    
    
      <category term="選股" scheme="https://koreal6803.github.io/tags/%E9%81%B8%E8%82%A1/"/>
    
      <category term="RSI" scheme="https://koreal6803.github.io/tags/RSI/"/>
    
  </entry>
  
  <entry>
    <title>腦力激盪的外資策略！</title>
    <link href="https://koreal6803.github.io/%E8%85%A6%E5%8A%9B%E6%BF%80%E7%9B%AA%E7%9A%84%E5%A4%96%E8%B3%87%E7%AD%96%E7%95%A5%EF%BC%81/"/>
    <id>https://koreal6803.github.io/腦力激盪的外資策略！/</id>
    <published>2017-12-08T12:13:29.000Z</published>
    <updated>2017-12-08T13:12:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近跟大家用email討論感覺很趣的！而且最近也比較忙，所以比較少時間寫blog跟大家道歉！這個週末我會利用假日來研究一下巴菲特選股！敬請期待～～</p><p>以下是其中一篇email，我們在討論一個外資策略，從原本一個普通的策略，變得可以很有效的避開大盤大跌，成為長年穩定獲利的投資方法！有時候真的是要互相討論，互相切磋，從大家身上學到很多東西！真的非常謝謝各位！</p><p>然而有時候回信比較慢，請見諒，手邊事情有點多，因為歐洲要放聖誕節了，最近會特別忙！</p><p>也歡迎大家跟我一起討論策略，我可以幫你回測跟優化，也不會隨意公布，除非你同意，我回信時間比較不固定，但我一定盡量早點回！</p><center><img src="/腦力激盪的外資策略！/thumbnail.jpeg" alt="一起互相幫忙！" title="一起互相幫忙！"></center><h3 id="P大："><a href="#P大：" class="headerlink" title="P大："></a>P大：</h3><p>最近在觀察一個選股邏輯，法人連買10日以上，且股價還沒漲多，通常之後會有不錯的漲勢～或許你有系統可以研究或是討論看看</p><h3 id="我："><a href="#我：" class="headerlink" title="我："></a>我：</h3><p>我幫你做了一下回測：</p><center><img src="/腦力激盪的外資策略！/eq1.png" alt="第一個實驗" title="第一個實驗"></center><p>的確是會比大盤好，我用的是外資買賣正的超過十天以上，且十天內報酬率不超過5%時買入，持有20天或是60天，都會比大盤還好喔！我比較喜歡持有60的版本，因為效果差不多，且手續費比較便宜。</p><p>這個方法有時候還是會同時出現100檔股票，感覺還可以再增加條件篩選出優質股，我們可以用email來回討論你的想法！讓這個策略越來越好。</p><h3 id="P大：-1"><a href="#P大：-1" class="headerlink" title="P大："></a>P大：</h3><p>遇到好人可以討論真的太好了～<br>沒關係，要怎麼運用都可以，一起進步，一起賺錢～<br>我也不太好意思，因為不知道怎麼回測，所以還請您幫忙，不過儘量提供出一些假設性的問題。～<br>關於這個策略，或許可以再加上price大於ma60，本益比小於15，或是股價淨值小於0.8之類的呢？承佑什麼想法建議的嗎？</p><p>對了 想請叫一下 怎麼不繼續使用14年那邊的策略呢？</p><h3 id="我：-1"><a href="#我：-1" class="headerlink" title="我："></a>我：</h3><p>最近比較忙，拖了一下才回信，為什麼我不用14年那個策略呢？因為很多策略都很猛呀XDD，14年那個只是還好而已。我剛剛幫你設計一下，加了一些條件，不算手續費也14倍呀。但計算了手續費後，獲利只剩下六倍，也不錯啦XD。這個策略的優點是下跌幅度滿小的，都在15%以內！金融海嘯那年竟然還賺錢。很適合穩健型的投資！<br>我是用100萬去模擬的。</p><center><img src="/腦力激盪的外資策略！/eq2.png" alt="第二個實驗" title="第二個實驗"></center><p>這個策略的思路就像你說的，加了</p><ul><li>本益比&lt;20</li><li>股價淨值比&lt;0.8</li></ul><p>另外還加了測試後發現有用的：</p><ul><li><p>市值小於5000千：選擇一些外資喜歡但市值還不會太大的小型股（外資比較好操弄）。</p></li><li><p><a href="https://koreal6803.github.io/%E9%81%8E%E6%BF%BE%E5%A4%A7%E7%9B%A4%E7%9A%84%E7%B0%A1%E5%96%AE%E6%96%B9%E6%B3%95%EF%BC%81/">避開大盤大跌的方法</a> 當中提到的大盤濾網（在此策略調整成25天均線）。當反向條件成立時，立刻賣出手中所有持股。</p></li></ul><p>另外外資連買10天改成5天。</p><p>我覺得這幾封信的內容很有價值，我們將一個構想中的策略實現，並且回測，適合放在blog中，你覺得呢？有什麼其它想法歡迎跟我討論喔！</p><h3 id="P-大"><a href="#P-大" class="headerlink" title="P 大"></a>P 大</h3><p>如果可以成為您其中一篇文章的構想覺得榮幸哈哈哈～</p><h3 id="歡迎大家跟我討論策略喔！"><a href="#歡迎大家跟我討論策略喔！" class="headerlink" title="歡迎大家跟我討論策略喔！"></a>歡迎大家跟我討論策略喔！</h3><p>這個大概就是我們討論的經過，最後P大也同意把討論的過程放上blog，歡迎對策略有興趣的人也可以跟我一起討論喔！<br>這也是督促我研發新策略的一個動力！新策略研發最主要是幫助你可以更確定策略的有效性，而我獲得的好處就是多一點寫blog的靈感，當然我一定會詢問經過你的同意，才把策略放上blog，目前手邊有很多策略了，不缺策略，只缺本金阿XDD。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近跟大家用email討論感覺很趣的！而且最近也比較忙，所以比較少時間寫blog跟大家道歉！這個週末我會利用假日來研究一下巴菲特選股！敬請期待～～&lt;/p&gt;
&lt;p&gt;以下是其中一篇email，我們在討論一個外資策略，從原本一個普通的策略，變得可以很有效的避開大盤大跌，成為長年穩
      
    
    </summary>
    
      <category term="指標分析" scheme="https://koreal6803.github.io/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/"/>
    
      <category term="籌碼面" scheme="https://koreal6803.github.io/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/%E7%B1%8C%E7%A2%BC%E9%9D%A2/"/>
    
    
      <category term="外資" scheme="https://koreal6803.github.io/tags/%E5%A4%96%E8%B3%87/"/>
    
  </entry>
  
  <entry>
    <title>Python 簡單選股和回測</title>
    <link href="https://koreal6803.github.io/Python-%E7%B0%A1%E5%96%AE%E9%81%B8%E8%82%A1%E5%92%8C%E5%9B%9E%E6%B8%AC/"/>
    <id>https://koreal6803.github.io/Python-簡單選股和回測/</id>
    <published>2017-11-30T12:21:38.000Z</published>
    <updated>2017-12-12T10:19:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看一些比較古典而學術的策略文章，雖然已經眾所皆知，但是好像很少人用，所以今天來介紹一下，如何利用 python 實做 portfolio trading。</p><center><img src="/Python-簡單選股和回測/thumbnail.jpeg" alt="動手做" title="動手做"></center><p>Portfolio Trading 的意思就是選擇一籃子股票，並且照著一定的比例買入，今天我就不介紹太詳細，先用最簡單的篩選法，選出一些股票，並觀察買入一兩年後的變化。</p><p>首先，大家必須要把之前的 <a href="/Python-時間序列實作！/">Python-時間序列實作！</a> 那一篇複習下，我們會用到當中的 close 這個成品，最好是跑五年以上的資料，會比較有可靠性。</p><h3 id="先寫好策略框架"><a href="#先寫好策略框架" class="headerlink" title="先寫好策略框架"></a>先寫好策略框架</h3><p>在開始寫策略時，先用簡單的兩三句話，來闡述所有的code在做什麼，並且逐段擴寫：</p><figure class="highlight python"><figcaption><span>pseudo code</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> 每年:</div><div class="line">    <span class="number">1.</span> 先看前三年每個股票的表現</div><div class="line">    <span class="number">2.</span> 篩選股票</div><div class="line">    <span class="number">3.</span> 回測當年的狀況</div></pre></td></tr></table></figure><p>於是接下來我們就依照這三點來建構回測。</p><h3 id="前三年股票的狀況"><a href="#前三年股票的狀況" class="headerlink" title="前三年股票的狀況"></a>前三年股票的狀況</h3><p>假設我們目前在第<code>year</code>年，，我們把最近<code>lookback_period</code>年所有股票的股價選取出來</p><figure class="highlight python"><figcaption><span>lookback three years</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 拿取近n年股票</span></div><div class="line">c = close.truncate(str(year-lookback_period), str(year))</div><div class="line"></div><div class="line"><span class="comment"># 計算近n年最大下跌幅度</span></div><div class="line">dropdown = (c.cummax() - c).max()/c.max()*<span class="number">100</span></div><div class="line"></div><div class="line"><span class="comment"># 計算近n年報酬率</span></div><div class="line">profit = (c.iloc[<span class="number">-1</span>] / c.iloc[<span class="number">0</span>] - <span class="number">1</span>) * <span class="number">100</span></div><div class="line"></div><div class="line"><span class="comment"># 計算近n年標準差(波動率)</span></div><div class="line">std = (c/c.shift()).std() * <span class="number">200</span></div></pre></td></tr></table></figure><p>第5、8、11行是計算三個指標，當然你也可以建構自己的一些指標，我這邊就先舉這三個例子，這邊的每一行都很值得玩味，假如你都看不懂，建議你先去看 <a href="https://pandas.pydata.org/pandas-docs/stable/tutorials.html" rel="external nofollow noopener noreferrer" target="_blank">pandas 的新手教學</a>。</p><h3 id="篩選股票"><a href="#篩選股票" class="headerlink" title="篩選股票"></a>篩選股票</h3><p>這邊我們就用剛剛計算的三個指標來選股：</p><figure class="highlight python"><figcaption><span>select stocks</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">constraint = (std[std &lt; <span class="number">2</span>].index &amp; </div><div class="line">              profit[profit &gt; <span class="number">10</span>].index &amp; </div><div class="line">              dropdown[dropdown &lt; <span class="number">50</span>].index)</div></pre></td></tr></table></figure><p>這邊顧名思義，我們希望選取：</p><ul><li>波動率 &lt; 2％：波動率越大代表股價變化幅度越大，我們只選波動率小的股票</li><li>獲利 &gt; 10%：近三年報酬率大於10的股票</li><li>最大下跌幅度 &lt; 50%：下跌幅度也不能太大</li></ul><h3 id="回測"><a href="#回測" class="headerlink" title="回測"></a>回測</h3><p>接著就是回測，這邊的回測只求簡單算算，跟實際情況一定不一樣，這邊我們將資產均勻分佈於選出來的股票，不計算手續費，也不計算除權息、減資等等。建議有餘力的人可以用 adjust close取代普通的 close price，結果會比較準確。</p><figure class="highlight python"><figcaption><span>backtest</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 取出今年的股價</span></div><div class="line">c2 = stocks.close.truncate(str(year), str(year + <span class="number">1</span>))</div><div class="line"></div><div class="line"><span class="comment"># 依照剛剛的條件選取股票</span></div><div class="line">selected_stocks = constraint &amp; c2.columns</div><div class="line">print(year, <span class="string">'年買了'</span>,len(selected_stocks),<span class="string">'支股票'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 回測</span></div><div class="line">equality = c2[selected_stocks].dropna(axis=<span class="number">1</span>).mean(axis=<span class="number">1</span>)</div><div class="line">total_equality = (equality / equality[<span class="number">0</span>] * start_capital)</div><div class="line">total_equality.plot(color=<span class="string">'blue'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 今年底的資產，變成明年初的資產</span></div><div class="line">start_capital = total_equality[<span class="number">-1</span>]</div></pre></td></tr></table></figure><p>什麼！回測竟然只要這麼少行！！是的因為我們是平均分散所有要買的股票，所以只要把選出來的股價做平均，買入這個平均指數就可以了。由於有了前面的假設，結果會是一樣的。</p><h3 id="完整的範例"><a href="#完整的範例" class="headerlink" title="完整的範例"></a>完整的範例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line">%matplotlib inline</div><div class="line"></div><div class="line">lookback_period = <span class="number">3</span></div><div class="line">start_capital = <span class="number">1</span></div><div class="line"><span class="keyword">for</span> year <span class="keyword">in</span> range(<span class="number">2010</span>, <span class="number">2018</span>):</div><div class="line">    </div><div class="line">    <span class="comment"># calculate performance of stocks</span></div><div class="line">    <span class="comment"># -------------------------------</span></div><div class="line"></div><div class="line">    <span class="comment"># 拿取近n年股票</span></div><div class="line">    c = close.truncate(str(year-lookback_period), str(year))</div><div class="line"></div><div class="line">    <span class="comment"># 計算近n年最大下跌幅度</span></div><div class="line">    dropdown = (c.cummax() - c).max()/c.max()*<span class="number">100</span></div><div class="line"></div><div class="line">    <span class="comment"># 計算近n年報酬率</span></div><div class="line">    profit = (c.iloc[<span class="number">-1</span>] / c.iloc[<span class="number">0</span>] - <span class="number">1</span>) * <span class="number">100</span></div><div class="line"></div><div class="line">    <span class="comment"># 計算近n年標準差(波動率)</span></div><div class="line">    std = (c/c.shift()).std()</div><div class="line"></div><div class="line">    <span class="comment"># constraint</span></div><div class="line">    <span class="comment"># ----------</span></div><div class="line">    </div><div class="line">    constraint = (std[std &lt; <span class="number">0.02</span>].index &amp; </div><div class="line">                profit[profit &gt; <span class="number">10</span>].index &amp; </div><div class="line">                dropdown[dropdown &lt; <span class="number">50</span>].index) </div><div class="line"></div><div class="line">    <span class="comment"># backtest</span></div><div class="line">    <span class="comment"># --------</span></div><div class="line"></div><div class="line">    <span class="comment"># 取出今年的股價</span></div><div class="line">    c2 = stocks.close.truncate(str(year), str(year + <span class="number">1</span>))</div><div class="line"></div><div class="line">    <span class="comment"># 依照剛剛的條件選取股票</span></div><div class="line">    selected_stocks = constraint &amp; c2.columns</div><div class="line">    print(year, <span class="string">'年買了'</span>,len(selected_stocks),<span class="string">'支股票'</span>)</div><div class="line"></div><div class="line">    <span class="comment"># 回測</span></div><div class="line">    equality = c2[selected_stocks].dropna(axis=<span class="number">1</span>).mean(axis=<span class="number">1</span>)</div><div class="line">    total_equality = (equality / equality[<span class="number">0</span>] * start_capital)</div><div class="line">    total_equality.plot(color=<span class="string">'blue'</span>)</div><div class="line"></div><div class="line">    <span class="comment"># 今年底的資產，變成明年初的資產</span></div><div class="line">    start_capital = total_equality[<span class="number">-1</span>]</div><div class="line"></div></pre></td></tr></table></figure><center><img src="/Python-簡單選股和回測/eq.png" alt="權益曲線" title="權益曲線"></center><p>這邊已知的問題是，假如你當年沒有任何股票的話，回測會有點問題喔！盡量讓每一年都持有一些股票吧！（或者debug一下XD）<br>可以看出前幾年獲利滿好的，近年來獲利普普，感覺還得加入其它的條件吧？<br>大家可以新增一些指標，並且用類似的方法做回測喔！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在看一些比較古典而學術的策略文章，雖然已經眾所皆知，但是好像很少人用，所以今天來介紹一下，如何利用 python 實做 portfolio trading。&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/Python-簡單選股和回測/thumbnail.jpeg&quot; al
      
    
    </summary>
    
      <category term="財經Python教學" scheme="https://koreal6803.github.io/categories/%E8%B2%A1%E7%B6%93Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="python" scheme="https://koreal6803.github.io/tags/python/"/>
    
      <category term="程式設計" scheme="https://koreal6803.github.io/tags/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/"/>
    
  </entry>
  
  <entry>
    <title>威廉．納葛維茲-價值型選股策略</title>
    <link href="https://koreal6803.github.io/%E5%A8%81%E5%BB%89%EF%BC%8E%E7%B4%8D%E8%91%9B%E7%B6%AD%E8%8C%B2-%E5%83%B9%E5%80%BC%E5%9E%8B%E9%81%B8%E8%82%A1%E7%AD%96%E7%95%A5/"/>
    <id>https://koreal6803.github.io/威廉．納葛維茲-價值型選股策略/</id>
    <published>2017-11-28T16:46:51.000Z</published>
    <updated>2017-11-29T00:01:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近偶然看到了<a href="http://www.tej.com.tw/twsite/Default.aspx?TabId=389" rel="external nofollow noopener noreferrer" target="_blank">TEJ網頁中</a>，有很多策略，公式都寫好了，只要無腦回測！好開心XD，但裡面策略也太多了吧！有些有用，有些沒用，還是要慢慢撈珍，原本在大海裡撈珍，現在在河川裡撈珍，輕鬆多了。</p><p>今天要介紹的是裡面的 <strong>威廉．納葛維茲-價值型選股策略</strong> 然而為了讓回測更有用，我有做了一些小調整，條件做了一些更動，以下是這篇策略的思路：</p><h3 id="營運合格的小市值股票"><a href="#營運合格的小市值股票" class="headerlink" title="營運合格的小市值股票"></a>營運合格的小市值股票</h3><p>這個價值型策略，尋找的標的是小而美的股票，價格都在五十塊以下，然而小市值的公司通常風險比較高，所以此策略利用了 <strong>自由現金流</strong> 跟 <strong>負債比率</strong>，來觀察此公司的營運狀況，營運狀況不用到非常好，只求不要太差就可以了：</p><ul><li><a href="https://zh.wikipedia.org/wiki/%E5%B8%82%E5%80%BC" rel="external nofollow noopener noreferrer" target="_blank">市值</a> &lt; 10000（千）</li><li>近四季<a href="http://www.cmoney.tw/learn/course/0520/topic/696" rel="external nofollow noopener noreferrer" target="_blank">自由現金流量</a>&gt; 0</li><li><a href="http://statementdog.com/explain/debt-ratio.html" rel="external nofollow noopener noreferrer" target="_blank">負債比率</a> &lt; 70</li></ul><p>很多網站都會說 <strong>負債比率</strong> 是個很重要的指標，但我多次測試，發現它在很多策略中都無法增加獲利，甚至還會減少…，然而這只是我的經驗，不代表 <strong>負債比率</strong> 真的不用看，還是請各位自行斟酌。除了我這麼說外，原來Mr. Market跟我看法有志一同：<a href="http://www.rich01.com/2015/03/blog-post_25.html" rel="external nofollow noopener noreferrer" target="_blank">你覺得「負債比率」越低越好嗎？其實，它沒有想像中這麼有效！</a></p><h3 id="營收高是王道！"><a href="#營收高是王道！" class="headerlink" title="營收高是王道！"></a>營收高是王道！</h3><p>以上的條件看起來都挺保守的，接下來才是比較積極的指標，以下的指標都是用來觀察一家公司的營收跟淨利！假如一家正常營運的公司獲利比其它公司好，那沒理由不投資呀！所以這個策略用了 <strong>市值營收比</strong> 、 <strong>本益比</strong> 、<strong>營業利益成長率</strong>，來觀察公司是否持續獲利，並且獲利越來越高。</p><ul><li><a href="/市值營收比/">市值營收比</a> = 市值 / 月營收 &gt; 3</li><li><a href="/本益比能幫你選出優質股？/">本益比</a> &lt; 20</li><li><a href="http://ifund.tcbbank.com.tw/z/glossary/glexp_4902.djhtm" rel="external nofollow noopener noreferrer" target="_blank">營業利益成長率</a> &gt; 0</li></ul><p>市值營收比也是一個很好用的財務指標，可以參考<a href="/市值營收比/">我的文章</a>。</p><h3 id="稅後淨利要考慮！"><a href="#稅後淨利要考慮！" class="headerlink" title="稅後淨利要考慮！"></a>稅後淨利要考慮！</h3><p>一家獲利良好的公司，獲利持續成長，固然是好事，但不能只是獲利表面上成長，而稅後淨利卻很少，那也不行！所以這邊就用了額外的一個指標，來判斷稅後淨利的大小：</p><ul><li>股東權益報酬率 = 稅後淨利 / 股東權益總額 &gt; 市場均值</li></ul><p>這邊的 除 <strong>股東權益總額</strong> 是用來對整個市場做一個公平的比較，例如某公司發行很多股票，且股價很高，那就更應該有很好的 <strong>稅後淨利</strong> ，不然投資人為何要拿錢給你呢？</p><h3 id="思路總結："><a href="#思路總結：" class="headerlink" title="思路總結："></a>思路總結：</h3><p>這個策略基本上就是找小巧、獲利高的股票，我覺得其中很棒的概念是</p><ol><li>用市值營收比，而不是單純的營收</li><li>用股東權益報酬率，而不是單純的毛利率或稅後淨利</li></ol><p>利用上述兩個指標，才能將每家公司更公平的做比較，進而找出小而美的股票！</p><h3 id="回測結果"><a href="#回測結果" class="headerlink" title="回測結果"></a>回測結果</h3><p>符合上述條件，持有60天，每60天換一輪股票：</p><center><img src="/威廉．納葛維茲-價值型選股策略/eq.png" alt="權益曲線" title="權益曲線"></center><p>由於很久沒有介紹回測結果了，這邊在重新複習一下，藍色的就是不含手續費，紅色的是有含手續費，灰色的是台股。看起來領先台股非常多，代表這個TEJ策略裡面真的有些黃金可以挖寶，然而調整參數還是滿必要的就是了，照著TEJ直接使用，效果沒那麼好。</p><h3 id="買股數量"><a href="#買股數量" class="headerlink" title="買股數量"></a>買股數量</h3><center><img src="/威廉．納葛維茲-價值型選股策略/ns.png" alt="股票每次買入張數" title="股票每次買入張數"></center><p>每次換股的時候，我們就盡量平均自己的資產，當然每張股票價格都不一樣，所以不可能會超級平均，只求盡量。另外我們可以看到，金融海嘯的時候，藍色線買了將近150支股票，而紅色線只買了80種不同的股票，為什麼會這樣呢？因為藍色曲線是最理想的狀況，也就是全部都買，全部超級平均分散，而紅色的就是只看現有資產是多少，盡量分散，買不起就放棄。</p><p>為何金融海嘯時，有那麼多股票？因為金融海嘯不管好股壞股，都跌到了很低的價位，於是市值變小，此策略就會撈出比較多股票。</p><h3 id="跌幅"><a href="#跌幅" class="headerlink" title="跌幅"></a>跌幅</h3><center><img src="/威廉．納葛維茲-價值型選股策略/dd.png" alt="下跌幅度" title="下跌幅度"></center><p>此策略在金融海嘯時讓你的資產虧損一半多，但一般狀況表現非常傑出，約有20％的回撤，但不算太大，算是滿傑出的。</p><h3 id="總結："><a href="#總結：" class="headerlink" title="總結："></a>總結：</h3><ul><li>用自由現金流來、負債比率來看公司體質</li><li>用營收增長率及股東報酬率來衡量公司的獲利能力</li><li>分享<a href="http://www.tej.com.tw/twsite/Default.aspx?TabId=389" rel="external nofollow noopener noreferrer" target="_blank">TEJ</a>網站中的策略</li></ul><h3 id="外部延伸閱讀："><a href="#外部延伸閱讀：" class="headerlink" title="外部延伸閱讀："></a>外部延伸閱讀：</h3><p>黃國華：<a href="http://bonddealerbook.pixnet.net/blog/post/202548719-%E5%B8%82%E5%80%BC%E8%88%87%E7%87%9F%E6%94%B6%E4%B9%8B%E9%96%93%E7%9A%84%E5%90%88%E7%90%86%E9%97%9C%E4%BF%82" rel="external nofollow noopener noreferrer" target="_blank">市值跟營收之間的合理關係</a></p><p>今天介紹了<a href="http://www.tej.com.tw/twsite/Default.aspx?TabId=389" rel="external nofollow noopener noreferrer" target="_blank">TEJ網頁中</a>的策略，發現滿有用的，想在多寫點，不知到大家最有興趣的是其中的哪一個策略呢？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近偶然看到了&lt;a href=&quot;http://www.tej.com.tw/twsite/Default.aspx?TabId=389&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;TEJ網頁中&lt;/
      
    
    </summary>
    
      <category term="選股策略" scheme="https://koreal6803.github.io/categories/%E9%81%B8%E8%82%A1%E7%AD%96%E7%95%A5/"/>
    
    
      <category term="選股策略" scheme="https://koreal6803.github.io/tags/%E9%81%B8%E8%82%A1%E7%AD%96%E7%95%A5/"/>
    
      <category term="歷史回測" scheme="https://koreal6803.github.io/tags/%E6%AD%B7%E5%8F%B2%E5%9B%9E%E6%B8%AC/"/>
    
      <category term="選股" scheme="https://koreal6803.github.io/tags/%E9%81%B8%E8%82%A1/"/>
    
      <category term="市值營收比" scheme="https://koreal6803.github.io/tags/%E5%B8%82%E5%80%BC%E7%87%9F%E6%94%B6%E6%AF%94/"/>
    
  </entry>
  
  <entry>
    <title>市值營收比-幫你找到便宜獲利股</title>
    <link href="https://koreal6803.github.io/%E5%B8%82%E5%80%BC%E7%87%9F%E6%94%B6%E6%AF%94/"/>
    <id>https://koreal6803.github.io/市值營收比/</id>
    <published>2017-11-24T09:19:11.000Z</published>
    <updated>2017-11-24T11:36:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>我才疏學淺，最近才發現這個指標，一用之下大為驚嘆，回測的效果還滿好的，今天分享給大家。網路上有各種算法，究竟要用財報上的營收總額算，還是直接用月營收算？用月營收算的話，要加總幾個月比較好？在這篇做簡單的分析。</p><center><img src="/市值營收比/thumb.jpeg" alt="計算市值營收比" title="計算市值營收比"></center><p>市值營收比的計算方式如下：</p><p>$$ 市值營收比 = 市值 / n個月營收總和 $$</p><p>一般來說，我們都是希望 <strong>市值營收比</strong> 越小越好，因為 <strong>市值營收比</strong> 越小代表市值越小，而營收越高，也代表較便宜的高營收股。<strong>市值營收比</strong> 有很多好處，它的變化速度非常快，市值是每個交易日都會變動，而月營收也是每個月都有新的數字，讓它的反應速度比其它的基本面指數再快一些。</p><p>也有人會把分母換成每季的營收總額，但我實測後發現效果沒有用月營收好。</p><p>分母中的 n 是個使用者決定的數字，例如你想計算每一季的 <strong>市值營收比</strong>，那就帶入4，這邊以4為例子。</p><p>首先我們來看 <strong>市值營收比</strong> 分佈圖：</p><center><img src="/市值營收比/hist.png" alt="市值營收比分佈圖" title="市值營收比分佈圖"></center><p>可以發現這又是一個類似於1/x曲線的分佈圖，我們將其照高低分成四組去持有，每60天換一次股，不計算手續費：</p><center><img src="/市值營收比/pr-half-y.png" alt="半年市值營收比分佈圖" title="半年市值營收比分佈圖"></center><p>很漂亮的一字排開！我發現120天換一次股，效果比60天或是240天都還要好（無論n＝4，6，12，24，36）。<br>然而這邊的回測只是建立在一次持有幾百種不同股票的狀況下，真實的情況，我們沒有那麼多錢去分散投資時，不能只看 <strong>市值營收比</strong> 來選股，不然<strong>漲跌機率還是跟擲銅板的機率沒兩樣</strong>，還必須做更多的篩選。</p><p> <strong>市值營收比</strong> 的缺點是，營收不代表稅後淨利，可能有些公司表面上賣出很多產品，但都是賠本生意，這種公司沒辦法被過濾，所以下一篇我們就來看看 <strong>市值營收比</strong> 搭配其它指標來做回測吧！</p><ul><li>計算 <strong>市值營收比</strong> 時，用月營收計算獲利效果比較好！</li><li>市值營收比（季）還滿好用的，是我認為排名前十的基本面指標</li><li>市值營收比找出來的股票，小型股偏多</li><li>可以用 3.77（50％）當作 <strong>市值營收比</strong> 的中位數，作為選股的依據，越低越好。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我才疏學淺，最近才發現這個指標，一用之下大為驚嘆，回測的效果還滿好的，今天分享給大家。網路上有各種算法，究竟要用財報上的營收總額算，還是直接用月營收算？用月營收算的話，要加總幾個月比較好？在這篇做簡單的分析。&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/市值營收比/thu
      
    
    </summary>
    
      <category term="指標分析" scheme="https://koreal6803.github.io/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/"/>
    
      <category term="基本面" scheme="https://koreal6803.github.io/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/%E5%9F%BA%E6%9C%AC%E9%9D%A2/"/>
    
    
      <category term="選股" scheme="https://koreal6803.github.io/tags/%E9%81%B8%E8%82%A1/"/>
    
      <category term="市值營收比" scheme="https://koreal6803.github.io/tags/%E5%B8%82%E5%80%BC%E7%87%9F%E6%94%B6%E6%AF%94/"/>
    
      <category term="指標" scheme="https://koreal6803.github.io/tags/%E6%8C%87%E6%A8%99/"/>
    
  </entry>
  
  <entry>
    <title>避開大盤大跌的方法！</title>
    <link href="https://koreal6803.github.io/%E9%81%8E%E6%BF%BE%E5%A4%A7%E7%9B%A4%E7%9A%84%E7%B0%A1%E5%96%AE%E6%96%B9%E6%B3%95%EF%BC%81/"/>
    <id>https://koreal6803.github.io/過濾大盤的簡單方法！/</id>
    <published>2017-11-21T13:37:34.000Z</published>
    <updated>2017-11-22T01:27:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>目前這個blog上的策略大部分都是一直持股，就算大盤跌到慘慘慘，反正就繼續持有就對了！<br>我們能不能想一個過濾的方法，讓我們躲避掉大盤下跌的時候呢？其實是可以辦到的，這篇文章就是討論大盤過濾的效果和得失。</p><center><img src="/過濾大盤的簡單方法！/thubnail.jpeg" alt="熊市驚驚跌" title="熊市驚驚跌"></center><h3 id="何時該用大盤過濾？"><a href="#何時該用大盤過濾？" class="headerlink" title="何時該用大盤過濾？"></a>何時該用大盤過濾？</h3><p>使用時機，最白話的說法就是：你不希望賺錢之後連本帶利虧回去，但是如何定義虧很多呢？例如，今天某人虧損30萬，很多嗎？對於一個小資族如我，這樣算是非常多的，得上班好幾個月才能補回來。但對於手上持有一億元的基金公司，其實也才千分之三，是常有的事情。</p><p>所以我們通常會去看一個數值，叫做dropdown（DD），也叫虧損，或是回撤。</p><p>$$ 今天的投資資本 - 投資資本歷史最高點 $$</p><p>用比較數學正式的角度講，我們先假設總投資資產為$c(t)$，那dropdown，$d(t)$，就可以寫成：</p>$$d(t)=\left(\frac{c(t)}{\max\left\{ c(i)\mid0\le i\le t\right\} }-1\right)\times100\%$$<p>某人原本有100元，賺了50元，獲利繼續投資，但後來虧了30元，來到了120元，請問dropdown是多少？</p>$$ (\frac{120}{150} - 1)\times100\%=-20\% $$<p>假如100塊直接虧損30塊，那dropdown會是 -30％，但好在某人已經先獲利了50%並且持續投入股市，所以從150虧損到120元，這個策略的 dropdown 其實是 -20%。</p><p>所以不管是資金規模大小，我們有了一個統一的指標去衡量策略的下跌幅度了！<br>通常我們會進一步去看整個回測，例如十年當中，虧損最慘最慘的位置，也就是最大下跌幅度，maximum dropdown（MDD）：</p>$$ \text{arg} \min_t d(t) $$<p>而 $t$ 通常發生在 2008～2009 金融海嘯附近。所以我習慣真的要用的策略，會測到2007年，才能看出虧損最嚴重的情行在哪裡。</p><p>我所有的策略不加大盤濾網平均dropdown在 -30% ~ -40% 左右，有些稍好在 -20%（沒有槓桿），很多有到-60%，所以投資股票當大盤大跌時，你用了沒有融券的單一策略，那就要有承受損失 -20％ ~ -30% 的心理準備。</p><p>當今天發現某個策略效果不錯，但是金融海嘯時特別差（40%～60％），那就可以使用大盤過濾了！</p><h3 id="大盤過濾的優劣得失"><a href="#大盤過濾的優劣得失" class="headerlink" title="大盤過濾的優劣得失"></a>大盤過濾的優劣得失</h3><p>當你加入了大盤過濾的策略後，很可能會發生以下情形：</p><ul><li>策略變差</li></ul><p>大家都說大盤過濾可以幫助我們將獲利保護好，以便賺更多。但不好意思要潑個冷水。我的回測經驗是，大部分的大盤過濾都會讓策略獲利變差，尤其是那些原本就獲利很好的策略。常常會發現原本可以獲利的策略，瞬間變得黯淡無光，這種事情經常發生！我的心得是，沒有一種大盤過濾法是萬用的，應該說有幾種可能有用，可以試試看，但不用抱持太大的期待。</p><ul><li>Dropdown 變小</li></ul><p>dropdown會有很明顯的變小，但是要比 -30% 好甚至到 -20%，以日為頻率做買賣個人覺得是有難度的，所以除非金融海嘯你的策略虧損來到了40%以上，再考慮使用大盤的過濾就好了。</p><h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><p>這篇的重點應該是用大盤過濾來降低dropdown，所以這邊給了一個簡單的策略。</p><ul><li>PB &lt; 1.5</li><li>ROE &gt; 1 (當季)</li><li>EPS &gt; 0 (當季)</li><li>上次寫過<a href="/絕無僅有的超強指標！/">自己愛用的指標</a></li></ul><p>每80天換一次股，看一下結果：</p><center><img src="/過濾大盤的簡單方法！/eq1.png" alt="權益曲線" title="權益曲線"></center><br><center><img src="/過濾大盤的簡單方法！/ns1.png" alt="持有股票數量" title="持有股票數量"></center><br><center><img src="/過濾大盤的簡單方法！/dd1.png" alt="dropdown" title="dropdown"></center><p>這個策略算是可以穩定慢慢的獲利，而且買股數量也不會很多，這邊我的起始資金設定成50萬，紅色的權益曲線是計算了手續費後的結果，藍色的則沒有計算手續費，這應該也算是一個小資族存點錢後可以使用的策略。然而在金融海嘯時，dropdown非常大，竟然來到了 -60%，這樣的策略就算長年下來可以獲利，我也是不敢用，誰知道下一次金融海嘯什麼時候來呢…。</p><p>所以我們用了一個大盤的濾網，在設計濾網時，可以直接買賣大盤，初步看一下是否真的有用，我最後設計的條件：</p><ul><li>大盤在21日均線上 或 21日均線上升（比昨日高）</li></ul><p>為什麼要用21呢？其實只是一種斐波那契数列的迷信而已，也可以用20啦，沒差多少。<br>以下是直接回測大盤，但不考慮手續費，反正只是想看一下這個濾網有沒有用：</p><center><img src="/過濾大盤的簡單方法！/twii.png" alt="dropdown" title="dropdown"></center><p>藍色就是真正的大盤，我們從2000年開始測試<br>橘色的是買賣大盤的結果，這邊的曲線是只有買大盤，沒有空的部分，總結這17年，此方法是有一定的獲利能力的，甚至可以拿來用在台指期策略上，我們今天只用在改善選股策略，避開一些不必要的虧損。大家可以去<a href="http://www.cmoney.tw/finance/f00008.aspx" rel="external nofollow noopener noreferrer" target="_blank">Cmoney</a>或是<a href="http://www.wantgoo.com/global/stockindex?StockNo=0000" rel="external nofollow noopener noreferrer" target="_blank">玩股網</a>，人工的方式去比對這個簡單的大盤條件。</p><p>說到這個，我跟玩股網、CMoney、財報狗都沒有什麼關係，只是網路上好用的工具就那幾個網站，而且順便提升一下這個blog的外部優質連結，如此而已啦！我還太小咖不會有人找我業配XDD</p><p>這邊只是簡單的過濾，另外還可以用KD、RSI，都試試看，甚至上網搜尋台指期的期貨策略，直接套成濾網（當然前提是時間尺度要match，這邊的最小單位是”天”）。</p><p>接下來我們修正原本的策略，加上了以上的大盤過濾條件，這邊要注意的是，我們在換股當下檢查大盤就好了，不需要每天都檢查，就是一翻兩瞪眼，也就是要買就買80天，不然就空手80天：</p><center><img src="/過濾大盤的簡單方法！/eq2.png" alt="權益曲線" title="權益曲線"></center><br><center><img src="/過濾大盤的簡單方法！/ns2.png" alt="持有股票數量" title="持有股票數量"></center><br><center><img src="/過濾大盤的簡單方法！/dd2.png" alt="dropdown" title="dropdown"></center><p>可以看到，它的dropdown從 原本的 -60% 縮小到 -30% 左右，且總獲利甚至提升了一些，這樣的結果還算滿意，覺得這應該算是過濾大盤的一個成功案例，要秀失敗策略的很簡單，因為太多了XDD，但我還是盡可能的把優質的內容呈獻給各位，今天的總結：</p><ul><li>dropdown的定義</li><li>過濾大盤的利弊</li><li>一個真實的大盤過濾方法，有可能可以套用再其它策略</li><li>大盤過濾研發的思路，及過濾的前後比較</li></ul><p>假如喜歡這個blog，可以定期追蹤喔！我每個禮拜都會不定時發文。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前這個blog上的策略大部分都是一直持股，就算大盤跌到慘慘慘，反正就繼續持有就對了！&lt;br&gt;我們能不能想一個過濾的方法，讓我們躲避掉大盤下跌的時候呢？其實是可以辦到的，這篇文章就是討論大盤過濾的效果和得失。&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/過濾大盤的簡單方法
      
    
    </summary>
    
      <category term="大盤漲跌" scheme="https://koreal6803.github.io/categories/%E5%A4%A7%E7%9B%A4%E6%BC%B2%E8%B7%8C/"/>
    
    
      <category term="歷史回測" scheme="https://koreal6803.github.io/tags/%E6%AD%B7%E5%8F%B2%E5%9B%9E%E6%B8%AC/"/>
    
      <category term="大盤" scheme="https://koreal6803.github.io/tags/%E5%A4%A7%E7%9B%A4/"/>
    
  </entry>
  
  <entry>
    <title>Python 簡單158種技術指標計算</title>
    <link href="https://koreal6803.github.io/Python-%E7%B0%A1%E5%96%AE158%E7%A8%AE%E6%8A%80%E8%A1%93%E6%8C%87%E6%A8%99%E8%A8%88%E7%AE%97/"/>
    <id>https://koreal6803.github.io/Python-簡單158種技術指標計算/</id>
    <published>2017-11-19T18:46:09.000Z</published>
    <updated>2017-12-12T10:22:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>這篇接續著<a href="/Python-時間序列實作！/">Python時間序列實做</a>，先複習一下，上回合結束，我們有一個最重要的成果：close，它的columns是所有的股票代號，而index是日期。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">close = pd.DataFrame(&#123;k:d[<span class="string">'收盤價'</span>] <span class="keyword">for</span> k,d <span class="keyword">in</span> data.items()&#125;).transpose()</div><div class="line">close.index = pd.to_datetime(close.index)</div><div class="line">close</div></pre></td></tr></table></figure><p>還記得嗎？上方式是上次的code，將data，把每個股票的收盤價拿出來。因為很重要所以說三遍：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">open = pd.DataFrame(&#123;k:d[<span class="string">'開盤價'</span>] <span class="keyword">for</span> k,d <span class="keyword">in</span> data.items()&#125;).transpose()</div><div class="line">open.index = pd.to_datetime(open.index)</div><div class="line"></div><div class="line">high = pd.DataFrame(&#123;k:d[<span class="string">'最高價'</span>] <span class="keyword">for</span> k,d <span class="keyword">in</span> data.items()&#125;).transpose()</div><div class="line">high.index = pd.to_datetime(high.index)</div><div class="line"></div><div class="line">low = pd.DataFrame(&#123;k:d[<span class="string">'最低價'</span>] <span class="keyword">for</span> k,d <span class="keyword">in</span> data.items()&#125;).transpose()</div><div class="line">low.index = pd.to_datetime(low.index)</div><div class="line"></div><div class="line">volume = pd.DataFrame(&#123;k:d[<span class="string">'成交量'</span>] <span class="keyword">for</span> k,d <span class="keyword">in</span> data.items()&#125;).transpose()</div><div class="line">volume.index = pd.to_datetime(volume.index)</div><div class="line"></div></pre></td></tr></table></figure><p>大家有沒有發現，相同的東西抄了五次，但我們拿出來的不是close，是open、high、low 跟 volume。把所有的東西都統整好。<br>統整好後，再將我們想看的股票拿出來，我們以近年超紅的台積電。</p><figure class="highlight python"><figcaption><span>把其中的股票拿出來，變成 dict 結構</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">tsmc = &#123;</div><div class="line">    <span class="string">'close'</span>:stocks.close[<span class="string">'2330'</span>][<span class="string">'2017'</span>].dropna().astype(float),</div><div class="line">    <span class="string">'open'</span>:stocks.open[<span class="string">'2330'</span>][<span class="string">'2017'</span>].dropna().astype(float),</div><div class="line">    <span class="string">'high'</span>:stocks.high[<span class="string">'2330'</span>][<span class="string">'2017'</span>].dropna().astype(float),</div><div class="line">    <span class="string">'low'</span>:stocks.low[<span class="string">'2330'</span>][<span class="string">'2017'</span>].dropna().astype(float),</div><div class="line">    <span class="string">'volume'</span>: stocks.volume[<span class="string">'2330'</span>][<span class="string">'2017'</span>].dropna().astype(float),</div><div class="line">&#125;</div><div class="line"></div><div class="line">tsmc[<span class="string">'close'</span>].plot()</div></pre></td></tr></table></figure><center><img src="/Python-簡單158種技術指標計算/tsmc.png" alt="台積電2017年收盤價" title="台積電2017年收盤價"></center><p>花這麼久時間，tsmc 這個結構有什麼用？來，接下來我們配合一個超厲害的python package：talib。<br>安裝talib不是直接<code>pip install</code>那麼簡單，請參考<a href="https://github.com/mrjbq7/ta-lib" rel="external nofollow noopener noreferrer" target="_blank">python talib 的網頁</a> 來安裝。</p><p>接下來任意找出105種指標！</p><h3 id="KD-值計算"><a href="#KD-值計算" class="headerlink" title="KD 值計算"></a>KD 值計算</h3><figure class="highlight python"><figcaption><span>KD指標</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">talib2df</span><span class="params">(talib_output)</span>:</span></div><div class="line">    <span class="keyword">if</span> type(talib_output) == list:</div><div class="line">        ret = pd.DataFrame(talib_output).transpose()</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        ret = pd.Series(talib_output)</div><div class="line">    ret.index = tsmc[<span class="string">'close'</span>].index</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line"></div><div class="line">talib2df(talib.abstract.STOCH(tsmc)).plot()</div><div class="line">tsmc[<span class="string">'close'</span>].plot(secondary_y=<span class="keyword">True</span>)</div></pre></td></tr></table></figure><p>其中，最重要的是第 9 行，我們利用 <code>talib.abstract.STOCH</code> 這個函式，來計算KD值，計算好後，再由<code>talib2df</code>將格式轉換成 dataframe 方便我們畫圖。第 10 行是說，我們想要同時顯示tsmc的收盤價，<code>secondary_y</code> 是說我們需要用第二個 y軸，因為KD我們知道是在0～100之間，而台積電股價在200左右。</p><p>以下就是我們的成品，橘色、藍色代表的就是KD值。而紫色的就是收盤價！</p><center><img src="/Python-簡單158種技術指標計算/kd.png" alt="成品：KD曲線" title="成品：KD曲線"></center><p>收盤價對應到右邊的 y 軸，而左邊的y 軸則是 KD 值。</p><h3 id="MACD-計算"><a href="#MACD-計算" class="headerlink" title="MACD 計算"></a>MACD 計算</h3><p>這還不夠酷炫，以上的鋪陳都是為了接下來的爽：</p><figure class="highlight plain"><figcaption><span>MACD 計算</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">talib2df(talib.abstract.MACD(tsmc)).plot()</div><div class="line">tsmc[&apos;close&apos;].plot(secondary_y=True)</div></pre></td></tr></table></figure><center><img src="/Python-簡單158種技術指標計算/macd.png" alt="成品：KD曲線" title="成品：KD曲線"></center><p>只要把<code>STOCH</code>改成<code>MACD</code>就好了，各種指標隨便用：</p><h3 id="OBV計算"><a href="#OBV計算" class="headerlink" title="OBV計算"></a>OBV計算</h3><figure class="highlight plain"><figcaption><span>OBV 計算</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">talib2df(talib.abstract.OBV(tsmc)).plot()</div><div class="line">tsmc[&apos;close&apos;].plot(secondary_y=True)</div></pre></td></tr></table></figure><center><img src="/Python-簡單158種技術指標計算/obv.png" alt="成品：MACD曲線" title="成品：MACD曲線"></center><h3 id="威廉指數計算"><a href="#威廉指數計算" class="headerlink" title="威廉指數計算"></a>威廉指數計算</h3><figure class="highlight plain"><figcaption><span>WILLR 計算</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">talib2df(talib.abstract.WILLR(tsmc)).plot()</div><div class="line">tsmc[&apos;close&apos;].plot(secondary_y=True)</div></pre></td></tr></table></figure><center><img src="/Python-簡單158種技術指標計算/willr.png" alt="成品：WILLR 曲線" title="成品：WILLR 曲線"></center><h3 id="ATR-計算"><a href="#ATR-計算" class="headerlink" title="ATR 計算"></a>ATR 計算</h3><figure class="highlight plain"><figcaption><span>ATR 計算</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">talib2df(talib.abstract.ATR(tsmc)).plot()</div><div class="line">tsmc[&apos;close&apos;].plot(secondary_y=True)</div></pre></td></tr></table></figure><center><img src="/Python-簡單158種技術指標計算/atr.png" alt="成品：WILLR 曲線" title="成品：WILLR 曲線"></center><p>我的天所以到底有幾種指標？！總共有</p><figure class="highlight plain"><figcaption><span>all indicators</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">talib.get_functions()</div></pre></td></tr></table></figure><center><img src="/Python-簡單158種技術指標計算/list.png" alt="所有talib指標" title="所有talib指標"></center><p>這些就是可以用的指標，總共有158種，慢慢看，學也學不完XDD。</p><h3 id="改變參數"><a href="#改變參數" class="headerlink" title="改變參數"></a>改變參數</h3><p>之前不是說KD指標有三個參數：（9、3、3），假如今天我想要客製化，怎麼修改呢？<br>我們現在只知道KD指標是 <code>talib.abstract.STOCH</code> 這個function，要如何看如何設定呢？直接 <code>print</code> 這個函式看看：</p><figure class="highlight plain"><figcaption><span>function detail</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(talib.abstract.STOCH)</div></pre></td></tr></table></figure><center><img src="/Python-簡單158種技術指標計算/kddetail.png" alt="KD（STOCH）function詳細使用資訊" title="KD（STOCH）function詳細使用資訊"></center><p>我們可以改變得參數是 <code>Parameters</code> 項目中的五個，可以看到假如什麼都不輸入的話，它的值預設是（5、3、0、3、0），這邊的0代表的就是平滑的演算法式哪一種，例如我們希望它的三個參數不要是（5、3、3），想改成台灣常用的（9、3、3），也就是我們想把 <code>fast_period</code>從原本的5改成9，只要在呼叫 <code>talib.abstract.STOCH</code> 的時候輸入 <code>fastk_period=9</code> 就可以了：</p><figure class="highlight plain"><figcaption><span>MACD 計算</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">talib2df(talib.abstract.STOCH(tsmc, fastk_period=9)).plot()</div><div class="line">tsmc[&apos;close&apos;].plot(secondary_y=True)</div></pre></td></tr></table></figure><p>今天教了大家這麼多的index，大家幾乎可以做自己的玩股網，Cmoney了，再配合上次教的用pandas選股，一個系統就快被搭建起來了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;這篇接續著&lt;a href=&quot;/Python-時間序列實作！/&quot;&gt;Python時間序列實做&lt;/a&gt;，先複習一下，上回合結束，我們有一個最重要的成果：close，它的columns是所有的股票代號，而index是日期。&lt;/p&gt;
&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="財經Python教學" scheme="https://koreal6803.github.io/categories/%E8%B2%A1%E7%B6%93Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="python" scheme="https://koreal6803.github.io/tags/python/"/>
    
      <category term="程式設計" scheme="https://koreal6803.github.io/tags/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/"/>
    
  </entry>
  
  <entry>
    <title>Python 時間序列實做！</title>
    <link href="https://koreal6803.github.io/Python-%E6%99%82%E9%96%93%E5%BA%8F%E5%88%97%E5%AF%A6%E4%BD%9C%EF%BC%81/"/>
    <id>https://koreal6803.github.io/Python-時間序列實作！/</id>
    <published>2017-11-15T13:03:03.000Z</published>
    <updated>2017-12-12T09:56:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前我們介紹了很多爬蟲，可以爬每天、每月、每季的資料，今天就是要交爬完了之後要怎麼運用。這篇文章會教如何將爬下來的資料整理成 time series （時間序列）</p><center><img src="/Python-時間序列實作！/thumbnail.png" alt="時間序列" title="時間序列"></center><h3 id="每日爬蟲"><a href="#每日爬蟲" class="headerlink" title="每日爬蟲"></a>每日爬蟲</h3><p>首先，我們將之<a href="/超簡單台股每日爬蟲教學/">前一篇：超簡單台股每日爬蟲教學</a> 所分享的程式碼變成以下的function，方便我們多次呼叫，才能爬每一天的股價。</p><figure class="highlight python"><figcaption><span>每日股價爬蟲</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">crawlPrice</span><span class="params">(date)</span>:</span></div><div class="line">    r = requests.post(<span class="string">'http://app.twse.com.tw/ch/trading/exchange/MI_INDEX/MI_INDEX.php'</span>, data=&#123;</div><div class="line">        <span class="string">'download'</span>: <span class="string">'csv'</span>,</div><div class="line">        <span class="string">'qdate'</span>:date,</div><div class="line">        <span class="string">'selectType'</span>:<span class="string">'ALL'</span>,</div><div class="line">    &#125;)</div><div class="line">    r.encoding = <span class="string">'big5'</span></div><div class="line">    df = pd.read_csv(StringIO(<span class="string">"\n"</span>.join([i.translate(&#123;ord(c): <span class="keyword">None</span> <span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">' '</span>&#125;) </div><div class="line">                                         <span class="keyword">for</span> i <span class="keyword">in</span> r.text.split(<span class="string">'\n'</span>) </div><div class="line">                                         <span class="keyword">if</span> len(i.split(<span class="string">'",'</span>)) == <span class="number">16</span> <span class="keyword">and</span> i[<span class="number">0</span>] != <span class="string">'='</span>])), header=<span class="number">0</span>)</div><div class="line"></div><div class="line">    df.set_index(<span class="string">'證券代號'</span>, inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    df.columns = [<span class="string">'證券名稱'</span>, <span class="string">'成交量'</span>, <span class="string">'成交筆數'</span>, <span class="string">'成交金額'</span>, <span class="string">'開盤價'</span>, <span class="string">'最高價'</span>, <span class="string">'最低價'</span>, <span class="string">'收盤價'</span>,</div><div class="line">                  <span class="string">'漲跌(+/-)'</span>, <span class="string">'漲跌價差'</span>, <span class="string">'最後揭示買價'</span>, <span class="string">'最後揭示買量'</span>, <span class="string">'最後揭示賣價'</span>, <span class="string">'最後揭示賣量'</span>, <span class="string">'本益比'</span>]</div><div class="line">    </div><div class="line">    df[<span class="string">'成交量'</span>] /= <span class="number">1000</span></div><div class="line">    df = df.drop([<span class="string">'漲跌(+/-)'</span>,<span class="string">'證券名稱'</span>,<span class="string">'最後揭示買量'</span>,<span class="string">'最後揭示賣量'</span>], axis=<span class="number">1</span>)</div><div class="line">    df = df.replace(<span class="string">'--'</span>, np.nan)</div><div class="line">    df = df.apply(pd.to_numeric)</div><div class="line">    df = df.apply(pd.to_numeric)</div><div class="line">    <span class="keyword">assert</span> len(set(df.index)) == len(df.index)</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> df</div><div class="line"></div></pre></td></tr></table></figure><p>就跟之前是一樣的，只是被包成 function ，它的 input 是日期，output 是 dataframe，寫程式最重要的就是瞭解 input 跟 output 的型態，就會比較簡單了！</p><h3 id="呼叫每日爬蟲，連續爬-n-天"><a href="#呼叫每日爬蟲，連續爬-n-天" class="headerlink" title="呼叫每日爬蟲，連續爬 n 天"></a>呼叫每日爬蟲，連續爬 n 天</h3><p>接下來我們就來利用這個 function 幫我們爬最近9天的資料，並將數據存在 data 這個 variable 中：</p><figure class="highlight python"><figcaption><span>一次爬 n_days 天的股價</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> datetime</div><div class="line"></div><div class="line">data = &#123;&#125;</div><div class="line">n_days = <span class="number">9</span></div><div class="line">time = datetime.datetime.now()</div><div class="line"></div><div class="line"><span class="keyword">while</span> len(data) &lt; n_days:</div><div class="line">    </div><div class="line">    <span class="comment"># 假如日月 &lt; 9 要補零</span></div><div class="line">    month_str = str(time.month) <span class="keyword">if</span> time.month &gt; <span class="number">9</span> <span class="keyword">else</span> <span class="string">'0'</span> + str(time.month)</div><div class="line">    day_str = str(time.day) <span class="keyword">if</span> time.day &gt; <span class="number">9</span> <span class="keyword">else</span> <span class="string">'0'</span> + str(time.day)</div><div class="line">    </div><div class="line">    <span class="comment"># e.x 20100101</span></div><div class="line">    taiwan_time_str = str(time.year - <span class="number">1911</span>) + <span class="string">'/'</span> + month_str + <span class="string">'/'</span> + day_str</div><div class="line">    international_time_str = str(time.year) + month_str + day_str</div><div class="line">    </div><div class="line">    print(<span class="string">'parsing'</span>, international_time_str)</div><div class="line"></div><div class="line">    <span class="comment"># 使用 crawPrice 爬資料</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        data[international_time_str] = crawlPrice(taiwan_time_str)</div><div class="line">        print(<span class="string">'success!'</span>)</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="comment"># 假日爬不到</span></div><div class="line">        print(<span class="string">'fail! check the date is holiday'</span>)</div><div class="line">    </div><div class="line">    <span class="comment"># 減一天</span></div><div class="line">    time -= datetime.timedelta(days=<span class="number">1</span>)</div><div class="line"></div></pre></td></tr></table></figure><p>想要增加天數，只要調整 n_days 這個參數就行了！<br>一切都順利的話，會顯示成以下這樣：</p><center><img src="/Python-時間序列實作！/everyday.png" alt="使用function的方法截圖" title="使用function的方法截圖"></center><p>大部分的天數都是 success 代表成功讀取資料，但是每間隔5天就會顯示兩次 fail，代表那可能是假日，然而不能保證就是了，也可能是你的網路斷掉XD，或是 code 有bug，就要單獨做測試，至少在我的電腦裡，它抓的滿好的。</p><h3 id="整理-data-轉成-收盤價-time-series"><a href="#整理-data-轉成-收盤價-time-series" class="headerlink" title="整理 data 轉成 收盤價 time series"></a>整理 data 轉成 收盤價 time series</h3><p>接下來我們來看一下得到了什麼：</p><center><img src="/Python-時間序列實作！/data.png" alt="操作正確的顯示畫面" title="操作正確的顯示畫面"></center><p>我們像上圖一樣，只拿取 “2017-11-15” 號的股價，會像上面這樣，變換不同的日期，可以得到不同的表。但這並不是我們想要的，我們想要有 time series，也就是看到某個欄位隨時間變動的圖表，於是我們做以下的轉換：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">close = pd.DataFrame(&#123;k:d[<span class="string">'收盤價'</span>] <span class="keyword">for</span> k,d <span class="keyword">in</span> data.items()&#125;).transpose()</div><div class="line">close.index = pd.to_datetime(close.index)</div><div class="line">close</div></pre></td></tr></table></figure><p>在上面的程式中，現在我們只拿所有股票的 收盤價，並建構 close 這個 dataframe，這個 dataframe，假如你還不知道什麼是 dataframe，或對 dataframe 還不熟，可以參考<a href="https://pandas.pydata.org/pandas-docs/stable/10min.html" rel="external nofollow noopener noreferrer" target="_blank">連結</a>學習一下。</p><p>輸入後會看到以下成品：</p><center><img src="/Python-時間序列實作！/clean.png" alt="clean.png" title=""></center><p>現在整張表都只剩 收盤價 了，而且還是按照日期排列，超讚的！我也覺得很開心，竟然兩行就處理完，我還以為要五行之類的，可見pandas真的很厲害！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前我們介紹了很多爬蟲，可以爬每天、每月、每季的資料，今天就是要交爬完了之後要怎麼運用。這篇文章會教如何將爬下來的資料整理成 time series （時間序列）&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/Python-時間序列實作！/thumbnail.png&quot; al
      
    
    </summary>
    
      <category term="財經Python教學" scheme="https://koreal6803.github.io/categories/%E8%B2%A1%E7%B6%93Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="python" scheme="https://koreal6803.github.io/tags/python/"/>
    
      <category term="KD" scheme="https://koreal6803.github.io/tags/KD/"/>
    
      <category term="程式設計" scheme="https://koreal6803.github.io/tags/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/"/>
    
  </entry>
  
  <entry>
    <title>如何定義KD鈍化</title>
    <link href="https://koreal6803.github.io/KD1/"/>
    <id>https://koreal6803.github.io/KD1/</id>
    <published>2017-11-14T14:22:16.000Z</published>
    <updated>2017-11-15T01:38:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>謝謝大家的鼓勵，最近有點太忙了，加上懶惰蟲上身，上禮拜中斷了XD，這禮拜會繼續加油！希望可以知道大家最想要看什麼，有看到留言說希望可以增加 python 有關的教學文！收到了，甚至可以更仔細說明，例如爬哪個網站之類的，我都可以幫你寫喔！大家想要看什麼可以在下面留言！</p><p>今天先來看一下KD值好了，畢竟都還沒有看到太多指標相關的文章，其實KD值是非常簡單的，但在這邊我不想要介紹公式，因為太無聊了，而且每次看每次忘，我只想介紹如何看KD，以及參數如何設定：</p><h3 id="KD-的意義"><a href="#KD-的意義" class="headerlink" title="KD 的意義"></a>KD 的意義</h3><p>KD就是像坊間說的，兩條線，K跟D，一條反應較快，一條慢，都介於0～100之間。其意義在於股票在n天之內的相對位置，相對位置就是指n天內的最高最低，將當前的股價做normalize。</p><p>給一個簡單的例子，例如今天全班考試，有人拿30分，請問他考的好不好？</p><p>答案是：不知道，因為沒有辦法比較，說不定考卷很難，30分就是全班最高分了！要是考卷出太難，大家的成績介於10～30之間，那老師就可以做 normalize 讓成績分佈好看一點：</p><p>新成績 = ( 成績 - 10 ) / (30 - 10)</p><p>這樣子，考最好的人就是100分，而考最爛的人就是0分，這個就是KD指標的意義，而每個學生的成績，就是每日的收盤價。</p><p>最後我們將 新成績 對時間平滑一次，變成K值，再對K值平滑一次，變成D值。</p><h3 id="KD-的參數"><a href="#KD-的參數" class="headerlink" title="KD 的參數"></a>KD 的參數</h3><p>介紹完之後，K D 指標的參數就很好理解了：</p><ol><li>9天：只考慮9天內的最高最低</li><li>3天：K的平滑</li><li>3天：D的平滑</li></ol><p>平滑數字越大，數字變動越慢，雜訊越少<br>平滑數字越小，數字變動越快，雜訊越多</p><p>我們用台積電為例子：</p><center><img src="/KD1/tsmc.png" alt="KD（9、3、3）" title="KD（9、3、3）"></center><p>以上就是用正統的參數：9、3、3的KD指標（橘色、綠色），紫色是股價，可以看到KD值低檔交叉，算是好買點，最近就等著台積點低於20 XDD，（隨便說的，不是投資建議），我們試著換一個參數（9、6、6）看看：</p><center><img src="/KD1/tsmc2.png" alt="KD（9、6、6）" title="KD（9、6、6）"></center><p>可以看到曲線比較平滑一點，且K跟D差距比較明顯，相較於第一張圖，8月初比較不會有雜訊，但是反應變慢很多。</p><h3 id="KD-坊間策略"><a href="#KD-坊間策略" class="headerlink" title="KD 坊間策略"></a>KD 坊間策略</h3><p>大家都說<br>K超越D時，代表黃金交叉，可以買進<br>K落於D時，代表死亡交叉，可以賣出</p><p>真的是這樣嗎？讓我們來看看：</p><p>黃金交叉買，死亡交叉賣：</p><p>參數（9,3,3）勝率：0.386<br>參數（45,15,15）勝率：0.407<br>參數（180,60,60）勝率：0.364</p><p>以下是這三個參數的獲利曲線：</p><center><img src="/KD1/summary.png" alt="坊間策略歷史績效圖" title="坊間策略歷史績效圖"></center><p>結果好像不太好，看來真的不太能直接用，尤其短週期的KD，進出太平凡，導致手續費飆高，根本就是一直賠錢（紅色），用長週期的KD才稍微好轉。而藍線（不考慮手續費），則是中間的（類似週KD）表現比較好，但總之效果都不太好XD。</p><h3 id="KD-鈍化"><a href="#KD-鈍化" class="headerlink" title="KD 鈍化"></a>KD 鈍化</h3><p>另外一個網路上的偏方：KD鈍化，但大家沒有定義什麼時候賣，也沒有數據顯示幾天賣比較好，於是我們就來做個實驗：</p><p>買入條件：k, d （參數為 9，9，3）都大於80，至少 n 天則買入<br>賣出條件：m 天賣出</p><p>當然還有很多種買法我沒測過，有興趣的話可以在下面留言，我幫你測！</p><center><img src="/KD1/kdbest.png" alt="獲利高低圖" title="獲利高低圖"></center><p>色溫越暖，代表10年獲利越高，這張圖的 x軸 為 m 天， y軸 為 KD大於80 至少 n 天，可以發現，幾乎十幾個交易日賣出是最保險的，而5~6天連續高檔，代表鈍化，會有比較好的效果，第十天突然異軍突起，超紅，可能有些股票末路狂飆吧。。。</p><p>然而上述是不考慮手續費的情況，所以當我們將最好的一組參數(10,12)拿來跑回測，會是這個樣子：</p><center><img src="/KD1/kdbesteq.png" alt="獲利高低圖" title="獲利高低圖"></center><p>藍線代表沒有考慮手續費，一飛沖天<br>紅現代表考慮手續費，完全沒賺到什麼錢</p><p>看來手續費真的差很大，短線選股真的是比較困難，但滿有潛力的就是了。</p><p>以下是我調整後覺得最好的參數：</p><p>KD（5、3、3）連續10天大於75時買進 30 天</p><center><img src="/KD1/bestforself.png" alt="最後的成果" title="最後的成果"></center><p>扣除手續費後終於贏過大盤！不知道KD拿來加入其它策略效果如何？<br>另外，也可以跟我說想要看到哪一類的文章，或有什麼技術上的問題，都歡迎留言喔！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;謝謝大家的鼓勵，最近有點太忙了，加上懶惰蟲上身，上禮拜中斷了XD，這禮拜會繼續加油！希望可以知道大家最想要看什麼，有看到留言說希望可以增加 python 有關的教學文！收到了，甚至可以更仔細說明，例如爬哪個網站之類的，我都可以幫你寫喔！大家想要看什麼可以在下面留言！&lt;/p&gt;
      
    
    </summary>
    
      <category term="指標分析" scheme="https://koreal6803.github.io/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/"/>
    
      <category term="技術面" scheme="https://koreal6803.github.io/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/%E6%8A%80%E8%A1%93%E9%9D%A2/"/>
    
    
      <category term="如何買股票" scheme="https://koreal6803.github.io/tags/%E5%A6%82%E4%BD%95%E8%B2%B7%E8%82%A1%E7%A5%A8/"/>
    
      <category term="選股策略" scheme="https://koreal6803.github.io/tags/%E9%81%B8%E8%82%A1%E7%AD%96%E7%95%A5/"/>
    
      <category term="歷史回測" scheme="https://koreal6803.github.io/tags/%E6%AD%B7%E5%8F%B2%E5%9B%9E%E6%B8%AC/"/>
    
      <category term="簡易策略" scheme="https://koreal6803.github.io/tags/%E7%B0%A1%E6%98%93%E7%AD%96%E7%95%A5/"/>
    
  </entry>
  
  <entry>
    <title>Python：利用Pandas輕鬆選股</title>
    <link href="https://koreal6803.github.io/Python%EF%BC%9A%E5%88%A9%E7%94%A8Pandas%E8%BC%95%E9%AC%86%E9%81%B8%E8%82%A1/"/>
    <id>https://koreal6803.github.io/Python：利用Pandas輕鬆選股/</id>
    <published>2017-11-08T14:16:44.000Z</published>
    <updated>2017-12-12T09:56:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇的Python教學中，我們學會了怎麼爬財報，但是爬完的資料要怎麼運用呢？這篇會給大家一些方向。<br>那篇有點不好意思，好像有兩個package沒有import，下次發現的話，可以在下方留言告訴我，我會盡快更正。</p><p>今天這篇的前置作業，請參考<a href="/Python-財報爬蟲-1-綜合損益表/">連結</a>把當中的function給copy過來，然後就開始吧！</p><h3 id="資料處理"><a href="#資料處理" class="headerlink" title="資料處理"></a>資料處理</h3><p>首先，我們要先使用這個function，可以直接在jupyter視窗內輸入，來取得爬取今天的主角：”營益分析彙總表”</p><figure class="highlight python"><figcaption><span>利用上次的爬蟲取得資料</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">df = financial_statement(<span class="number">107</span>, <span class="number">2</span>, <span class="string">'營益分析彙總表'</span>)</div><div class="line">df</div></pre></td></tr></table></figure><p>第一行，我們將 “營益分析彙總表” 儲存在 df 這個變數之中，<br>第二行，我們希望將 df 給顯示出來，看一下它長什麼樣子<br>第二行的功能是只有在jupyter 這個IDE才看的到喔～假如是寫在python script的話，就要用 print(df) 。<br>假如一切OK就會是以下的樣子：</p><center><img src="/Python：利用Pandas輕鬆選股/df.png" alt="成功取得報表" title="成功取得報表"></center><p>我們觀察一下這張表，有一行真的詭異：”合計：共 808 家” ，這行完全沒有任何可以用的資料，所以我們將它刪除：</p><figure class="highlight python"><figcaption><span>刪除其中一行</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df = df.drop([<span class="string">'合計：共 808 家'</span>], axis=<span class="number">1</span>)</div></pre></td></tr></table></figure><p>接下來我們發現 index （每一列）的命名很怪，怎麼用 1,2,3… 來命名呢，應該要用股票名稱！？<br>我們將股票的名稱當成新的 index：</p><figure class="highlight python"><figcaption><span>將index換成股票名稱</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df = df.set_index([<span class="string">'股票名稱'</span>])</div></pre></td></tr></table></figure><p>最後一步，我們希望資料欄位中，所有的元素都是 float ，所以要做一次轉換：</p><figure class="highlight python"><figcaption><span>轉換成數值</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df = df.astype(float)</div></pre></td></tr></table></figure><center><img src="/Python：利用Pandas輕鬆選股/processed.png" alt="處理完後的資料" title="處理完後的資料"></center><h3 id="資料處理一行版"><a href="#資料處理一行版" class="headerlink" title="資料處理一行版"></a>資料處理一行版</h3><p>這樣就沒問題了！其實有個更快速的寫法，將以上三件事情寫成一行：</p><figure class="highlight python"><figcaption><span>一行直接處理</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df = df.drop([<span class="string">'合計：共 808 家'</span>], axis=<span class="number">1</span>).set_index([<span class="string">'公司名稱'</span>]).astype(float)</div></pre></td></tr></table></figure><p>這樣就可以一次處理好！</p><h3 id="簡單的取出行列："><a href="#簡單的取出行列：" class="headerlink" title="簡單的取出行列："></a>簡單的取出行列：</h3><p>我想單選出毛利率：</p><figure class="highlight python"><figcaption><span>取得毛利率</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df[<span class="string">'毛利率(%)(營業毛利)/(營業收入)'</span>]</div></pre></td></tr></table></figure><center><img src="/Python：利用Pandas輕鬆選股/series.png" alt="單欄毛利率" title="單欄毛利率"></center><p>假如今天我只想看 台積電 表現如何：</p><figure class="highlight python"><figcaption><span>取得台積電資料</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df.loc[<span class="string">'台積電'</span>]</div></pre></td></tr></table></figure><p>取每一欄，跟取每一列，語法不太一樣喔！要小小注意一下。</p><center><img src="/Python：利用Pandas輕鬆選股/tsmc.png" alt="台積電資料" title="台積電資料"></center><p>假如我想同時看 台積電 跟 聯發科：</p><figure class="highlight python"><figcaption><span>取得TSMC跟MTK的資料</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df.loc[[<span class="string">'台積電'</span>, <span class="string">'聯發科'</span>]]</div></pre></td></tr></table></figure><center><img src="/Python：利用Pandas輕鬆選股/tsmcmtk.png" alt="台積電跟聯發科的資料" title="台積電跟聯發科的資料"></center><h3 id="數值分析"><a href="#數值分析" class="headerlink" title="數值分析"></a>數值分析</h3><p>接下來我們稍微分析一下這個表中的數字：<br><figure class="highlight python"><figcaption><span>數值分析</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df.describe()</div></pre></td></tr></table></figure><br>這樣簡單一行，就可以得到每一欄的數值分析，當初我知道這個 df.describe() 也覺得很神。</p><center><img src="/Python：利用Pandas輕鬆選股/describe.png" alt="數值分析" title="數值分析"></center><h3 id="毛利率分佈圖"><a href="#毛利率分佈圖" class="headerlink" title="毛利率分佈圖"></a>毛利率分佈圖</h3><p>只要簡單一行，我們就可以看到全台灣的上市公司，毛利率分佈圖：</p><figure class="highlight python"><figcaption><span>毛利率分佈圖</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">％matplotlib inline</div><div class="line">df[<span class="string">'毛利率(%)(營業毛利)/(營業收入)'</span>].hist(bins=range(<span class="number">-100</span>,<span class="number">100</span>))</div></pre></td></tr></table></figure><center><img src="/Python：利用Pandas輕鬆選股/dis.png" alt="毛利率分佈圖" title="毛利率分佈圖"></center><h3 id="選股"><a href="#選股" class="headerlink" title="選股"></a>選股</h3><p>選股也很簡單，只要寫成以下條件：</p><figure class="highlight python"><figcaption><span>條件</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cond1 = df[<span class="string">'毛利率(%)(營業毛利)/(營業收入)'</span>].astype(float) &gt; <span class="number">20</span></div><div class="line">cond2 = df[<span class="string">'營業利益率(%)(營業利益)/(營業收入)'</span>].astype(float) &gt; <span class="number">5</span></div></pre></td></tr></table></figure><p>就是說 第一個欄位：毛利率，我們希望找出大於20的 股票<br>另外呢 第二個欄位：營業利益率，我們希望找出大於5的 股票</p><p>那我們就可以用這兩個條件來選股：</p><figure class="highlight python"><figcaption><span>選股</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df[cond1 &amp; cond2]</div></pre></td></tr></table></figure><center><img src="/Python：利用Pandas輕鬆選股/select.png" alt="篩選出來的股票" title="篩選出來的股票"></center><p>搭啦！其實外面的選股軟體也就這樣而已啦！還收費這麼貴XDD 如果你覺得觀賞這個blog有點收穫，記得存到我的最愛定期觀看喔！我每個禮拜都會有一些更新。</p><p>這次教學的檔案：<a href="/Python：利用Pandas輕鬆選股/選股.ipynb" title="notebook.ipynb檔">notebook.ipynb檔</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一篇的Python教學中，我們學會了怎麼爬財報，但是爬完的資料要怎麼運用呢？這篇會給大家一些方向。&lt;br&gt;那篇有點不好意思，好像有兩個package沒有import，下次發現的話，可以在下方留言告訴我，我會盡快更正。&lt;/p&gt;
&lt;p&gt;今天這篇的前置作業，請參考&lt;a href
      
    
    </summary>
    
      <category term="財經Python教學" scheme="https://koreal6803.github.io/categories/%E8%B2%A1%E7%B6%93Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="python" scheme="https://koreal6803.github.io/tags/python/"/>
    
      <category term="選股" scheme="https://koreal6803.github.io/tags/%E9%81%B8%E8%82%A1/"/>
    
      <category term="程式設計" scheme="https://koreal6803.github.io/tags/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/"/>
    
  </entry>
  
  <entry>
    <title>超短線上影黑密技！</title>
    <link href="https://koreal6803.github.io/%E8%B6%85%E7%9F%AD%E7%B7%9A%E4%B8%8A%E5%BD%B1%E9%BB%91%E5%AF%86%E6%8A%80%EF%BC%81/"/>
    <id>https://koreal6803.github.io/超短線上影黑密技！/</id>
    <published>2017-11-03T17:44:31.000Z</published>
    <updated>2017-11-03T20:39:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>很多來拜訪本blog的人，都是搜尋 “財報狗” 來的，大部分都是價值投資策略，而沒有使用技術分析，或曾經使用技術分析，因為太難用了而放棄。價值投資跟技術分析最大的差異是，價值投資看的財報是經過嚴格審核的精確數字，而技術分析是在看雜訊中找規律。</p><p>有人會說價值投資，是學會看一家公司的價值，而不像技術分析，是在玩股票。我覺得各有各的好，都是在一堆數字裡面找規律，只要不要被股票玩，哪一種策略我都願意接受XDD。</p><p>今天想當一下標題黨，我幫這個策略取了一個超級中二的名字：”超短線上影黑密技”，無論看幾眼都覺得很彆扭，但是還是讓我一一的解釋每個字的用意：</p><h2 id="超短線"><a href="#超短線" class="headerlink" title="超短線"></a>超短線</h2><p>這個絕對是 “日” 週期裡面，最短的策略了，因為這個策略持股一天隔天直接賣出，適合不想要跟某支股票產生愛恨情仇，喜歡斬釘截鐵，無情操作的人。</p><h2 id="上影"><a href="#上影" class="headerlink" title="上影"></a>上影</h2><p>這絕對不是火影忍者裡的上忍、火影，其實是個上影線策略，也就是當看到上影線，那代表這支股票可以空，當然也沒這麼簡單，要有一層層過濾。</p><h2 id="黑"><a href="#黑" class="headerlink" title="黑"></a>黑</h2><p>黑就是指下跌的意思，這是一個空股票的策略，我不常寫空股票的策略，因為本身沒有在融資融券，但就是因為很少有人空股票，這個策略才沒有因為被挖掘而失效，放空有時候比看多的策略好寫。</p><h2 id="密技"><a href="#密技" class="headerlink" title="密技"></a>密技</h2><p>好啦，其實這也不算什麼密技，上影線大家也不是不知道：</p><center><img src="/超短線上影黑密技！/pp.png" alt="橘色為權益曲線" title="橘色為權益曲線"></center><p>大家都說看到上影線，代表要下跌了，但是這是很不負責任的介紹，因為沒人跟你講會跌多少？上影線多長算長？什麼時候買賣？完全沒有數據，頂多是附圖說，你看這支股票，上影線出現後一路跌。</p><h2 id="策略人多口雜，沒有回測看看就好"><a href="#策略人多口雜，沒有回測看看就好" class="headerlink" title="策略人多口雜，沒有回測看看就好"></a>策略人多口雜，沒有回測看看就好</h2><p>同樣上影線，可以找到100張K線圖，驗證之後真的會跌，反過來，也可以找到100張K線圖，驗證之後其實會漲。</p><p>看過很多自稱是技術分析高手，分享一些方法，KD、MACD、OBV什麼都用上了，回測起來績效不太好，也不知道他是靠投資掙錢，還是靠嘴掙錢。也看過一些人，突然PO文說自己打開多年投資經驗的任督二脈，把blog加密起來，付費觀看，火紅一時。然而過了半年，那個人不見了，消失在茫茫股海中，應該是他的策略就好這麼幾個月，之後就爛掉了XDD。</p><h2 id="回測的重要性"><a href="#回測的重要性" class="headerlink" title="回測的重要性"></a>回測的重要性</h2><p>所以我覺得回測很重要，才能知道是否安穩的獲利，而且還不用每天盯盤。可能有人會反問： W 底要怎麼回測？有些型態學根本不可能寫程式怎麼辦？要是我的話，就會選擇不用，反正還有其它的策略可以用，我比較膽小，只用有驗證過的策略XD。</p><h2 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h2><p>突然啪啦啪啦寫了一堆，不好意思讓各位眼睛痛了，以下就是本篇策略：</p><ul><li>上影線佔 60% （（高 - max(收, 開)）／（高 - 低）&gt; 0.6）</li><li>突然放量 （成交量 &gt; 十日均量 * 4）</li><li>流動率高 （十日均量 &gt; 1000）</li><li>股票不在高檔 （收盤 - 120日最低價）/ (（120日最高價 - 120日最低價）&lt; 0.7</li></ul><p>第四條拿出來說明一下，高檔的股票，有時候會被主力炒作，太飆了，還是不要拿來放空比較好XD。</p><p>以下的權益曲線是空1天，即回補，我另外有測試n天的，基本上獲利更高，但曲線比較不好看。</p><center><img src="/超短線上影黑密技！/eq.png" alt="橘色為權益曲線" title="橘色為權益曲線"></center><p>但這個策略沒有加上手續費，槓桿是調整成0，但假如考慮融券手續費，效果可能就沒那麼好就是了，當沖手續費低會更好？滿有可能的。</p><p>下圖是 賣出/買入 價格的漲跌分佈圖：</p><center><img src="/超短線上影黑密技！/ratio.png" alt="漲跌分佈圖" title="漲跌分佈圖"></center><p>我們可以看到，這些股票下跌（小於1）的數目真的比較多（橘色），然而加上手續費（約千分之8），後，就沒有這麼明顯了（淺藍色），手續費多少是關鍵！像我這種散戶，手續費太高自然是無法使用這個策略QQ。</p><center><img src="/超短線上影黑密技！/ns.png" alt="每日股票持有數量" title="每日股票持有數量"></center><p>可以看到每年都只買了超少次，而且快進快出，大部分時候是空手狀態，很輕鬆。</p><center><img src="/超短線上影黑密技！/md.png" alt="dropdown" title="dropdown"></center><p>可以看到最大虧損也不是很嚴重，尤其時近期，幾乎很少虧損到20%的投資資產。</p><p>當然，大部分的策略看看就好，這個策略也是（由於手續費的關係），重點應該是學到一些東西，以下列舉此篇的重點：</p><ul><li>用簡單的公式看股價高檔低檔（條件4）</li><li>股票不再高檔、近期上影線放量，假如想放空，可以空n天，(n&lt;10)回測獲利都是很可觀，持有時間長，股價漲跌波動大，可以淡化手續費的影響，但持有時間越長，權益曲線越不美。</li><li>股票不在高檔、近期上影線放量，假如想買多，隔幾天再買入較可能買到更好的價格！（假如你用的是長線策略）</li></ul><p>假如大家有興趣，我想找時間來跑一些統計結果，看看上影線對於股價的影響。假如覺得本blog還可以的話，可以定期來觀看～我每個禮拜都會更新幾篇喔！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很多來拜訪本blog的人，都是搜尋 “財報狗” 來的，大部分都是價值投資策略，而沒有使用技術分析，或曾經使用技術分析，因為太難用了而放棄。價值投資跟技術分析最大的差異是，價值投資看的財報是經過嚴格審核的精確數字，而技術分析是在看雜訊中找規律。&lt;/p&gt;
&lt;p&gt;有人會說價值投資
      
    
    </summary>
    
      <category term="指標分析" scheme="https://koreal6803.github.io/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/"/>
    
      <category term="技術面" scheme="https://koreal6803.github.io/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/%E6%8A%80%E8%A1%93%E9%9D%A2/"/>
    
    
      <category term="如何買股票" scheme="https://koreal6803.github.io/tags/%E5%A6%82%E4%BD%95%E8%B2%B7%E8%82%A1%E7%A5%A8/"/>
    
      <category term="選股策略" scheme="https://koreal6803.github.io/tags/%E9%81%B8%E8%82%A1%E7%AD%96%E7%95%A5/"/>
    
      <category term="歷史回測" scheme="https://koreal6803.github.io/tags/%E6%AD%B7%E5%8F%B2%E5%9B%9E%E6%B8%AC/"/>
    
      <category term="簡易策略" scheme="https://koreal6803.github.io/tags/%E7%B0%A1%E6%98%93%E7%AD%96%E7%95%A5/"/>
    
  </entry>
  
  <entry>
    <title>Python 財報爬蟲</title>
    <link href="https://koreal6803.github.io/Python-%E8%B2%A1%E5%A0%B1%E7%88%AC%E8%9F%B2-1-%E7%B6%9C%E5%90%88%E6%90%8D%E7%9B%8A%E8%A1%A8/"/>
    <id>https://koreal6803.github.io/Python-財報爬蟲-1-綜合損益表/</id>
    <published>2017-11-02T21:19:27.000Z</published>
    <updated>2017-12-12T09:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>本系列已經介紹了各式各樣的爬蟲，從每天、每月，現在終於要季了，在尋找了各式各樣的網站，交叉比對之下，發現<a href="http://mops.twse.com.tw/mops/web/t163sb04" rel="external nofollow noopener noreferrer" target="_blank">公開資訊觀測站的總報表</a>還滿好抓的，所以就從這個網站下手。</p><center><img src="/Python-財報爬蟲-1-綜合損益表/thumbnail.png" alt="我爬我爬我爬爬爬" title="我爬我爬我爬爬爬"></center><p>Python中有個非常好用的package，叫做pandas，利用它我們就可以簡潔的把網頁上的表格，轉換成dataframe，也就是整理成程式看的懂的表格，我們幾乎不需要做太多的處理！這也是我喜歡用python一點。</p><p>這邊我用的是python3 喔～可能要注意一下，另外pandas的版本不一樣，可能會導致網頁轉dataframe的時候，有點小不一樣，可能要稍微檢查一下，我是用0.20.3這個版本。</p><figure class="highlight python"><figcaption><span>財報爬蟲</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">financial_statement</span><span class="params">(year, season, type=<span class="string">'綜合損益彙總表'</span>)</span>:</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> year &gt;= <span class="number">1000</span>:</div><div class="line">        year -= <span class="number">1911</span></div><div class="line">        </div><div class="line">    <span class="keyword">if</span> type == <span class="string">'綜合損益彙總表'</span>:</div><div class="line">        url = <span class="string">'http://mops.twse.com.tw/mops/web/ajax_t163sb04'</span></div><div class="line">    <span class="keyword">elif</span> type == <span class="string">'資產負債彙總表'</span>:</div><div class="line">        url = <span class="string">'http://mops.twse.com.tw/mops/web/ajax_t163sb05'</span></div><div class="line">    <span class="keyword">elif</span> type == <span class="string">'營益分析彙總表'</span>:</div><div class="line">        url = <span class="string">'http://mops.twse.com.tw/mops/web/ajax_t163sb06'</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">'type does not match'</span>)</div><div class="line"></div><div class="line">    r = requests.post(url, &#123;</div><div class="line">        <span class="string">'encodeURIComponent'</span>:<span class="number">1</span>,</div><div class="line">        <span class="string">'step'</span>:<span class="number">1</span>,</div><div class="line">        <span class="string">'firstin'</span>:<span class="number">1</span>,</div><div class="line">        <span class="string">'off'</span>:<span class="number">1</span>,</div><div class="line">        <span class="string">'TYPEK'</span>:<span class="string">'sii'</span>,</div><div class="line">        <span class="string">'year'</span>:<span class="string">'103'</span>,</div><div class="line">        <span class="string">'season'</span>:<span class="string">'01'</span>,</div><div class="line">    &#125;)</div><div class="line">    </div><div class="line">    r.encoding = <span class="string">'utf8'</span></div><div class="line">    dfs = pd.read_html(r.text)</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i, df <span class="keyword">in</span> enumerate(dfs):</div><div class="line">        df.columns = df.iloc[<span class="number">0</span>]</div><div class="line">        dfs[i] = df.iloc[<span class="number">1</span>:]</div><div class="line">        </div><div class="line">    df = pd.concat(dfs).applymap(<span class="keyword">lambda</span> x: x <span class="keyword">if</span> x != <span class="string">'--'</span> <span class="keyword">else</span> np.nan)</div><div class="line">    df = df[df[<span class="string">'公司代號'</span>] != <span class="string">'公司代號'</span>]</div><div class="line">    df = df[~df[<span class="string">'公司代號'</span>].isnull()]</div><div class="line">    <span class="keyword">return</span> df</div><div class="line"></div></pre></td></tr></table></figure><p>這個function的用法，就跟月爬蟲是一樣的，可以直接輸入西元或國曆，然後第n季，只能輸入1～4季喔～不然會當掉，最後還要輸入哪一種財報：</p><ul><li>綜合損益彙總表</li><li>資產負債彙總表</li><li>營益分析彙總表</li></ul><p>都可以爬取喔！以下就是利用這個function所爬取的資料</p><center><img src="/Python-財報爬蟲-1-綜合損益表/result.png" alt="使用function的方法截圖" title="使用function的方法截圖"></center><p>大家可以看到有些columns怪怪的，例如 “合計：共 808 家” 這個是什麼鬼XDD，由於我一次爬了三個表，這一點小問題應該還好啦！XDD，可以再寫一行code刪除該列就好了。</p><p>基本上資料都是對齊的，不用太擔心。</p><p>爬完之後就交給大家自由發揮囉～～可以做很多事情。<br>總算各種股價、財報、月報的爬蟲都分享完了～</p><p>接下來就是真的利用這些資料來選股囉！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列已經介紹了各式各樣的爬蟲，從每天、每月，現在終於要季了，在尋找了各式各樣的網站，交叉比對之下，發現&lt;a href=&quot;http://mops.twse.com.tw/mops/web/t163sb04&quot; rel=&quot;external nofollow noopener n
      
    
    </summary>
    
      <category term="財經Python教學" scheme="https://koreal6803.github.io/categories/%E8%B2%A1%E7%B6%93Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="python" scheme="https://koreal6803.github.io/tags/python/"/>
    
      <category term="選股" scheme="https://koreal6803.github.io/tags/%E9%81%B8%E8%82%A1/"/>
    
      <category term="程式設計" scheme="https://koreal6803.github.io/tags/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/"/>
    
  </entry>
  
  <entry>
    <title>外資大賣，反而要買！？</title>
    <link href="https://koreal6803.github.io/%E8%B7%9F%E8%91%97%E5%A4%96%E8%B3%87%E8%B2%B7%E8%82%A1%E7%A5%A8/"/>
    <id>https://koreal6803.github.io/跟著外資買股票/</id>
    <published>2017-10-30T13:57:49.000Z</published>
    <updated>2017-10-31T10:42:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>外資近年來幾乎稱霸台股，每天台股上上下下，都得看它臉色，今天我們來進行簡單的參數優化，看看跟隨外資買賣有沒有搞頭！</p><h3 id="最佳化外資買賣策略"><a href="#最佳化外資買賣策略" class="headerlink" title="最佳化外資買賣策略"></a>最佳化外資買賣策略</h3><p>假設 n 天內外資總買賣超超過 a 張，則買入，而低於 -a 張，就賣出，我們可以得到一下這張表：</p><center><img src="/跟著外資買股票/color.png" alt="不同參數的漲跌幅度" title="不同參數的漲跌幅度"></center><p>在上圖中，跑了25種不同的回測，每一次回測，n跟a的值都不一樣，紅色代表獲利較多的策略，而藍色代表獲利較少的策略，我們發現 a = 0 的時候結果普遍比較好，另外 n=10~30 天都是合理的選擇，太高或太低不夠具有代表性。</p><p>當然這樣的條件其實還是太弱了，完全沒辦法當作一個策略，一定得配合其它的條件，目前開發的策略中，我也有加入這個條件，有些策略無效，但有些績效明顯上升很多，可以把它想成一個助攻手。假如你本身也有寫偏短線的回測，可以將 外資10天買賣超 &gt; 0 這個條件加入看看，有時候效果會變好。然而，假如你沒有寫回測的話，其實外資買賣對你的影響有限，幾乎不需要管它。</p><h3 id="外資大買大賣，跟著操作？"><a href="#外資大買大賣，跟著操作？" class="headerlink" title="外資大買大賣，跟著操作？"></a>外資大買大賣，跟著操作？</h3><p>外資已經很進步了，這個時代並不是看外資大買，隔天股票就會漲了，甚至，看到外資大買，隔天最好還是別輕舉妄動比較好，以下我做了兩個實驗，一個是外資大買，一個是外資大賣，不考慮手續費：</p><ol><li>外資總買賣 - 昨天外資總買賣 &gt; 5000 （外資大買） 持該股兩天後賣出</li><li>外資總買賣 - 昨天外資總買賣 &lt; -5000 （外資大賣） 持該股兩天後賣出</li></ol><p>你以為一號策略比較好嗎？</p><p>錯…</p><p>我回測時也小震驚了一下，原來外資大買，隔天買入可能會不太好！還不如趁外資大賣的時候買。怎麼會這樣！？實在是太顛覆常理了…</p><center><img src="/跟著外資買股票/buysudden.png" alt="藍色為策略1號，橘色為策略2號" title="藍色為策略1號，橘色為策略2號"></center><p>上圖可以看出，策略2比策略1的報酬好很多。其結論是外資大買，請不要跟著買，因為說不定是外資太多人看了，導致股票隔天衝很高，導致買在高點。相反，大家看到外資大賣，也會恐慌性賣出，造成隔天開盤價格異常低，而剛好被我們買到了！賺到了短線價差。只能說，股票就是人性呀！大家還是太依賴外資籌碼了。總之假如你沒有好策略的話，請不要直接看外資來決定買什麼。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;外資近年來幾乎稱霸台股，每天台股上上下下，都得看它臉色，今天我們來進行簡單的參數優化，看看跟隨外資買賣有沒有搞頭！&lt;/p&gt;
&lt;h3 id=&quot;最佳化外資買賣策略&quot;&gt;&lt;a href=&quot;#最佳化外資買賣策略&quot; class=&quot;headerlink&quot; title=&quot;最佳化外資買賣策略
      
    
    </summary>
    
      <category term="指標分析" scheme="https://koreal6803.github.io/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/"/>
    
      <category term="籌碼面" scheme="https://koreal6803.github.io/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/%E7%B1%8C%E7%A2%BC%E9%9D%A2/"/>
    
    
      <category term="如何買股票" scheme="https://koreal6803.github.io/tags/%E5%A6%82%E4%BD%95%E8%B2%B7%E8%82%A1%E7%A5%A8/"/>
    
      <category term="選股策略" scheme="https://koreal6803.github.io/tags/%E9%81%B8%E8%82%A1%E7%AD%96%E7%95%A5/"/>
    
      <category term="歷史回測" scheme="https://koreal6803.github.io/tags/%E6%AD%B7%E5%8F%B2%E5%9B%9E%E6%B8%AC/"/>
    
      <category term="簡易策略" scheme="https://koreal6803.github.io/tags/%E7%B0%A1%E6%98%93%E7%AD%96%E7%95%A5/"/>
    
  </entry>
  
  <entry>
    <title>超簡單用python抓取每月營收</title>
    <link href="https://koreal6803.github.io/%E8%B6%85%E7%B0%A1%E5%96%AE%E7%94%A8python%E6%8A%93%E5%8F%96%E6%AF%8F%E6%9C%88%E7%87%9F%E6%94%B6/"/>
    <id>https://koreal6803.github.io/超簡單用python抓取每月營收/</id>
    <published>2017-10-28T18:30:39.000Z</published>
    <updated>2017-12-12T09:56:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天承接上次的超簡單python系列，教大家如何得到每家企業每個月的營收。這個系列的最終目的就是讓大家可以創造自己的投資自動化程式，甚至擁有自己的看盤軟體。</p><p>真的不要把程式設計想像的很難，感覺爬2000多支股票，並整理資料，好像是一件很累很痛苦的是情，但真的只需要30行，你可能會覺得這些代碼真的太短了，但真的就是這麼短，然而這必須係建立在python或是R，這些package豐富的腳本語言才有可能辦到，這兩個語言都不錯，但我比較喜歡寫python就是了XD，因為python還可以做很多酷炫的是情，例如寫server，或是一些自動化工具，然而R好像沒有這麼多功能？</p><p>那我們就來爬取吧！首先先決定要爬哪個網頁，我選擇的是<a href="http://mops.twse.com.tw/nas/t21/sii/t21sc03_103_2_0.html" rel="external nofollow noopener noreferrer" target="_blank">TWSE官方網頁</a><br>它的網址是<br><a href="http://mops.twse.com.tw/nas/t21/sii/t21sc03_103_2_0.html" rel="external nofollow noopener noreferrer" target="_blank">http://mops.twse.com.tw/nas/t21/sii/t21sc03_103_2_0.html</a></p><p>各位有看到103這個數字嗎？其實這個就是年份，而緊接在後面的 “2” 就是月份，所以只要改動這兩個值，我們就可以下載不同年月的歷史資訊：</p><figure class="highlight python"><figcaption><span>月爬蟲</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">monthly_report</span><span class="params">(year, month)</span>:</span></div><div class="line">    </div><div class="line">    <span class="comment"># 假如是西元，轉成民國</span></div><div class="line">    <span class="keyword">if</span> year &gt; <span class="number">1990</span>:</div><div class="line">        year -= <span class="number">1911</span></div><div class="line">    </div><div class="line">    <span class="comment"># 下載該年月的網站，並用pandas轉換成 dataframe</span></div><div class="line">    html_df = pd.read_html(<span class="string">'http://mops.twse.com.tw/nas/t21/sii/t21sc03_'</span>+str(year)+<span class="string">'_'</span>+str(month)+<span class="string">'_0.html'</span>)    </div><div class="line">    </div><div class="line">    <span class="comment"># 處理一下資料</span></div><div class="line">    df = html_df[<span class="number">0</span>].copy()</div><div class="line">    df = df[list(range(<span class="number">0</span>,<span class="number">10</span>))]</div><div class="line">    column_index = df.index[(df[<span class="number">0</span>] == <span class="string">'公司代號'</span>)][<span class="number">0</span>]</div><div class="line">    df.columns = df.iloc[column_index]</div><div class="line">    df[<span class="string">'當月營收'</span>] = pd.to_numeric(df[<span class="string">'當月營收'</span>], <span class="string">'coerce'</span>)</div><div class="line">    df = df[~df[<span class="string">'當月營收'</span>].isnull()]</div><div class="line">    df = df[df[<span class="string">'公司代號'</span>] != <span class="string">'合計'</span>]</div><div class="line">    <span class="keyword">return</span> df</div><div class="line"></div></pre></td></tr></table></figure><p>以上這段程式碼就是一個function可以在其它地方隨時呼叫，code真的超短，但這樣就夠了！</p><p>接下來我們隨意讀取任意年月份（可以用民國或是西元都支援）：</p><figure class="highlight python"><figcaption><span>月爬蟲</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># 民國100年1月</span></div><div class="line">monthly_report(<span class="number">100</span>,<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment"># 西元2011年1月</span></div><div class="line">monthly_report(<span class="number">1991</span>,<span class="number">1</span>)</div><div class="line"></div></pre></td></tr></table></figure><p>就會跑出以下的表格：</p><center><img src="/超簡單用python抓取每月營收/table.png" alt="月營收狀況" title="月營收狀況"></center><p>其實寫程式真的好簡單XDD，坊間財經軟體都好貴，不就是幾行code而已，是不是！<br>目前已經交完 日、月 的資料爬取了，下一次就是一季囉！</p><p>當然還有各式各樣可以爬的東西，有時間再跟大家介紹～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天承接上次的超簡單python系列，教大家如何得到每家企業每個月的營收。這個系列的最終目的就是讓大家可以創造自己的投資自動化程式，甚至擁有自己的看盤軟體。&lt;/p&gt;
&lt;p&gt;真的不要把程式設計想像的很難，感覺爬2000多支股票，並整理資料，好像是一件很累很痛苦的是情，但真的只
      
    
    </summary>
    
      <category term="財經Python教學" scheme="https://koreal6803.github.io/categories/%E8%B2%A1%E7%B6%93Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="python" scheme="https://koreal6803.github.io/tags/python/"/>
    
      <category term="選股" scheme="https://koreal6803.github.io/tags/%E9%81%B8%E8%82%A1/"/>
    
      <category term="程式設計" scheme="https://koreal6803.github.io/tags/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/"/>
    
  </entry>
  
  <entry>
    <title>本益成長比真的越低越好！？</title>
    <link href="https://koreal6803.github.io/%E6%AF%94%E6%9C%AC%E7%9B%8A%E6%AF%94%E6%9B%B4%E5%A5%BD%E7%94%A8%E7%9A%84%E6%9C%AC%E7%9B%8A%E6%AF%94%E6%88%90%E9%95%B7%E7%8E%87%EF%BC%81/"/>
    <id>https://koreal6803.github.io/比本益比更好用的本益比成長率！/</id>
    <published>2017-10-26T13:58:56.000Z</published>
    <updated>2017-10-28T19:31:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>很久之前有寫過 <strong>本益比</strong> 如何使用，<strong>本益比</strong> 就是看企業股價和獲利之間的關係，選擇小一點的本益比是可以幫助我們選到好股票的，但是每一家公司的本益比都有著天壤之別，所以必須要校正， <strong>本益成長比</strong> 就是一個本益比的進化版。<strong>本益成長比</strong> 不只可以看當下，還考慮了一家公司未來是否能繼續盈利一個指標。</p><p>以下是 <strong>本益成長比</strong> 的公式：</p><p>近4季稅後淨利年增率：(近4季稅後淨利總和 / 去年同期近4季稅後淨利總和 - 1) * 100%<br>本益成長比（PEG）：本益比/近4季稅後淨利年增率</p><p>看起來考慮了公司的成長，所以當PEG越小，代表 <strong>本益比</strong> 越小或是 <strong>淨利年增率</strong> 越大，對投資人來講都是好事情！</p><p>理論上是這樣，而實際上真的是這樣嗎？我們不妨接著看！</p><p>首先我們先算出當前所有上市上櫃其PEG的分佈圖：</p><center><img src="/比本益比更好用的本益比成長率！/dis.png" alt="PEG分佈圖" title="PEG分佈圖"></center><p>可以發現越接近0的越多公司，這種分佈還滿奇特的，我以為接近0的公司會很少才對，沒想到事實竟然跟我想像的相反，感覺好像很多公司的淨利年增率很猛！然而假如我哪裡做錯了，可以直接留言糾正我。</p><p>我們就將公司分成好幾組，每60天選擇PEG在只定範圍內的股票，就可以畫成下圖：</p><center><img src="/比本益比更好用的本益比成長率！/eq.png" alt="每組總資產隨時間變化圖" title="每組總資產隨時間變化圖"></center><p>簡直有夠亂…這說明了PEG難道無效？！感覺是真的很難分辨出越小越好，還是越大越好…，所以我們再畫另一張圖，更好的判斷PEG大小跟獲利的高低：</p><center><img src="/比本益比更好用的本益比成長率！/peg.png" alt="PEG變化與報酬率" title="PEG變化與報酬率"></center><p>圖中的X軸是PEG從小到大，而Y軸是平均獲利，我們發現，當PEG太大獲利真的很差。但當PEG非常小的時候，效果也非常不好。<br>PEG約等於0.5的時候，會有最好的獲利。</p><p>只能說PEG在台股可能不是非常的好用，PEG不能一味的追求越小越好，最好選擇PEG等於 0.5 左右的股票，歷史回測會有比較好的結果。</p><p>我覺得另一個可能的原因是，當PEG過小的時候，可能選入了一些短期內獲利爆起爆落的公司，其公司股價可能先盛後衰，造成投資上的虧損。但我不太確定，還必須做更多功課才能釐清。</p><p>總之以統計的結果來看，PEG並沒有特別顯著的功能，相較於其它介紹過的指標。也有可能是我實驗那裡做錯了，可以留言跟我討論，我會儘速更改！確保大家獲得正確的內容～！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很久之前有寫過 &lt;strong&gt;本益比&lt;/strong&gt; 如何使用，&lt;strong&gt;本益比&lt;/strong&gt; 就是看企業股價和獲利之間的關係，選擇小一點的本益比是可以幫助我們選到好股票的，但是每一家公司的本益比都有著天壤之別，所以必須要校正， &lt;strong&gt;本益成長比&lt;/
      
    
    </summary>
    
      <category term="指標分析" scheme="https://koreal6803.github.io/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/"/>
    
      <category term="基本面" scheme="https://koreal6803.github.io/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/%E5%9F%BA%E6%9C%AC%E9%9D%A2/"/>
    
    
      <category term="選股" scheme="https://koreal6803.github.io/tags/%E9%81%B8%E8%82%A1/"/>
    
      <category term="本益比" scheme="https://koreal6803.github.io/tags/%E6%9C%AC%E7%9B%8A%E6%AF%94/"/>
    
      <category term="指標" scheme="https://koreal6803.github.io/tags/%E6%8C%87%E6%A8%99/"/>
    
      <category term="PEG" scheme="https://koreal6803.github.io/tags/PEG/"/>
    
      <category term="本益成長比" scheme="https://koreal6803.github.io/tags/%E6%9C%AC%E7%9B%8A%E6%88%90%E9%95%B7%E6%AF%94/"/>
    
  </entry>
  
  <entry>
    <title>超簡單台股每日爬蟲教學</title>
    <link href="https://koreal6803.github.io/%E8%B6%85%E7%B0%A1%E5%96%AE%E5%8F%B0%E8%82%A1%E6%AF%8F%E6%97%A5%E7%88%AC%E8%9F%B2%E6%95%99%E5%AD%B8/"/>
    <id>https://koreal6803.github.io/超簡單台股每日爬蟲教學/</id>
    <published>2017-10-24T22:17:06.000Z</published>
    <updated>2017-12-12T09:56:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天教大家如何下載今日的股價，並從中篩選本益比較低的股票，重點是超簡單，只要15行以內就可以辦到！以後這個blog會偶爾釋放一些程式片段，讓大家組裝成一個功能健全的回測＋當日選股的架構。</p><p>大家最終最終會學到：</p><ol><li>如何爬取每日資訊</li><li>如何爬取財報</li><li>利用上述資料來篩選股票</li><li>觀察篩選後的股票在歷史回測中是否能獲利</li><li>每日計算當天獲利與明天操作</li></ol><p>只要長期追蹤這個blog，當我某天心血來潮就會放上一些code，讓大家能夠自行學習並拼裝成自己的系統，以下是我的系統的節圖：</p><center><img src="/超簡單台股每日爬蟲教學/magnet1.png" alt="磁力回測" title="磁力回測"></center><p>可以看到我的系統內每天都有數個選股策略在運行，選股策略每天會公布隔天的操作方式，也可以利用這個介面編寫回測，並驗證策略的效果。磁力回測是我們之前黑客松比賽用的名字，其實我們是台大黑客松第一名得獎團隊，後來又於中信金控黑客松得到第一名，才開始了量化回測之路，現在由於大家比較忙，目前只剩我還在使用這套系統而已XDD。</p><p>這套系統非常完善，我們編寫了幾套策略在上面，獲利還算OK，當然我不可能直接把這套系統公布出來，畢竟這是大家一起做的心血，然而有一些簡單卻重要的功能，我會在這個blog上面分享給大家。只要持續關注本blog，最後大家可以拼裝出自己的系統！</p><p>那就廢話不多說，來看看如何使用 python 爬取當天大盤，首先，我們得先安裝 python 的 package：</p><ol><li><a href="http://docs.python-requests.org/en/master/" rel="external nofollow noopener noreferrer" target="_blank">requests</a> ：幫我們抓取 csv 檔</li><li><a href="https://pandas.pydata.org/pandas-docs/stable/index.html" rel="external nofollow noopener noreferrer" target="_blank">pandas</a>：幫我們選股</li></ol><p>然後就可以開始了，首先抓取台股的資料表：</p><figure class="highlight python"><figcaption><span>crawler</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line">r = requests.post(<span class="string">'http://app.twse.com.tw/ch/trading/exchange/MI_INDEX/MI_INDEX.php'</span>, data=&#123;</div><div class="line">    <span class="string">'download'</span>: <span class="string">'csv'</span>,</div><div class="line">    <span class="string">'qdate'</span>:<span class="string">'106/10/24'</span>,</div><div class="line">    <span class="string">'selectType'</span>:<span class="string">'ALL'</span>,</div><div class="line">&#125;)</div><div class="line">r.encoding = <span class="string">'big5'</span></div><div class="line">df = pd.read_csv(StringIO(<span class="string">"\n"</span>.join([i.translate(&#123;ord(c): <span class="keyword">None</span> <span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">' '</span>&#125;) </div><div class="line">                                     <span class="keyword">for</span> i <span class="keyword">in</span> r.text.split(<span class="string">'\n'</span>) </div><div class="line">                                     <span class="keyword">if</span> len(i.split(<span class="string">'",'</span>)) == <span class="number">16</span> <span class="keyword">and</span> i[<span class="number">0</span>] != <span class="string">'='</span>])), header=<span class="number">0</span>)</div></pre></td></tr></table></figure><p>基本上這個 code 可以直接複製貼上就可以用了！我們可以把df印出來：</p><center><img src="/超簡單台股每日爬蟲教學/allstock.png" alt="台股當天所有上市上櫃公司資訊" title="台股當天所有上市上櫃公司資訊"></center><p>可以看到我們有了所有上市上櫃的股票，當天所有的資料！</p><p>接下來就是選股時間，我們想要選擇 本益比 &lt; 15 的所有股票：</p><figure class="highlight python"><figcaption><span>select stocks</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df[df[<span class="string">'本益比'</span>] &lt; <span class="number">15</span>]</div></pre></td></tr></table></figure><center><img src="/超簡單台股每日爬蟲教學/pe15.png" alt="當天本益比 < 15的股票" title="當天本益比 < 15的股票"></center><p>搭拉！是不是發現選股好簡單！<br>我們之後還會有更多的教學，讓大家不只是選取本益比，還有更多更多的財報數據喔！</p><p>敬請期待！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天教大家如何下載今日的股價，並從中篩選本益比較低的股票，重點是超簡單，只要15行以內就可以辦到！以後這個blog會偶爾釋放一些程式片段，讓大家組裝成一個功能健全的回測＋當日選股的架構。&lt;/p&gt;
&lt;p&gt;大家最終最終會學到：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何爬取每日資訊&lt;/li
      
    
    </summary>
    
      <category term="財經Python教學" scheme="https://koreal6803.github.io/categories/%E8%B2%A1%E7%B6%93Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="python" scheme="https://koreal6803.github.io/tags/python/"/>
    
      <category term="選股" scheme="https://koreal6803.github.io/tags/%E9%81%B8%E8%82%A1/"/>
    
      <category term="程式設計" scheme="https://koreal6803.github.io/tags/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/"/>
    
  </entry>
  
  <entry>
    <title>絕無僅有的超強指標！</title>
    <link href="https://koreal6803.github.io/%E7%B5%95%E7%84%A1%E5%83%85%E6%9C%89%E7%9A%84%E8%B6%85%E5%BC%B7%E6%8C%87%E6%A8%99%EF%BC%81/"/>
    <id>https://koreal6803.github.io/絕無僅有的超強指標！/</id>
    <published>2017-10-23T18:24:24.000Z</published>
    <updated>2017-10-28T19:33:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天介紹一個滿常使用的指標，這套指標是我個人發明的，外面絕對看不到，然而我只講個大概，可以自己去實做，或是去拿來衡量個股。</p><p>上一篇中，機器學習發現月收入是一個很好的指標，而且不能只看最近一個月，要一次看好幾個月，其實跟我做出來的實驗結論一致。月收入真的非常好用！</p><p>今天介紹的這個指標，其概念是：希望某股月營收越來越高，之後股價越容易上漲。<br>但是很難定義越來越高，因為有時候會有一些不規則的地方，我們必須要先做一道手續讓它看起來是一個升冪排列，如下圖：</p><center><img src="/絕無僅有的超強指標！/example.png" alt="橘色為某某公司的月營收，藍色為平均之後的月營收" title="橘色為某某公司的月營收，藍色為平均之後的月營收"></center><p>原本的月營收為橘色，雖然看起來有上漲的趨勢，但是參差不齊，所以很難寫成程式判斷條件。<br>可以看到我們把每三個月做一次平均，可以發現曲線變得更平滑了，而且變成升冪排列！</p><p>所以我們就可以寫一個條件，叫做：藍色線段連續N個月越來越大。</p><p>這樣篩選出來的股票真的很猛！</p><p>下圖可以看出，假如我們持有這個方法篩選出來的股票，光是這個單一指標從2008年到現在有5倍的績效，我們可是只用了這個指標而已！算是滿難能可貴的。</p><center><img src="/絕無僅有的超強指標！/eq.png" alt="橘色為指標選股的歷史回測，藍色是大盤" title="橘色為指標選股的歷史回測，藍色是大盤"></center><p>而且選出來很多股票，還有很多過濾的空間！可以從中再繼續篩選股票，這個是我動不動就會幫策略加上的一個條件！</p><center><img src="/絕無僅有的超強指標！/ns.png" alt="橘色為指標選股的歷史回測，藍色是大盤" title="橘色為指標選股的歷史回測，藍色是大盤"></center><p>其中還可以再篩選，例如本益比、股價淨值比等等，可以自由搭配！</p><p>這個指標有兩個參數：</p><ol><li>當我們要平滑月營收曲線時，取最近的 M 個值平均，產生新的曲線</li><li>新的曲線連續 N 個月不斷變高。</li></ol><p>M 跟 N 是很難決定的，我這邊所使用的參數是 M=4 跟 N=5，是試過所有參數的結果。<br>當然大家不一定要用這麼數學的方式，每一支股票拿來慢慢算。最簡單的方法就是用眼睛感覺，股票月營收從大趨勢看，有沒有越來越高，偶爾的參差不齊可以忽略。</p><p>以上就是個人覺得超好用的，且網路上沒人在分享的方法！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天介紹一個滿常使用的指標，這套指標是我個人發明的，外面絕對看不到，然而我只講個大概，可以自己去實做，或是去拿來衡量個股。&lt;/p&gt;
&lt;p&gt;上一篇中，機器學習發現月收入是一個很好的指標，而且不能只看最近一個月，要一次看好幾個月，其實跟我做出來的實驗結論一致。月收入真的非常好用
      
    
    </summary>
    
      <category term="指標分析" scheme="https://koreal6803.github.io/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/"/>
    
      <category term="基本面" scheme="https://koreal6803.github.io/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/%E5%9F%BA%E6%9C%AC%E9%9D%A2/"/>
    
    
      <category term="選股" scheme="https://koreal6803.github.io/tags/%E9%81%B8%E8%82%A1/"/>
    
      <category term="指標" scheme="https://koreal6803.github.io/tags/%E6%8C%87%E6%A8%99/"/>
    
  </entry>
  
  <entry>
    <title>利用Machine Learning 選股新手教學</title>
    <link href="https://koreal6803.github.io/%E5%88%A9%E7%94%A8Machine-Learning-%E9%81%B8%E8%82%A1%E6%96%B0%E6%89%8B%E6%95%99%E5%AD%B8/"/>
    <id>https://koreal6803.github.io/利用Machine-Learning-選股新手教學/</id>
    <published>2017-10-20T10:58:23.000Z</published>
    <updated>2017-12-12T09:56:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直在弄Machine Learning，都快忘記寫blog了，哈！</p><p>其實要machine選股真的很簡單！這篇blog就會帶大家從頭開始，用最簡單的方式，將Machine Learning實做！這邊只是給大家一個簡單的架構，可以自己去嘗試優化，讓它更聰明！以下是用mac或是linux的command line完成的，假如有任何錯誤或不懂的地方歡迎聯絡我喔～</p><center><img src="/利用Machine-Learning-選股新手教學/thumbnail.png" alt="我們今天用的是random forest model!" title="我們今天用的是random forest model!"></center><h3 id="1-取得資料"><a href="#1-取得資料" class="headerlink" title="1. 取得資料"></a>1. 取得資料</h3><p>只要寄到我的信箱，就會免費傳給你一個data.csv檔案，裡面就是training的資料，這個只能用於學術研究，請勿用於商業用途。</p><p>為什麼要這麼麻煩？！不能直接把連結公布於網站上就好了嗎？絕對沒有要收集email的意思，最主要是因為這資料的來源比較複雜。</p><h3 id="2-架設環境"><a href="#2-架設環境" class="headerlink" title="2. 架設環境"></a>2. 架設環境</h3><p>假如你已經會使用python了，那可以直接跳過這個步驟，假如不會的話，可以照著下面的步驟完成：</p><ol><li>到<a href="https://www.python.org/downloads/" rel="external nofollow noopener noreferrer" target="_blank">官網</a>下載<strong>Python3</strong>，並且安裝</li><li>安裝<a href="https://pip.pypa.io/en/stable/" rel="external nofollow noopener noreferrer" target="_blank">pip</a></li><li>安裝<a href="https://virtualenv.pypa.io/en/stable/" rel="external nofollow noopener noreferrer" target="_blank">virtualenv</a></li></ol><h4 id="為何要安裝pip呢？"><a href="#為何要安裝pip呢？" class="headerlink" title="為何要安裝pip呢？"></a>為何要安裝pip呢？</h4><p>pip可以幫我們下載Machine Learning所需要的package（也就是python的libraries）。</p><h4 id="為何要安裝-virtualenv-呢？"><a href="#為何要安裝-virtualenv-呢？" class="headerlink" title="為何要安裝 virtualenv 呢？"></a>為何要安裝 <strong>virtualenv</strong> 呢？</h4><p><strong>virtualenv</strong>可以幫你產生project的環境，每一個project用自己的libraries，這樣比較不容易有衝突。</p><h3 id="3-建置project"><a href="#3-建置project" class="headerlink" title="3. 建置project"></a>3. 建置project</h3><p>首先，先用<strong>virtualenv</strong>創建project<br><figure class="highlight bash"><figcaption><span>create project</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">virtualenv finance_ml</div><div class="line"><span class="built_in">cd</span> finance_ml</div></pre></td></tr></table></figure></p><p>接下來必須要開啟工作環境：<br><figure class="highlight plain"><figcaption><span>activate and deactivate project</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">source bin/activate</div><div class="line">deactivate</div></pre></td></tr></table></figure></p><p>這邊有兩行，一行是開啟環境，一行是結束環境！假如你還要繼續，先不要輸入第二行。<br>將data.csv複製到當前資料夾，並且安裝python packages</p><figure class="highlight plain"><figcaption><span>install python packages</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pip install jupyter</div><div class="line">pip install pandas</div><div class="line">pip install sklearn</div><div class="line">pip install matplotlib</div></pre></td></tr></table></figure><h3 id="4-開工！"><a href="#4-開工！" class="headerlink" title="4. 開工！"></a>4. 開工！</h3><p>首先就是開啟jupyter notebook，並開一個python的環境<br><figure class="highlight plain"><figcaption><span>start notebook</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jupyter notebook</div></pre></td></tr></table></figure><br>這樣會開啟一個網頁版的GUI介面，只要新增python的notebook就可以用了！<br>接下來進入我們的主題：機器學習程式碼！</p><h4 id="A-讀入資料"><a href="#A-讀入資料" class="headerlink" title="A. 讀入資料"></a>A. 讀入資料</h4><p>這邊我們用 pandas 讀入所需要的資料，index_col可以設定要哪一個columns當作index。這邊的index選擇在 data.csv 中，第一個未命名的column。<br><figure class="highlight python"><figcaption><span>read data</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line">data = pd.read_csv(<span class="string">'data.csv'</span>, index_col=<span class="string">'Unnamed: 0'</span>)</div></pre></td></tr></table></figure></p><h4 id="B-處理資料"><a href="#B-處理資料" class="headerlink" title="B.處理資料"></a>B.處理資料</h4><p>我們將資料分成三類，一類是跑回測用的dbacktest，另一類是機器學習用的dtraning，另外一個是traning完用來評估的dtest。</p><figure class="highlight python"><figcaption><span>process data</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</div><div class="line"></div><div class="line"><span class="comment"># clear data 將爛資料去掉</span></div><div class="line">data.dropna(how=<span class="string">'any'</span>, inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment"># 選擇2015年以後的資料作為回測用</span></div><div class="line">dbacktest = data[data[<span class="string">'buy_date'</span>] &gt; <span class="string">'2015'</span>]</div><div class="line"></div><div class="line"><span class="comment"># 將其於的資料再分成兩類：dtrain 跟 dtest</span></div><div class="line">dataTrainTest = data[data[<span class="string">'sell_date'</span>] &lt; <span class="string">'2015'</span>]</div><div class="line">dtrain, dtest = train_test_split(dataTrainTest, test_size=<span class="number">0.10</span>, random_state=<span class="number">42</span>)</div><div class="line"></div><div class="line"><span class="comment"># 設定我們的feature要用哪些</span></div><div class="line">features = data.columns[<span class="number">5</span>:<span class="number">-1</span>]</div></pre></td></tr></table></figure><h4 id="C-機器學習訓練資料"><a href="#C-機器學習訓練資料" class="headerlink" title="C. 機器學習訓練資料"></a>C. 機器學習訓練資料</h4><p>這邊我們用很簡單的<a href="https://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm" rel="external nofollow noopener noreferrer" target="_blank">隨機森林</a>，來完成的，可以參考連結來學習怎麼樣調整參數，這應該算是機器學習中，前製作業最少的模型了！</p><figure class="highlight python"><figcaption><span>learning</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</div><div class="line"></div><div class="line"><span class="comment"># 創建機器學習的model</span></div><div class="line">rf = RandomForestClassifier(n_estimators=<span class="number">10</span>, criterion=<span class="string">'gini'</span>, </div><div class="line">                            max_depth=<span class="keyword">None</span>, min_samples_split=<span class="number">2</span>, </div><div class="line">                            min_samples_leaf=<span class="number">1</span>, min_weight_fraction_leaf=<span class="number">0.0</span>, </div><div class="line">                            max_features=<span class="string">'auto'</span>, max_leaf_nodes=<span class="keyword">None</span>, </div><div class="line">                            bootstrap=<span class="keyword">True</span>, oob_score=<span class="keyword">False</span>, n_jobs=<span class="number">1</span>, </div><div class="line">                            random_state=<span class="keyword">None</span>, verbose=<span class="number">0</span>, warm_start=<span class="keyword">False</span>, </div><div class="line">                            class_weight=<span class="keyword">None</span>)</div><div class="line"><span class="comment"># 分類能獲利的股票</span></div><div class="line">rf.fit(dtrain[features], dtrain[<span class="string">'獲利'</span>] &gt; <span class="number">1</span>)</div><div class="line"></div></pre></td></tr></table></figure><h4 id="D-結果"><a href="#D-結果" class="headerlink" title="D. 結果"></a>D. 結果</h4><p>你說這樣就結束了！？對呀結束了。其實machine learning要簡單真的就只是這樣而已！<br>接下來我們來看一下它預測的准不準：</p><figure class="highlight python"><figcaption><span>predict</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">result = rf.predict(dtest[features])</div><div class="line"></div><div class="line">print(<span class="string">'test data'</span>)</div><div class="line">print(<span class="string">'gain before filtered'</span>, dtest[<span class="string">'獲利'</span>].mean())</div><div class="line">print(<span class="string">'gain after filtered'</span>, dtest[<span class="string">'獲利'</span>][result].mean())</div><div class="line">print(<span class="string">'num stocks'</span>, sum(result), <span class="string">'/'</span>, len(dtest))</div><div class="line"></div><div class="line">result = rf.predict(dbacktest[features])</div><div class="line"></div><div class="line">print(<span class="string">'backtest data'</span>)</div><div class="line">print(<span class="string">'gain before filtered'</span>, dbacktest[<span class="string">'獲利'</span>].mean())</div><div class="line">print(<span class="string">'gain after filtered'</span>, dbacktest[<span class="string">'獲利'</span>][result].mean())</div><div class="line">print(<span class="string">'num stocks'</span>, sum(result), <span class="string">'/'</span>, len(dbacktest))</div><div class="line"></div></pre></td></tr></table></figure><p>假如一切順利就會看到以下結果：</p><center><img src="/利用Machine-Learning-選股新手教學/result.png" alt="結果" title="結果"></center><br>這邊的gain是指平均的報酬率，也就是所有股票的價格在賣出時是否賺錢，小於一就是虧，大於一就是賺。<br><br>結果看起來還滿猛的！竟然有接近7%的報酬率！<br><br>但真的是如此嗎？我們把它畫成隨著時間，本金成長的獲利圖：<br><br><figure class="highlight python"><figcaption><span>backtest</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">%matplotlib inline</div><div class="line"></div><div class="line">dbacktest[<span class="string">'預測'</span>] = pd.Series(result, index=dbacktest.index)</div><div class="line">dates = list(set(dbacktest[<span class="string">'buy_date'</span>]))</div><div class="line">dates.sort()</div><div class="line"></div><div class="line">history = []</div><div class="line"><span class="keyword">for</span> d <span class="keyword">in</span> dates:</div><div class="line">    history.append(dbacktest[(dbacktest[<span class="string">'buy_date'</span>] == d) &amp; (dbacktest[<span class="string">'預測'</span>])][<span class="string">'獲利'</span>].mean())</div><div class="line">    </div><div class="line">pd.Series(history, index=dates).cumprod().plot()</div></pre></td></tr></table></figure><br><br><center><img src="/利用Machine-Learning-選股新手教學/eq.png" alt="權益曲線" title="權益曲線"></center><p>發現其實沒有想像中那麼好。這是意料之中的結果，畢竟我們的learning時間才幾秒鐘，假如增加n_estimator這個變數，是否可以讓結果更好？假如使用Regression會不會更好？假如改變一下機器學習的參數、或修改一下features，是否可以選到更好的股票呢？就留給各位慢慢玩！以下是可以改進的地方：</p><ol><li>feature engineering：將features做修正、刪除、normalize等</li><li>篩選能獲利X%的股票</li><li>classification vs regression：可以兩種都試試看</li><li>不同的model，可以試試SVM、NN、XGBoost等等</li><li>不同的model都有可以調整超多參數來達到優化</li><li>利用early stop 來預防overfitting。</li></ol><p>我只是列出最基本的，還有很多可以玩的，這也是我這禮拜正在弄的東西，害我都沒時間寫網誌XDD</p><p>假如你有意外的發現，可以聯絡我，我可以幫你架設一個選股平台，我們再來討論怎麼分潤之類的，但前提是結果必須要比我的好才行XDDD。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近一直在弄Machine Learning，都快忘記寫blog了，哈！&lt;/p&gt;
&lt;p&gt;其實要machine選股真的很簡單！這篇blog就會帶大家從頭開始，用最簡單的方式，將Machine Learning實做！這邊只是給大家一個簡單的架構，可以自己去嘗試優化，讓它更聰明！
      
    
    </summary>
    
      <category term="財經Python教學" scheme="https://koreal6803.github.io/categories/%E8%B2%A1%E7%B6%93Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="機器學習" scheme="https://koreal6803.github.io/tags/%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92/"/>
    
      <category term="Machine Learning" scheme="https://koreal6803.github.io/tags/Machine-Learning/"/>
    
      <category term="python" scheme="https://koreal6803.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning 表示：看季線最無用！</title>
    <link href="https://koreal6803.github.io/Machine-Learning-%E8%A1%A8%E7%A4%BA%EF%BC%9A%E7%9C%8B%E5%AD%A3%E7%B7%9A%E6%9C%80%E7%84%A1%E7%94%A8%EF%BC%81/"/>
    <id>https://koreal6803.github.io/Machine-Learning-表示：看季線最無用！/</id>
    <published>2017-10-15T16:10:12.000Z</published>
    <updated>2017-10-28T19:36:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近喜歡做 machine learning 的預測，發現機器學習看財報，預測下季收盤價還滿準的。</p><p>Alpha Go 讓人類的圍棋可以到達新境界，機器學習中學習到一些它判斷財報的方法，今天來剖開上一篇教學中，機器學習的大腦，來看一下機器人如何選股！</p><center><img src="/Machine-Learning-表示：看季線最無用！/thumbnail.jpeg" alt="機器學習" title="機器學習"></center><h3 id="Machine-Learning：季線無用！"><a href="#Machine-Learning：季線無用！" class="headerlink" title="Machine Learning：季線無用！"></a>Machine Learning：季線無用！</h3><p>機器學習的模型就像是一個黑盒子，很難知道他其中的工作原理，只能看到線性化後，每個feature的權重。發現了一個很有趣的狀況，就是 “股價在季線上” 這個條件，權重超低！</p><p>假如你買賣股票也跟我的模型一樣，是根據每一季財報來決定，那機器學習的結果，表示不用看季線，因為幾乎沒啥用。</p><p>看季線還不如看近10週收盤價！發現把週收盤價納入參考，也可以增進效果。代表長線的技術指標是有用的！</p><h3 id="重要的財報數據"><a href="#重要的財報數據" class="headerlink" title="重要的財報數據"></a>重要的財報數據</h3><p>以下features的重要程度按順序排列：</p><ol><li><strong>月營收增長率</strong>很重要，而且不能只看一個月！</li><li><strong>當季ROE</strong>跟<strong>去年同季ROE</strong>很重要！</li><li><strong>EPS季增長率</strong>也很重要！</li><li><strong>總資產轉換率</strong> 較不重要，但也不賴啦！</li><li>其它，重要程度：<strong>股價淨值比</strong> = <strong>負債比率</strong> &gt; <strong>本益比</strong> = <strong>殖利率</strong></li><li><strong>週收盤價</strong>比上面的難用，但好像可以判斷一些東西，但一定是非線性的，所以不知道其中原理XD</li><li>重要程度趨近於0的：<strong>收盤 &gt; 季線</strong></li></ol><p>真的很少網站可以像這裡一樣，告訴你哪些是比較有用的數據，哪些比較難用，我們真的要跟機器來學習，一般人都會認為股價淨值比、本益比是最重要的，但是這邊做出了一個不一樣的結論：<strong>營收是否增加</strong>才是股票漲跌的關鍵。</p><p>這樣做的用意只是給大家一個概念，也不代表機器學習的結果就得奉為聖旨。</p><h3 id="機器學習評分財報"><a href="#機器學習評分財報" class="headerlink" title="機器學習評分財報"></a>機器學習評分財報</h3><p>機器學習模型最後會幫每個股票評分，總共100分，最低0分，50分就是他覺得股票不漲不跌，所以我們將每季評分分成四組，由低到高：</p><center><img src="/Machine-Learning-表示：看季線最無用！/dis.png" alt="歷史所有財報的評分" title="歷史所有財報的評分"></center><p>可以看到有很多的評分都在0分跟100分，因為分數算法的關係，100分的部分可以想成超過一百分！（國軍online）</p><p>之後會在將 0 跟 100 分再區分清楚一點～</p><h3 id="回測！"><a href="#回測！" class="headerlink" title="回測！"></a>回測！</h3><p>接下來我們將分數由低到高分4組，分別回測：</p><center><img src="/Machine-Learning-表示：看季線最無用！/eq.png" alt="回測" title="回測"></center><p>報酬率由低到高很漂亮的一字排開！分數低果然很差，而分數高真的很好。<br>可以看到50分以上的兩組，其獲利贏過大盤（黃色），而50以下的兩組，其獲利小於大盤。</p><h3 id="財報好的公司，抗跌！"><a href="#財報好的公司，抗跌！" class="headerlink" title="財報好的公司，抗跌！"></a>財報好的公司，抗跌！</h3><p>資優生組別（灰色）幾乎每季都漲！唯一一次跌是在2015年中，當時大盤大跌，但資優生那組並沒有跌非常多。</p><h3 id="穩定的報酬率"><a href="#穩定的報酬率" class="headerlink" title="穩定的報酬率"></a>穩定的報酬率</h3><p>大盤三年1.05倍，而高分財報組1.75倍，平均報酬率20％每年。</p><h3 id="別用這個策略亂放空！"><a href="#別用這個策略亂放空！" class="headerlink" title="別用這個策略亂放空！"></a>別用這個策略亂放空！</h3><p>從上圖也可以看到一個現象：不要亂放空，不然會慘慘的。就算財報在爛，最差的那組還是沒辦法一直跌，但財報最好的那組可以漲很多！</p><p>這裡用2015年以前的資料訓練，2015年以後拿來回測，所以這個應該就會是實際策略上線的狀況！（理論上XDD）</p><p>接下來會閉關幾天，把這個策略放在雲端，大家都可以去使用！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近喜歡做 machine learning 的預測，發現機器學習看財報，預測下季收盤價還滿準的。&lt;/p&gt;
&lt;p&gt;Alpha Go 讓人類的圍棋可以到達新境界，機器學習中學習到一些它判斷財報的方法，今天來剖開上一篇教學中，機器學習的大腦，來看一下機器人如何選股！&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="AI看股票" scheme="https://koreal6803.github.io/categories/AI%E7%9C%8B%E8%82%A1%E7%A5%A8/"/>
    
    
      <category term="機器學習" scheme="https://koreal6803.github.io/tags/%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92/"/>
    
      <category term="Machine Learning" scheme="https://koreal6803.github.io/tags/Machine-Learning/"/>
    
      <category term="python" scheme="https://koreal6803.github.io/tags/python/"/>
    
      <category term="選股" scheme="https://koreal6803.github.io/tags/%E9%81%B8%E8%82%A1/"/>
    
  </entry>
  
</feed>
