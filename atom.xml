<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FinLab 量化實驗室</title>
  
  <subtitle>用統計、回測的方式教你如何買股票</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://koreal6803.github.io/"/>
  <updated>2017-11-17T16:24:18.000Z</updated>
  <id>https://koreal6803.github.io/</id>
  
  <author>
    <name>koreal6803</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python 時間序列實作！</title>
    <link href="https://koreal6803.github.io/Python-%E6%99%82%E9%96%93%E5%BA%8F%E5%88%97%E5%AF%A6%E4%BD%9C%EF%BC%81/"/>
    <id>https://koreal6803.github.io/Python-時間序列實作！/</id>
    <published>2017-11-15T13:03:03.000Z</published>
    <updated>2017-11-17T16:24:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前我們介紹了很多爬蟲，可以爬每天、每月、每季的資料，今天就是要交爬完了之後要怎麼運用。這篇文章會教如何將爬下來的資料整理成 time series （時間序列）</p><center><img src="/Python-時間序列實作！/thumbnail.png" alt="時間序列" title="時間序列"></center><h3 id="每日爬蟲"><a href="#每日爬蟲" class="headerlink" title="每日爬蟲"></a>每日爬蟲</h3><p>首先，我們將之<a href="/超簡單台股每日爬蟲教學/">前一篇：超簡單台股每日爬蟲教學</a> 所分享的程式碼變成以下的function，方便我們多次呼叫，才能爬每一天的股價。</p><figure class="highlight python"><figcaption><span>每日股價爬蟲</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">crawlPrice</span><span class="params">(date)</span>:</span></div><div class="line">    r = requests.post(<span class="string">'http://app.twse.com.tw/ch/trading/exchange/MI_INDEX/MI_INDEX.php'</span>, data=&#123;</div><div class="line">        <span class="string">'download'</span>: <span class="string">'csv'</span>,</div><div class="line">        <span class="string">'qdate'</span>:date,</div><div class="line">        <span class="string">'selectType'</span>:<span class="string">'ALL'</span>,</div><div class="line">    &#125;)</div><div class="line">    r.encoding = <span class="string">'big5'</span></div><div class="line">    df = pd.read_csv(StringIO(<span class="string">"\n"</span>.join([i.translate(&#123;ord(c): <span class="keyword">None</span> <span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">' '</span>&#125;) </div><div class="line">                                         <span class="keyword">for</span> i <span class="keyword">in</span> r.text.split(<span class="string">'\n'</span>) </div><div class="line">                                         <span class="keyword">if</span> len(i.split(<span class="string">'",'</span>)) == <span class="number">16</span> <span class="keyword">and</span> i[<span class="number">0</span>] != <span class="string">'='</span>])), header=<span class="number">0</span>)</div><div class="line"></div><div class="line">    df.set_index(<span class="string">'證券代號'</span>, inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    df.columns = [<span class="string">'證券名稱'</span>, <span class="string">'成交量'</span>, <span class="string">'成交筆數'</span>, <span class="string">'成交金額'</span>, <span class="string">'開盤價'</span>, <span class="string">'最高價'</span>, <span class="string">'最低價'</span>, <span class="string">'收盤價'</span>,</div><div class="line">                  <span class="string">'漲跌(+/-)'</span>, <span class="string">'漲跌價差'</span>, <span class="string">'最後揭示買價'</span>, <span class="string">'最後揭示買量'</span>, <span class="string">'最後揭示賣價'</span>, <span class="string">'最後揭示賣量'</span>, <span class="string">'本益比'</span>]</div><div class="line">    </div><div class="line">    df[<span class="string">'成交量'</span>] /= <span class="number">1000</span></div><div class="line">    df = df.drop([<span class="string">'漲跌(+/-)'</span>,<span class="string">'證券名稱'</span>,<span class="string">'最後揭示買量'</span>,<span class="string">'最後揭示賣量'</span>], axis=<span class="number">1</span>)</div><div class="line">    df = df.replace(<span class="string">'--'</span>, np.nan)</div><div class="line">    df = df.apply(pd.to_numeric)</div><div class="line">    df = df.apply(pd.to_numeric)</div><div class="line">    <span class="keyword">assert</span> len(set(df.index)) == len(df.index)</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> df</div><div class="line"></div></pre></td></tr></table></figure><p>就跟之前是一樣的，只是被包成 function ，它的 input 是日期，output 是 dataframe，寫程式最重要的就是瞭解 input 跟 output 的型態，就會比較簡單了！</p><h3 id="呼叫每日爬蟲，連續爬-n-天"><a href="#呼叫每日爬蟲，連續爬-n-天" class="headerlink" title="呼叫每日爬蟲，連續爬 n 天"></a>呼叫每日爬蟲，連續爬 n 天</h3><p>接下來我們就來利用這個 function 幫我們爬最近9天的資料，並將數據存在 data 這個 variable 中：</p><figure class="highlight python"><figcaption><span>一次爬 n_days 天的股價</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> datetime</div><div class="line"></div><div class="line">data = &#123;&#125;</div><div class="line">n_days = <span class="number">9</span></div><div class="line">time = datetime.datetime.now()</div><div class="line"></div><div class="line"><span class="keyword">while</span> len(data) &lt; n_days:</div><div class="line">    </div><div class="line">    <span class="comment"># 假如日月 &lt; 9 要補零</span></div><div class="line">    month_str = str(time.month) <span class="keyword">if</span> time.month &gt; <span class="number">9</span> <span class="keyword">else</span> <span class="string">'0'</span> + str(time.month)</div><div class="line">    day_str = str(time.day) <span class="keyword">if</span> time.day &gt; <span class="number">9</span> <span class="keyword">else</span> <span class="string">'0'</span> + str(time.day)</div><div class="line">    </div><div class="line">    <span class="comment"># e.x 20100101</span></div><div class="line">    taiwan_time_str = str(time.year - <span class="number">1911</span>) + <span class="string">'/'</span> + month_str + <span class="string">'/'</span> + day_str</div><div class="line">    international_time_str = str(time.year) + month_str + day_str</div><div class="line">    </div><div class="line">    print(<span class="string">'parsing'</span>, international_time_str)</div><div class="line"></div><div class="line">    <span class="comment"># 使用 crawPrice 爬資料</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        data[international_time_str] = crawlPrice(taiwan_time_str)</div><div class="line">        print(<span class="string">'success!'</span>)</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="comment"># 假日爬不到</span></div><div class="line">        print(<span class="string">'fail! check the date is holiday'</span>)</div><div class="line">    </div><div class="line">    <span class="comment"># 減一天</span></div><div class="line">    time -= datetime.timedelta(days=<span class="number">1</span>)</div><div class="line"></div></pre></td></tr></table></figure><p>想要增加天數，只要調整 n_days 這個參數就行了！<br>一切都順利的話，會顯示成以下這樣：</p><center><img src="/Python-時間序列實作！/everyday.png" alt="使用function的方法截圖" title="使用function的方法截圖"></center><p>大部分的天數都是 success 代表成功讀取資料，但是每間隔5天就會顯示兩次 fail，代表那可能是假日，然而不能保證就是了，也可能是你的網路斷掉XD，或是 code 有bug，就要單獨做測試，至少在我的電腦裡，它抓的滿好的。</p><h3 id="整理-data-轉成-收盤價-time-series"><a href="#整理-data-轉成-收盤價-time-series" class="headerlink" title="整理 data 轉成 收盤價 time series"></a>整理 data 轉成 收盤價 time series</h3><p>接下來我們來看一下得到了什麼：</p><center><img src="/Python-時間序列實作！/data.png" alt="操作正確的顯示畫面" title="操作正確的顯示畫面"></center><p>我們像上圖一樣，只拿取 “2017-11-15” 號的股價，會像上面這樣，變換不同的日期，可以得到不同的表。但這並不是我們想要的，我們想要有 time series，也就是看到某個欄位隨時間變動的圖表，於是我們做以下的轉換：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">close = pd.DataFrame(&#123;k:d[<span class="string">'收盤價'</span>] <span class="keyword">for</span> k,d <span class="keyword">in</span> data.items()&#125;).transpose()</div><div class="line">close.index = pd.to_datetime(close.index)</div><div class="line">close</div></pre></td></tr></table></figure><p>在上面的程式中，現在我們只拿所有股票的 收盤價，並建構 close 這個 dataframe，這個 dataframe，假如你還不知道什麼是 dataframe，或對 dataframe 還不熟，可以參考<a href="https://pandas.pydata.org/pandas-docs/stable/10min.html" rel="external nofollow noopener noreferrer" target="_blank">連結</a>學習一下。</p><p>輸入後會看到以下成品：</p><center><img src="/Python-時間序列實作！/clean.png" alt="clean.png" title=""></center><p>現在整張表都只剩 收盤價 了，而且還是按照日期排列，超讚的！我也覺得很開心，竟然兩行就處理完，我還以為要五行之類的，可見pandas真的很厲害！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前我們介紹了很多爬蟲，可以爬每天、每月、每季的資料，今天就是要交爬完了之後要怎麼運用。這篇文章會教如何將爬下來的資料整理成 time series （時間序列）&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/Python-時間序列實作！/thumbnail.png&quot; al
      
    
    </summary>
    
      <category term="財經Pyhton教學" scheme="https://koreal6803.github.io/categories/%E8%B2%A1%E7%B6%93Pyhton%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="python" scheme="https://koreal6803.github.io/tags/python/"/>
    
      <category term="KD" scheme="https://koreal6803.github.io/tags/KD/"/>
    
      <category term="程式設計" scheme="https://koreal6803.github.io/tags/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/"/>
    
  </entry>
  
  <entry>
    <title>如何定義KD鈍化</title>
    <link href="https://koreal6803.github.io/KD1/"/>
    <id>https://koreal6803.github.io/KD1/</id>
    <published>2017-11-14T14:22:16.000Z</published>
    <updated>2017-11-15T01:38:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>謝謝大家的鼓勵，最近有點太忙了，加上懶惰蟲上身，上禮拜中斷了XD，這禮拜會繼續加油！希望可以知道大家最想要看什麼，有看到留言說希望可以增加 python 有關的教學文！收到了，甚至可以更仔細說明，例如爬哪個網站之類的，我都可以幫你寫喔！大家想要看什麼可以在下面留言！</p><p>今天先來看一下KD值好了，畢竟都還沒有看到太多指標相關的文章，其實KD值是非常簡單的，但在這邊我不想要介紹公式，因為太無聊了，而且每次看每次忘，我只想介紹如何看KD，以及參數如何設定：</p><h3 id="KD-的意義"><a href="#KD-的意義" class="headerlink" title="KD 的意義"></a>KD 的意義</h3><p>KD就是像坊間說的，兩條線，K跟D，一條反應較快，一條慢，都介於0～100之間。其意義在於股票在n天之內的相對位置，相對位置就是指n天內的最高最低，將當前的股價做normalize。</p><p>給一個簡單的例子，例如今天全班考試，有人拿30分，請問他考的好不好？</p><p>答案是：不知道，因為沒有辦法比較，說不定考卷很難，30分就是全班最高分了！要是考卷出太難，大家的成績介於10～30之間，那老師就可以做 normalize 讓成績分佈好看一點：</p><p>新成績 = ( 成績 - 10 ) / (30 - 10)</p><p>這樣子，考最好的人就是100分，而考最爛的人就是0分，這個就是KD指標的意義，而每個學生的成績，就是每日的收盤價。</p><p>最後我們將 新成績 對時間平滑一次，變成K值，再對K值平滑一次，變成D值。</p><h3 id="KD-的參數"><a href="#KD-的參數" class="headerlink" title="KD 的參數"></a>KD 的參數</h3><p>介紹完之後，K D 指標的參數就很好理解了：</p><ol><li>9天：只考慮9天內的最高最低</li><li>3天：K的平滑</li><li>3天：D的平滑</li></ol><p>平滑數字越大，數字變動越慢，雜訊越少<br>平滑數字越小，數字變動越快，雜訊越多</p><p>我們用台積電為例子：</p><center><img src="/KD1/tsmc.png" alt="KD（9、3、3）" title="KD（9、3、3）"></center><p>以上就是用正統的參數：9、3、3的KD指標（橘色、綠色），紫色是股價，可以看到KD值低檔交叉，算是好買點，最近就等著台積點低於20 XDD，（隨便說的，不是投資建議），我們試著換一個參數（9、6、6）看看：</p><center><img src="/KD1/tsmc2.png" alt="KD（9、6、6）" title="KD（9、6、6）"></center><p>可以看到曲線比較平滑一點，且K跟D差距比較明顯，相較於第一張圖，8月初比較不會有雜訊，但是反應變慢很多。</p><h3 id="KD-坊間策略"><a href="#KD-坊間策略" class="headerlink" title="KD 坊間策略"></a>KD 坊間策略</h3><p>大家都說<br>K超越D時，代表黃金交叉，可以買進<br>K落於D時，代表死亡交叉，可以賣出</p><p>真的是這樣嗎？讓我們來看看：</p><p>黃金交叉買，死亡交叉賣：</p><p>參數（9,3,3）勝率：0.386<br>參數（45,15,15）勝率：0.407<br>參數（180,60,60）勝率：0.364</p><p>以下是這三個參數的獲利曲線：</p><center><img src="/KD1/summary.png" alt="坊間策略歷史績效圖" title="坊間策略歷史績效圖"></center><p>結果好像不太好，看來真的不太能直接用，尤其短週期的KD，進出太平凡，導致手續費飆高，根本就是一直賠錢（紅色），用長週期的KD才稍微好轉。而藍線（不考慮手續費），則是中間的（類似週KD）表現比較好，但總之效果都不太好XD。</p><h3 id="KD-鈍化"><a href="#KD-鈍化" class="headerlink" title="KD 鈍化"></a>KD 鈍化</h3><p>另外一個網路上的偏方：KD鈍化，但大家沒有定義什麼時候賣，也沒有數據顯示幾天賣比較好，於是我們就來做個實驗：</p><p>買入條件：k, d （參數為 9，9，3）都大於80，至少 n 天則買入<br>賣出條件：m 天賣出</p><p>當然還有很多種買法我沒測過，有興趣的話可以在下面留言，我幫你測！</p><center><img src="/KD1/kdbest.png" alt="獲利高低圖" title="獲利高低圖"></center><p>色溫越暖，代表10年獲利越高，這張圖的 x軸 為 m 天， y軸 為 KD大於80 至少 n 天，可以發現，幾乎十幾個交易日賣出是最保險的，而5~6天連續高檔，代表鈍化，會有比較好的效果，第十天突然異軍突起，超紅，可能有些股票末路狂飆吧。。。</p><p>然而上述是不考慮手續費的情況，所以當我們將最好的一組參數(10,12)拿來跑回測，會是這個樣子：</p><center><img src="/KD1/kdbesteq.png" alt="獲利高低圖" title="獲利高低圖"></center><p>藍線代表沒有考慮手續費，一飛沖天<br>紅現代表考慮手續費，完全沒賺到什麼錢</p><p>看來手續費真的差很大，短線選股真的是比較困難，但滿有潛力的就是了。</p><p>以下是我調整後覺得最好的參數：</p><p>KD（5、3、3）連續10天大於75時買進 30 天</p><center><img src="/KD1/bestforself.png" alt="最後的成果" title="最後的成果"></center><p>扣除手續費後終於贏過大盤！不知道KD拿來加入其它策略效果如何？<br>另外，也可以跟我說想要看到哪一類的文章，或有什麼技術上的問題，都歡迎留言喔！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;謝謝大家的鼓勵，最近有點太忙了，加上懶惰蟲上身，上禮拜中斷了XD，這禮拜會繼續加油！希望可以知道大家最想要看什麼，有看到留言說希望可以增加 python 有關的教學文！收到了，甚至可以更仔細說明，例如爬哪個網站之類的，我都可以幫你寫喔！大家想要看什麼可以在下面留言！&lt;/p&gt;
      
    
    </summary>
    
      <category term="指標分析" scheme="https://koreal6803.github.io/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/"/>
    
      <category term="技術面" scheme="https://koreal6803.github.io/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/%E6%8A%80%E8%A1%93%E9%9D%A2/"/>
    
    
      <category term="如何買股票" scheme="https://koreal6803.github.io/tags/%E5%A6%82%E4%BD%95%E8%B2%B7%E8%82%A1%E7%A5%A8/"/>
    
      <category term="選股策略" scheme="https://koreal6803.github.io/tags/%E9%81%B8%E8%82%A1%E7%AD%96%E7%95%A5/"/>
    
      <category term="歷史回測" scheme="https://koreal6803.github.io/tags/%E6%AD%B7%E5%8F%B2%E5%9B%9E%E6%B8%AC/"/>
    
      <category term="簡易策略" scheme="https://koreal6803.github.io/tags/%E7%B0%A1%E6%98%93%E7%AD%96%E7%95%A5/"/>
    
  </entry>
  
  <entry>
    <title>Python：利用Pandas輕鬆選股</title>
    <link href="https://koreal6803.github.io/Python%EF%BC%9A%E5%88%A9%E7%94%A8Pandas%E8%BC%95%E9%AC%86%E9%81%B8%E8%82%A1/"/>
    <id>https://koreal6803.github.io/Python：利用Pandas輕鬆選股/</id>
    <published>2017-11-08T14:16:44.000Z</published>
    <updated>2017-11-08T15:40:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇的Python教學中，我們學會了怎麼爬財報，但是爬完的資料要怎麼運用呢？這篇會給大家一些方向。<br>那篇有點不好意思，好像有兩個package沒有import，下次發現的話，可以在下方留言告訴我，我會盡快更正。</p><p>今天這篇的前置作業，請參考<a href="/Python-財報爬蟲-1-綜合損益表/">連結</a>把當中的function給copy過來，然後就開始吧！</p><h3 id="資料處理"><a href="#資料處理" class="headerlink" title="資料處理"></a>資料處理</h3><p>首先，我們要先使用這個function，可以直接在jupyter視窗內輸入，來取得爬取今天的主角：”營益分析彙總表”</p><figure class="highlight python"><figcaption><span>利用上次的爬蟲取得資料</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">df = financial_statement(<span class="number">107</span>, <span class="number">2</span>, <span class="string">'營益分析彙總表'</span>)</div><div class="line">df</div></pre></td></tr></table></figure><p>第一行，我們將 “營益分析彙總表” 儲存在 df 這個變數之中，<br>第二行，我們希望將 df 給顯示出來，看一下它長什麼樣子<br>第二行的功能是只有在jupyter 這個IDE才看的到喔～假如是寫在python script的話，就要用 print(df) 。<br>假如一切OK就會是以下的樣子：</p><center><img src="/Python：利用Pandas輕鬆選股/df.png" alt="成功取得報表" title="成功取得報表"></center><p>我們觀察一下這張表，有一行真的詭異：”合計：共 808 家” ，這行完全沒有任何可以用的資料，所以我們將它刪除：</p><figure class="highlight python"><figcaption><span>刪除其中一行</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df = df.drop([<span class="string">'合計：共 808 家'</span>], axis=<span class="number">1</span>)</div></pre></td></tr></table></figure><p>接下來我們發現 index （每一列）的命名很怪，怎麼用 1,2,3… 來命名呢，應該要用股票名稱！？<br>我們將股票的名稱當成新的 index：</p><figure class="highlight python"><figcaption><span>將index換成股票名稱</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df = df.set_index([<span class="string">'股票名稱'</span>])</div></pre></td></tr></table></figure><p>最後一步，我們希望資料欄位中，所有的元素都是 float ，所以要做一次轉換：</p><figure class="highlight python"><figcaption><span>轉換成數值</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df = df.astype(float)</div></pre></td></tr></table></figure><center><img src="/Python：利用Pandas輕鬆選股/processed.png" alt="處理完後的資料" title="處理完後的資料"></center><h3 id="資料處理一行版"><a href="#資料處理一行版" class="headerlink" title="資料處理一行版"></a>資料處理一行版</h3><p>這樣就沒問題了！其實有個更快速的寫法，將以上三件事情寫成一行：</p><figure class="highlight python"><figcaption><span>一行直接處理</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df = df.drop([<span class="string">'合計：共 808 家'</span>], axis=<span class="number">1</span>).set_index([<span class="string">'公司名稱'</span>]).astype(float)</div></pre></td></tr></table></figure><p>這樣就可以一次處理好！</p><h3 id="簡單的取出行列："><a href="#簡單的取出行列：" class="headerlink" title="簡單的取出行列："></a>簡單的取出行列：</h3><p>我想單選出毛利率：</p><figure class="highlight python"><figcaption><span>取得毛利率</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df[<span class="string">'毛利率(%)(營業毛利)/(營業收入)'</span>]</div></pre></td></tr></table></figure><center><img src="/Python：利用Pandas輕鬆選股/series.png" alt="單欄毛利率" title="單欄毛利率"></center><p>假如今天我只想看 台積電 表現如何：</p><figure class="highlight python"><figcaption><span>取得台積電資料</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df.loc[<span class="string">'台積電'</span>]</div></pre></td></tr></table></figure><p>取每一欄，跟取每一列，語法不太一樣喔！要小小注意一下。</p><center><img src="/Python：利用Pandas輕鬆選股/tsmc.png" alt="台積電資料" title="台積電資料"></center><p>假如我想同時看 台積電 跟 聯發科：</p><figure class="highlight python"><figcaption><span>取得TSMC跟MTK的資料</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df.loc[[<span class="string">'台積電'</span>, <span class="string">'聯發科'</span>]]</div></pre></td></tr></table></figure><center><img src="/Python：利用Pandas輕鬆選股/tsmcmtk.png" alt="台積電跟聯發科的資料" title="台積電跟聯發科的資料"></center><h3 id="數值分析"><a href="#數值分析" class="headerlink" title="數值分析"></a>數值分析</h3><p>接下來我們稍微分析一下這個表中的數字：<br><figure class="highlight python"><figcaption><span>數值分析</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df.discribe()</div></pre></td></tr></table></figure><br>這樣簡單一行，就可以得到每一欄的數值分析，當初我知道這個 df.describe() 也覺得很神。</p><center><img src="/Python：利用Pandas輕鬆選股/describe.png" alt="數值分析" title="數值分析"></center><h3 id="毛利率分佈圖"><a href="#毛利率分佈圖" class="headerlink" title="毛利率分佈圖"></a>毛利率分佈圖</h3><p>只要簡單一行，我們就可以看到全台灣的上市公司，毛利率分佈圖：</p><figure class="highlight python"><figcaption><span>毛利率分佈圖</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">％matplotlib inline</div><div class="line">df[<span class="string">'毛利率(%)(營業毛利)/(營業收入)'</span>].hist(bins=range(<span class="number">-100</span>,<span class="number">100</span>))</div></pre></td></tr></table></figure><center><img src="/Python：利用Pandas輕鬆選股/dis.png" alt="毛利率分佈圖" title="毛利率分佈圖"></center><h3 id="選股"><a href="#選股" class="headerlink" title="選股"></a>選股</h3><p>選股也很簡單，只要寫成以下條件：</p><figure class="highlight python"><figcaption><span>條件</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cond1 = df[<span class="string">'毛利率(%)(營業毛利)/(營業收入)'</span>].astype(float) &gt; <span class="number">20</span></div><div class="line">cond2 = df[<span class="string">'營業利益率(%)(營業利益)/(營業收入)'</span>].astype(float) &gt; <span class="number">5</span></div></pre></td></tr></table></figure><p>就是說 第一個欄位：毛利率，我們希望找出大於20的 股票<br>另外呢 第二個欄位：營業利益率，我們希望找出大於5的 股票</p><p>那我們就可以用這兩個條件來選股：</p><figure class="highlight python"><figcaption><span>選股</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df[cond1 &amp; cond2]</div></pre></td></tr></table></figure><center><img src="/Python：利用Pandas輕鬆選股/select.png" alt="篩選出來的股票" title="篩選出來的股票"></center><p>搭啦！其實外面的選股軟體也就這樣而已啦！還收費這麼貴XDD 如果你覺得觀賞這個blog有點收穫，記得存到我的最愛定期觀看喔！我每個禮拜都會有一些更新。</p><p>這次教學的檔案：<a href="/Python：利用Pandas輕鬆選股/選股.ipynb" title="notebook.ipynb檔">notebook.ipynb檔</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一篇的Python教學中，我們學會了怎麼爬財報，但是爬完的資料要怎麼運用呢？這篇會給大家一些方向。&lt;br&gt;那篇有點不好意思，好像有兩個package沒有import，下次發現的話，可以在下方留言告訴我，我會盡快更正。&lt;/p&gt;
&lt;p&gt;今天這篇的前置作業，請參考&lt;a href
      
    
    </summary>
    
      <category term="財經Pyhton教學" scheme="https://koreal6803.github.io/categories/%E8%B2%A1%E7%B6%93Pyhton%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="python" scheme="https://koreal6803.github.io/tags/python/"/>
    
      <category term="選股" scheme="https://koreal6803.github.io/tags/%E9%81%B8%E8%82%A1/"/>
    
      <category term="程式設計" scheme="https://koreal6803.github.io/tags/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/"/>
    
  </entry>
  
  <entry>
    <title>超短線上影黑密技！</title>
    <link href="https://koreal6803.github.io/%E8%B6%85%E7%9F%AD%E7%B7%9A%E4%B8%8A%E5%BD%B1%E9%BB%91%E5%AF%86%E6%8A%80%EF%BC%81/"/>
    <id>https://koreal6803.github.io/超短線上影黑密技！/</id>
    <published>2017-11-03T17:44:31.000Z</published>
    <updated>2017-11-03T20:39:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>很多來拜訪本blog的人，都是搜尋 “財報狗” 來的，大部分都是價值投資策略，而沒有使用技術分析，或曾經使用技術分析，因為太難用了而放棄。價值投資跟技術分析最大的差異是，價值投資看的財報是經過嚴格審核的精確數字，而技術分析是在看雜訊中找規律。</p><p>有人會說價值投資，是學會看一家公司的價值，而不像技術分析，是在玩股票。我覺得各有各的好，都是在一堆數字裡面找規律，只要不要被股票玩，哪一種策略我都願意接受XDD。</p><p>今天想當一下標題黨，我幫這個策略取了一個超級中二的名字：”超短線上影黑密技”，無論看幾眼都覺得很彆扭，但是還是讓我一一的解釋每個字的用意：</p><h2 id="超短線"><a href="#超短線" class="headerlink" title="超短線"></a>超短線</h2><p>這個絕對是 “日” 週期裡面，最短的策略了，因為這個策略持股一天隔天直接賣出，適合不想要跟某支股票產生愛恨情仇，喜歡斬釘截鐵，無情操作的人。</p><h2 id="上影"><a href="#上影" class="headerlink" title="上影"></a>上影</h2><p>這絕對不是火影忍者裡的上忍、火影，其實是個上影線策略，也就是當看到上影線，那代表這支股票可以空，當然也沒這麼簡單，要有一層層過濾。</p><h2 id="黑"><a href="#黑" class="headerlink" title="黑"></a>黑</h2><p>黑就是指下跌的意思，這是一個空股票的策略，我不常寫空股票的策略，因為本身沒有在融資融券，但就是因為很少有人空股票，這個策略才沒有因為被挖掘而失效，放空有時候比看多的策略好寫。</p><h2 id="密技"><a href="#密技" class="headerlink" title="密技"></a>密技</h2><p>好啦，其實這也不算什麼密技，上影線大家也不是不知道：</p><center><img src="/超短線上影黑密技！/pp.png" alt="橘色為權益曲線" title="橘色為權益曲線"></center><p>大家都說看到上影線，代表要下跌了，但是這是很不負責任的介紹，因為沒人跟你講會跌多少？上影線多長算長？什麼時候買賣？完全沒有數據，頂多是附圖說，你看這支股票，上影線出現後一路跌。</p><h2 id="策略人多口雜，沒有回測看看就好"><a href="#策略人多口雜，沒有回測看看就好" class="headerlink" title="策略人多口雜，沒有回測看看就好"></a>策略人多口雜，沒有回測看看就好</h2><p>同樣上影線，可以找到100張K線圖，驗證之後真的會跌，反過來，也可以找到100張K線圖，驗證之後其實會漲。</p><p>看過很多自稱是技術分析高手，分享一些方法，KD、MACD、OBV什麼都用上了，回測起來績效不太好，也不知道他是靠投資掙錢，還是靠嘴掙錢。也看過一些人，突然PO文說自己打開多年投資經驗的任督二脈，把blog加密起來，付費觀看，火紅一時。然而過了半年，那個人不見了，消失在茫茫股海中，應該是他的策略就好這麼幾個月，之後就爛掉了XDD。</p><h2 id="回測的重要性"><a href="#回測的重要性" class="headerlink" title="回測的重要性"></a>回測的重要性</h2><p>所以我覺得回測很重要，才能知道是否安穩的獲利，而且還不用每天盯盤。可能有人會反問： W 底要怎麼回測？有些型態學根本不可能寫程式怎麼辦？要是我的話，就會選擇不用，反正還有其它的策略可以用，我比較膽小，只用有驗證過的策略XD。</p><h2 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h2><p>突然啪啦啪啦寫了一堆，不好意思讓各位眼睛痛了，以下就是本篇策略：</p><ul><li>上影線佔 60% （（高 - max(收, 開)）／（高 - 低）&gt; 0.6）</li><li>突然放量 （成交量 &gt; 十日均量 * 4）</li><li>流動率高 （十日均量 &gt; 1000）</li><li>股票不在高檔 （收盤 - 120日最低價）/ (（120日最高價 - 120日最低價）&lt; 0.7</li></ul><p>第四條拿出來說明一下，高檔的股票，有時候會被主力炒作，太飆了，還是不要拿來放空比較好XD。</p><p>以下的權益曲線是空1天，即回補，我另外有測試n天的，基本上獲利更高，但曲線比較不好看。</p><center><img src="/超短線上影黑密技！/eq.png" alt="橘色為權益曲線" title="橘色為權益曲線"></center><p>但這個策略沒有加上手續費，槓桿是調整成0，但假如考慮融券手續費，效果可能就沒那麼好就是了，當沖手續費低會更好？滿有可能的。</p><p>下圖是 賣出/買入 價格的漲跌分佈圖：</p><center><img src="/超短線上影黑密技！/ratio.png" alt="漲跌分佈圖" title="漲跌分佈圖"></center><p>我們可以看到，這些股票下跌（小於1）的數目真的比較多（橘色），然而加上手續費（約千分之8），後，就沒有這麼明顯了（淺藍色），手續費多少是關鍵！像我這種散戶，手續費太高自然是無法使用這個策略QQ。</p><center><img src="/超短線上影黑密技！/ns.png" alt="每日股票持有數量" title="每日股票持有數量"></center><p>可以看到每年都只買了超少次，而且快進快出，大部分時候是空手狀態，很輕鬆。</p><center><img src="/超短線上影黑密技！/md.png" alt="dropdown" title="dropdown"></center><p>可以看到最大虧損也不是很嚴重，尤其時近期，幾乎很少虧損到20%的投資資產。</p><p>當然，大部分的策略看看就好，這個策略也是（由於手續費的關係），重點應該是學到一些東西，以下列舉此篇的重點：</p><ul><li>用簡單的公式看股價高檔低檔（條件4）</li><li>股票不再高檔、近期上影線放量，假如想放空，可以空n天，(n&lt;10)回測獲利都是很可觀，持有時間長，股價漲跌波動大，可以淡化手續費的影響，但持有時間越長，權益曲線越不美。</li><li>股票不在高檔、近期上影線放量，假如想買多，隔幾天再買入較可能買到更好的價格！（假如你用的是長線策略）</li></ul><p>假如大家有興趣，我想找時間來跑一些統計結果，看看上影線對於股價的影響。假如覺得本blog還可以的話，可以定期來觀看～我每個禮拜都會更新幾篇喔！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很多來拜訪本blog的人，都是搜尋 “財報狗” 來的，大部分都是價值投資策略，而沒有使用技術分析，或曾經使用技術分析，因為太難用了而放棄。價值投資跟技術分析最大的差異是，價值投資看的財報是經過嚴格審核的精確數字，而技術分析是在看雜訊中找規律。&lt;/p&gt;
&lt;p&gt;有人會說價值投資
      
    
    </summary>
    
      <category term="指標分析" scheme="https://koreal6803.github.io/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/"/>
    
      <category term="技術面" scheme="https://koreal6803.github.io/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/%E6%8A%80%E8%A1%93%E9%9D%A2/"/>
    
    
      <category term="如何買股票" scheme="https://koreal6803.github.io/tags/%E5%A6%82%E4%BD%95%E8%B2%B7%E8%82%A1%E7%A5%A8/"/>
    
      <category term="選股策略" scheme="https://koreal6803.github.io/tags/%E9%81%B8%E8%82%A1%E7%AD%96%E7%95%A5/"/>
    
      <category term="歷史回測" scheme="https://koreal6803.github.io/tags/%E6%AD%B7%E5%8F%B2%E5%9B%9E%E6%B8%AC/"/>
    
      <category term="簡易策略" scheme="https://koreal6803.github.io/tags/%E7%B0%A1%E6%98%93%E7%AD%96%E7%95%A5/"/>
    
  </entry>
  
  <entry>
    <title>Python 財報爬蟲</title>
    <link href="https://koreal6803.github.io/Python-%E8%B2%A1%E5%A0%B1%E7%88%AC%E8%9F%B2-1-%E7%B6%9C%E5%90%88%E6%90%8D%E7%9B%8A%E8%A1%A8/"/>
    <id>https://koreal6803.github.io/Python-財報爬蟲-1-綜合損益表/</id>
    <published>2017-11-02T21:19:27.000Z</published>
    <updated>2017-11-08T14:06:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>本系列已經介紹了各式各樣的爬蟲，從每天、每月，現在終於要季了，在尋找了各式各樣的網站，交叉比對之下，發現<a href="http://mops.twse.com.tw/mops/web/t163sb04" rel="external nofollow noopener noreferrer" target="_blank">公開資訊觀測站的總報表</a>還滿好抓的，所以就從這個網站下手。</p><center><img src="/Python-財報爬蟲-1-綜合損益表/thumbnail.png" alt="我爬我爬我爬爬爬" title="我爬我爬我爬爬爬"></center><p>Python中有個非常好用的package，叫做pandas，利用它我們就可以簡潔的把網頁上的表格，轉換成dataframe，也就是整理成程式看的懂的表格，我們幾乎不需要做太多的處理！這也是我喜歡用python一點。</p><p>這邊我用的是python3 喔～可能要注意一下，另外pandas的版本不一樣，可能會導致網頁轉dataframe的時候，有點小不一樣，可能要稍微檢查一下，我是用0.20.3這個版本。</p><figure class="highlight python"><figcaption><span>財報爬蟲</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">financial_statement</span><span class="params">(year, season, type=<span class="string">'綜合損益彙總表'</span>)</span>:</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> year &gt;= <span class="number">1000</span>:</div><div class="line">        year -= <span class="number">1911</span></div><div class="line">        </div><div class="line">    <span class="keyword">if</span> type == <span class="string">'綜合損益彙總表'</span>:</div><div class="line">        url = <span class="string">'http://mops.twse.com.tw/mops/web/ajax_t163sb04'</span></div><div class="line">    <span class="keyword">elif</span> type == <span class="string">'資產負債彙總表'</span>:</div><div class="line">        url = <span class="string">'http://mops.twse.com.tw/mops/web/ajax_t163sb05'</span></div><div class="line">    <span class="keyword">elif</span> type == <span class="string">'營益分析彙總表'</span>:</div><div class="line">        url = <span class="string">'http://mops.twse.com.tw/mops/web/ajax_t163sb06'</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">'type does not match'</span>)</div><div class="line"></div><div class="line">    r = requests.post(url, &#123;</div><div class="line">        <span class="string">'encodeURIComponent'</span>:<span class="number">1</span>,</div><div class="line">        <span class="string">'step'</span>:<span class="number">1</span>,</div><div class="line">        <span class="string">'firstin'</span>:<span class="number">1</span>,</div><div class="line">        <span class="string">'off'</span>:<span class="number">1</span>,</div><div class="line">        <span class="string">'TYPEK'</span>:<span class="string">'sii'</span>,</div><div class="line">        <span class="string">'year'</span>:<span class="string">'103'</span>,</div><div class="line">        <span class="string">'season'</span>:<span class="string">'01'</span>,</div><div class="line">    &#125;)</div><div class="line">    </div><div class="line">    r.encoding = <span class="string">'utf8'</span></div><div class="line">    dfs = pd.read_html(r.text)</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i, df <span class="keyword">in</span> enumerate(dfs):</div><div class="line">        df.columns = df.iloc[<span class="number">0</span>]</div><div class="line">        dfs[i] = df.iloc[<span class="number">1</span>:]</div><div class="line">        </div><div class="line">    df = pd.concat(dfs).applymap(<span class="keyword">lambda</span> x: x <span class="keyword">if</span> x != <span class="string">'--'</span> <span class="keyword">else</span> np.nan)</div><div class="line">    df = df[df[<span class="string">'公司代號'</span>] != <span class="string">'公司代號'</span>]</div><div class="line">    df = df[~df[<span class="string">'公司代號'</span>].isnull()]</div><div class="line">    <span class="keyword">return</span> df</div><div class="line"></div></pre></td></tr></table></figure><p>這個function的用法，就跟月爬蟲是一樣的，可以直接輸入西元或國曆，然後第n季，只能輸入1～4季喔～不然會當掉，最後還要輸入哪一種財報：</p><ul><li>綜合損益彙總表</li><li>資產負債彙總表</li><li>營益分析彙總表</li></ul><p>都可以爬取喔！以下就是利用這個function所爬取的資料</p><center><img src="/Python-財報爬蟲-1-綜合損益表/result.png" alt="使用function的方法截圖" title="使用function的方法截圖"></center><p>大家可以看到有些columns怪怪的，例如 “合計：共 808 家” 這個是什麼鬼XDD，由於我一次爬了三個表，這一點小問題應該還好啦！XDD，可以再寫一行code刪除該列就好了。</p><p>基本上資料都是對齊的，不用太擔心。</p><p>爬完之後就交給大家自由發揮囉～～可以做很多事情。<br>總算各種股價、財報、月報的爬蟲都分享完了～</p><p>接下來就是真的利用這些資料來選股囉！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列已經介紹了各式各樣的爬蟲，從每天、每月，現在終於要季了，在尋找了各式各樣的網站，交叉比對之下，發現&lt;a href=&quot;http://mops.twse.com.tw/mops/web/t163sb04&quot; rel=&quot;external nofollow noopener n
      
    
    </summary>
    
      <category term="財經Pyhton教學" scheme="https://koreal6803.github.io/categories/%E8%B2%A1%E7%B6%93Pyhton%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="python" scheme="https://koreal6803.github.io/tags/python/"/>
    
      <category term="選股" scheme="https://koreal6803.github.io/tags/%E9%81%B8%E8%82%A1/"/>
    
      <category term="程式設計" scheme="https://koreal6803.github.io/tags/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/"/>
    
  </entry>
  
  <entry>
    <title>外資大賣，反而要買！？</title>
    <link href="https://koreal6803.github.io/%E8%B7%9F%E8%91%97%E5%A4%96%E8%B3%87%E8%B2%B7%E8%82%A1%E7%A5%A8/"/>
    <id>https://koreal6803.github.io/跟著外資買股票/</id>
    <published>2017-10-30T13:57:49.000Z</published>
    <updated>2017-10-31T10:42:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>外資近年來幾乎稱霸台股，每天台股上上下下，都得看它臉色，今天我們來進行簡單的參數優化，看看跟隨外資買賣有沒有搞頭！</p><h3 id="最佳化外資買賣策略"><a href="#最佳化外資買賣策略" class="headerlink" title="最佳化外資買賣策略"></a>最佳化外資買賣策略</h3><p>假設 n 天內外資總買賣超超過 a 張，則買入，而低於 -a 張，就賣出，我們可以得到一下這張表：</p><center><img src="/跟著外資買股票/color.png" alt="不同參數的漲跌幅度" title="不同參數的漲跌幅度"></center><p>在上圖中，跑了25種不同的回測，每一次回測，n跟a的值都不一樣，紅色代表獲利較多的策略，而藍色代表獲利較少的策略，我們發現 a = 0 的時候結果普遍比較好，另外 n=10~30 天都是合理的選擇，太高或太低不夠具有代表性。</p><p>當然這樣的條件其實還是太弱了，完全沒辦法當作一個策略，一定得配合其它的條件，目前開發的策略中，我也有加入這個條件，有些策略無效，但有些績效明顯上升很多，可以把它想成一個助攻手。假如你本身也有寫偏短線的回測，可以將 外資10天買賣超 &gt; 0 這個條件加入看看，有時候效果會變好。然而，假如你沒有寫回測的話，其實外資買賣對你的影響有限，幾乎不需要管它。</p><h3 id="外資大買大賣，跟著操作？"><a href="#外資大買大賣，跟著操作？" class="headerlink" title="外資大買大賣，跟著操作？"></a>外資大買大賣，跟著操作？</h3><p>外資已經很進步了，這個時代並不是看外資大買，隔天股票就會漲了，甚至，看到外資大買，隔天最好還是別輕舉妄動比較好，以下我做了兩個實驗，一個是外資大買，一個是外資大賣，不考慮手續費：</p><ol><li>外資總買賣 - 昨天外資總買賣 &gt; 5000 （外資大買） 持該股兩天後賣出</li><li>外資總買賣 - 昨天外資總買賣 &lt; -5000 （外資大賣） 持該股兩天後賣出</li></ol><p>你以為一號策略比較好嗎？</p><p>錯…</p><p>我回測時也小震驚了一下，原來外資大買，隔天買入可能會不太好！還不如趁外資大賣的時候買。怎麼會這樣！？實在是太顛覆常理了…</p><center><img src="/跟著外資買股票/buysudden.png" alt="藍色為策略1號，橘色為策略2號" title="藍色為策略1號，橘色為策略2號"></center><p>上圖可以看出，策略2比策略1的報酬好很多。其結論是外資大買，請不要跟著買，因為說不定是外資太多人看了，導致股票隔天衝很高，導致買在高點。相反，大家看到外資大賣，也會恐慌性賣出，造成隔天開盤價格異常低，而剛好被我們買到了！賺到了短線價差。只能說，股票就是人性呀！大家還是太依賴外資籌碼了。總之假如你沒有好策略的話，請不要直接看外資來決定買什麼。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;外資近年來幾乎稱霸台股，每天台股上上下下，都得看它臉色，今天我們來進行簡單的參數優化，看看跟隨外資買賣有沒有搞頭！&lt;/p&gt;
&lt;h3 id=&quot;最佳化外資買賣策略&quot;&gt;&lt;a href=&quot;#最佳化外資買賣策略&quot; class=&quot;headerlink&quot; title=&quot;最佳化外資買賣策略
      
    
    </summary>
    
      <category term="指標分析" scheme="https://koreal6803.github.io/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/"/>
    
      <category term="籌碼面" scheme="https://koreal6803.github.io/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/%E7%B1%8C%E7%A2%BC%E9%9D%A2/"/>
    
    
      <category term="如何買股票" scheme="https://koreal6803.github.io/tags/%E5%A6%82%E4%BD%95%E8%B2%B7%E8%82%A1%E7%A5%A8/"/>
    
      <category term="選股策略" scheme="https://koreal6803.github.io/tags/%E9%81%B8%E8%82%A1%E7%AD%96%E7%95%A5/"/>
    
      <category term="歷史回測" scheme="https://koreal6803.github.io/tags/%E6%AD%B7%E5%8F%B2%E5%9B%9E%E6%B8%AC/"/>
    
      <category term="簡易策略" scheme="https://koreal6803.github.io/tags/%E7%B0%A1%E6%98%93%E7%AD%96%E7%95%A5/"/>
    
  </entry>
  
  <entry>
    <title>超簡單用python抓取每月營收</title>
    <link href="https://koreal6803.github.io/%E8%B6%85%E7%B0%A1%E5%96%AE%E7%94%A8python%E6%8A%93%E5%8F%96%E6%AF%8F%E6%9C%88%E7%87%9F%E6%94%B6/"/>
    <id>https://koreal6803.github.io/超簡單用python抓取每月營收/</id>
    <published>2017-10-28T18:30:39.000Z</published>
    <updated>2017-11-19T03:55:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天承接上次的超簡單python系列，教大家如何得到每家企業每個月的營收。這個系列的最終目的就是讓大家可以創造自己的投資自動化程式，甚至擁有自己的看盤軟體。</p><p>真的不要把程式設計想像的很難，感覺爬2000多支股票，並整理資料，好像是一件很累很痛苦的是情，但真的只需要30行，你可能會覺得這些代碼真的太短了，但真的就是這麼短，然而這必須係建立在python或是R，這些package豐富的腳本語言才有可能辦到，這兩個語言都不錯，但我比較喜歡寫python就是了XD，因為python還可以做很多酷炫的是情，例如寫server，或是一些自動化工具，然而R好像沒有這麼多功能？</p><p>那我們就來爬取吧！首先先決定要爬哪個網頁，我選擇的是<a href="http://mops.twse.com.tw/nas/t21/sii/t21sc03_103_2_0.html" rel="external nofollow noopener noreferrer" target="_blank">TWSE官方網頁</a><br>它的網址是<br><a href="http://mops.twse.com.tw/nas/t21/sii/t21sc03_103_2_0.html" rel="external nofollow noopener noreferrer" target="_blank">http://mops.twse.com.tw/nas/t21/sii/t21sc03_103_2_0.html</a></p><p>各位有看到103這個數字嗎？其實這個就是年份，而緊接在後面的 “2” 就是月份，所以只要改動這兩個值，我們就可以下載不同年月的歷史資訊：</p><figure class="highlight python"><figcaption><span>月爬蟲</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">monthly_report</span><span class="params">(year, month)</span>:</span></div><div class="line">    </div><div class="line">    <span class="comment"># 假如是西元，轉成民國</span></div><div class="line">    <span class="keyword">if</span> year &gt; <span class="number">1990</span>:</div><div class="line">        year -= <span class="number">1911</span></div><div class="line">    </div><div class="line">    <span class="comment"># 下載該年月的網站，並用pandas轉換成 dataframe</span></div><div class="line">    html_df = pd.read_html(<span class="string">'http://mops.twse.com.tw/nas/t21/sii/t21sc03_'</span>+str(year)+<span class="string">'_'</span>+str(month)+<span class="string">'_0.html'</span>)    </div><div class="line">    </div><div class="line">    <span class="comment"># 處理一下資料</span></div><div class="line">    df = html_df[<span class="number">0</span>].copy()</div><div class="line">    df = df[list(range(<span class="number">0</span>,<span class="number">10</span>))]</div><div class="line">    column_index = df.index[(df[<span class="number">0</span>] == <span class="string">'公司代號'</span>)][<span class="number">0</span>]</div><div class="line">    df.columns = df.iloc[column_index]</div><div class="line">    df[<span class="string">'當月營收'</span>] = pd.to_numeric(df[<span class="string">'當月營收'</span>], <span class="string">'coerce'</span>)</div><div class="line">    df = df[~df[<span class="string">'當月營收'</span>].isnull()]</div><div class="line">    df = df[df[<span class="string">'公司代號'</span>] != <span class="string">'合計'</span>]</div><div class="line">    <span class="keyword">return</span> df</div><div class="line"></div></pre></td></tr></table></figure><p>以上這段程式碼就是一個function可以在其它地方隨時呼叫，code真的超短，但這樣就夠了！</p><p>接下來我們隨意讀取任意年月份（可以用民國或是西元都支援）：</p><figure class="highlight python"><figcaption><span>月爬蟲</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># 民國100年1月</span></div><div class="line">monthly_report(<span class="number">100</span>,<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment"># 西元2011年1月</span></div><div class="line">monthly_report(<span class="number">1991</span>,<span class="number">1</span>)</div><div class="line"></div></pre></td></tr></table></figure><p>就會跑出以下的表格：</p><center><img src="/超簡單用python抓取每月營收/table.png" alt="月營收狀況" title="月營收狀況"></center><p>其實寫程式真的好簡單XDD，坊間財經軟體都好貴，不就是幾行code而已，是不是！<br>目前已經交完 日、月 的資料爬取了，下一次就是一季囉！</p><p>當然還有各式各樣可以爬的東西，有時間再跟大家介紹～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天承接上次的超簡單python系列，教大家如何得到每家企業每個月的營收。這個系列的最終目的就是讓大家可以創造自己的投資自動化程式，甚至擁有自己的看盤軟體。&lt;/p&gt;
&lt;p&gt;真的不要把程式設計想像的很難，感覺爬2000多支股票，並整理資料，好像是一件很累很痛苦的是情，但真的只
      
    
    </summary>
    
      <category term="財經Pyhton教學" scheme="https://koreal6803.github.io/categories/%E8%B2%A1%E7%B6%93Pyhton%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="python" scheme="https://koreal6803.github.io/tags/python/"/>
    
      <category term="選股" scheme="https://koreal6803.github.io/tags/%E9%81%B8%E8%82%A1/"/>
    
      <category term="程式設計" scheme="https://koreal6803.github.io/tags/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/"/>
    
  </entry>
  
  <entry>
    <title>本益成長比真的越低越好！？</title>
    <link href="https://koreal6803.github.io/%E6%AF%94%E6%9C%AC%E7%9B%8A%E6%AF%94%E6%9B%B4%E5%A5%BD%E7%94%A8%E7%9A%84%E6%9C%AC%E7%9B%8A%E6%AF%94%E6%88%90%E9%95%B7%E7%8E%87%EF%BC%81/"/>
    <id>https://koreal6803.github.io/比本益比更好用的本益比成長率！/</id>
    <published>2017-10-26T13:58:56.000Z</published>
    <updated>2017-10-28T19:31:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>很久之前有寫過 <strong>本益比</strong> 如何使用，<strong>本益比</strong> 就是看企業股價和獲利之間的關係，選擇小一點的本益比是可以幫助我們選到好股票的，但是每一家公司的本益比都有著天壤之別，所以必須要校正， <strong>本益成長比</strong> 就是一個本益比的進化版。<strong>本益成長比</strong> 不只可以看當下，還考慮了一家公司未來是否能繼續盈利一個指標。</p><p>以下是 <strong>本益成長比</strong> 的公式：</p><p>近4季稅後淨利年增率：(近4季稅後淨利總和 / 去年同期近4季稅後淨利總和 - 1) * 100%<br>本益成長比（PEG）：本益比/近4季稅後淨利年增率</p><p>看起來考慮了公司的成長，所以當PEG越小，代表 <strong>本益比</strong> 越小或是 <strong>淨利年增率</strong> 越大，對投資人來講都是好事情！</p><p>理論上是這樣，而實際上真的是這樣嗎？我們不妨接著看！</p><p>首先我們先算出當前所有上市上櫃其PEG的分佈圖：</p><center><img src="/比本益比更好用的本益比成長率！/dis.png" alt="PEG分佈圖" title="PEG分佈圖"></center><p>可以發現越接近0的越多公司，這種分佈還滿奇特的，我以為接近0的公司會很少才對，沒想到事實竟然跟我想像的相反，感覺好像很多公司的淨利年增率很猛！然而假如我哪裡做錯了，可以直接留言糾正我。</p><p>我們就將公司分成好幾組，每60天選擇PEG在只定範圍內的股票，就可以畫成下圖：</p><center><img src="/比本益比更好用的本益比成長率！/eq.png" alt="每組總資產隨時間變化圖" title="每組總資產隨時間變化圖"></center><p>簡直有夠亂…這說明了PEG難道無效？！感覺是真的很難分辨出越小越好，還是越大越好…，所以我們再畫另一張圖，更好的判斷PEG大小跟獲利的高低：</p><center><img src="/比本益比更好用的本益比成長率！/peg.png" alt="PEG變化與報酬率" title="PEG變化與報酬率"></center><p>圖中的X軸是PEG從小到大，而Y軸是平均獲利，我們發現，當PEG太大獲利真的很差。但當PEG非常小的時候，效果也非常不好。<br>PEG約等於0.5的時候，會有最好的獲利。</p><p>只能說PEG在台股可能不是非常的好用，PEG不能一味的追求越小越好，最好選擇PEG等於 0.5 左右的股票，歷史回測會有比較好的結果。</p><p>我覺得另一個可能的原因是，當PEG過小的時候，可能選入了一些短期內獲利爆起爆落的公司，其公司股價可能先盛後衰，造成投資上的虧損。但我不太確定，還必須做更多功課才能釐清。</p><p>總之以統計的結果來看，PEG並沒有特別顯著的功能，相較於其它介紹過的指標。也有可能是我實驗那裡做錯了，可以留言跟我討論，我會儘速更改！確保大家獲得正確的內容～！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很久之前有寫過 &lt;strong&gt;本益比&lt;/strong&gt; 如何使用，&lt;strong&gt;本益比&lt;/strong&gt; 就是看企業股價和獲利之間的關係，選擇小一點的本益比是可以幫助我們選到好股票的，但是每一家公司的本益比都有著天壤之別，所以必須要校正， &lt;strong&gt;本益成長比&lt;/
      
    
    </summary>
    
      <category term="指標分析" scheme="https://koreal6803.github.io/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/"/>
    
      <category term="基本面" scheme="https://koreal6803.github.io/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/%E5%9F%BA%E6%9C%AC%E9%9D%A2/"/>
    
    
      <category term="選股" scheme="https://koreal6803.github.io/tags/%E9%81%B8%E8%82%A1/"/>
    
      <category term="本益比" scheme="https://koreal6803.github.io/tags/%E6%9C%AC%E7%9B%8A%E6%AF%94/"/>
    
      <category term="指標" scheme="https://koreal6803.github.io/tags/%E6%8C%87%E6%A8%99/"/>
    
      <category term="PEG" scheme="https://koreal6803.github.io/tags/PEG/"/>
    
      <category term="本益成長比" scheme="https://koreal6803.github.io/tags/%E6%9C%AC%E7%9B%8A%E6%88%90%E9%95%B7%E6%AF%94/"/>
    
  </entry>
  
  <entry>
    <title>超簡單台股每日爬蟲教學</title>
    <link href="https://koreal6803.github.io/%E8%B6%85%E7%B0%A1%E5%96%AE%E5%8F%B0%E8%82%A1%E6%AF%8F%E6%97%A5%E7%88%AC%E8%9F%B2%E6%95%99%E5%AD%B8/"/>
    <id>https://koreal6803.github.io/超簡單台股每日爬蟲教學/</id>
    <published>2017-10-24T22:17:06.000Z</published>
    <updated>2017-11-15T12:46:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天教大家如何下載今日的股價，並從中篩選本益比較低的股票，重點是超簡單，只要15行以內就可以辦到！以後這個blog會偶爾釋放一些程式片段，讓大家組裝成一個功能健全的回測＋當日選股的架構。</p><p>大家最終最終會學到：</p><ol><li>如何爬取每日資訊</li><li>如何爬取財報</li><li>利用上述資料來篩選股票</li><li>觀察篩選後的股票在歷史回測中是否能獲利</li><li>每日計算當天獲利與明天操作</li></ol><p>只要長期追蹤這個blog，當我某天心血來潮就會放上一些code，讓大家能夠自行學習並拼裝成自己的系統，以下是我的系統的節圖：</p><center><img src="/超簡單台股每日爬蟲教學/magnet1.png" alt="磁力回測" title="磁力回測"></center><p>可以看到我的系統內每天都有數個選股策略在運行，選股策略每天會公布隔天的操作方式，也可以利用這個介面編寫回測，並驗證策略的效果。磁力回測是我們之前黑客松比賽用的名字，其實我們是台大黑客松第一名得獎團隊，後來又於中信金控黑客松得到第一名，才開始了量化回測之路，現在由於大家比較忙，目前只剩我還在使用這套系統而已XDD。</p><p>這套系統非常完善，我們編寫了幾套策略在上面，獲利還算OK，當然我不可能直接把這套系統公布出來，畢竟這是大家一起做的心血，然而有一些簡單卻重要的功能，我會在這個blog上面分享給大家。只要持續關注本blog，最後大家可以拼裝出自己的系統！</p><p>那就廢話不多說，來看看如何使用 python 爬取當天大盤，首先，我們得先安裝 python 的 package：</p><ol><li><a href="http://docs.python-requests.org/en/master/" rel="external nofollow noopener noreferrer" target="_blank">requests</a> ：幫我們抓取 csv 檔</li><li><a href="https://pandas.pydata.org/pandas-docs/stable/index.html" rel="external nofollow noopener noreferrer" target="_blank">pandas</a>：幫我們選股</li></ol><p>然後就可以開始了，首先抓取台股的資料表：</p><figure class="highlight python"><figcaption><span>crawler</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line">r = requests.post(<span class="string">'http://app.twse.com.tw/ch/trading/exchange/MI_INDEX/MI_INDEX.php'</span>, data=&#123;</div><div class="line">    <span class="string">'download'</span>: <span class="string">'csv'</span>,</div><div class="line">    <span class="string">'qdate'</span>:<span class="string">'106/10/24'</span>,</div><div class="line">    <span class="string">'selectType'</span>:<span class="string">'ALL'</span>,</div><div class="line">&#125;)</div><div class="line">r.encoding = <span class="string">'big5'</span></div><div class="line">df = pd.read_csv(StringIO(<span class="string">"\n"</span>.join([i.translate(&#123;ord(c): <span class="keyword">None</span> <span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">' '</span>&#125;) </div><div class="line">                                     <span class="keyword">for</span> i <span class="keyword">in</span> r.text.split(<span class="string">'\n'</span>) </div><div class="line">                                     <span class="keyword">if</span> len(i.split(<span class="string">'",'</span>)) == <span class="number">16</span> <span class="keyword">and</span> i[<span class="number">0</span>] != <span class="string">'='</span>])), header=<span class="number">0</span>)</div></pre></td></tr></table></figure><p>基本上這個 code 可以直接複製貼上就可以用了！我們可以把df印出來：</p><center><img src="/超簡單台股每日爬蟲教學/allstock.png" alt="台股當天所有上市上櫃公司資訊" title="台股當天所有上市上櫃公司資訊"></center><p>可以看到我們有了所有上市上櫃的股票，當天所有的資料！</p><p>接下來就是選股時間，我們想要選擇 本益比 &lt; 15 的所有股票：</p><figure class="highlight python"><figcaption><span>select stocks</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df[df[<span class="string">'本益比'</span>] &lt; <span class="number">15</span>]</div></pre></td></tr></table></figure><center><img src="/超簡單台股每日爬蟲教學/pe15.png" alt="當天本益比 < 15的股票" title="當天本益比 < 15的股票"></center><p>搭拉！是不是發現選股好簡單！<br>我們之後還會有更多的教學，讓大家不只是選取本益比，還有更多更多的財報數據喔！</p><p>敬請期待！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天教大家如何下載今日的股價，並從中篩選本益比較低的股票，重點是超簡單，只要15行以內就可以辦到！以後這個blog會偶爾釋放一些程式片段，讓大家組裝成一個功能健全的回測＋當日選股的架構。&lt;/p&gt;
&lt;p&gt;大家最終最終會學到：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何爬取每日資訊&lt;/li
      
    
    </summary>
    
      <category term="財經Pyhton教學" scheme="https://koreal6803.github.io/categories/%E8%B2%A1%E7%B6%93Pyhton%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="python" scheme="https://koreal6803.github.io/tags/python/"/>
    
      <category term="選股" scheme="https://koreal6803.github.io/tags/%E9%81%B8%E8%82%A1/"/>
    
      <category term="程式設計" scheme="https://koreal6803.github.io/tags/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/"/>
    
  </entry>
  
  <entry>
    <title>絕無僅有的超強指標！</title>
    <link href="https://koreal6803.github.io/%E7%B5%95%E7%84%A1%E5%83%85%E6%9C%89%E7%9A%84%E8%B6%85%E5%BC%B7%E6%8C%87%E6%A8%99%EF%BC%81/"/>
    <id>https://koreal6803.github.io/絕無僅有的超強指標！/</id>
    <published>2017-10-23T18:24:24.000Z</published>
    <updated>2017-10-28T19:33:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天介紹一個滿常使用的指標，這套指標是我個人發明的，外面絕對看不到，然而我只講個大概，可以自己去實做，或是去拿來衡量個股。</p><p>上一篇中，機器學習發現月收入是一個很好的指標，而且不能只看最近一個月，要一次看好幾個月，其實跟我做出來的實驗結論一致。月收入真的非常好用！</p><p>今天介紹的這個指標，其概念是：希望某股月營收越來越高，之後股價越容易上漲。<br>但是很難定義越來越高，因為有時候會有一些不規則的地方，我們必須要先做一道手續讓它看起來是一個升冪排列，如下圖：</p><center><img src="/絕無僅有的超強指標！/example.png" alt="橘色為某某公司的月營收，藍色為平均之後的月營收" title="橘色為某某公司的月營收，藍色為平均之後的月營收"></center><p>原本的月營收為橘色，雖然看起來有上漲的趨勢，但是參差不齊，所以很難寫成程式判斷條件。<br>可以看到我們把每三個月做一次平均，可以發現曲線變得更平滑了，而且變成升冪排列！</p><p>所以我們就可以寫一個條件，叫做：藍色線段連續N個月越來越大。</p><p>這樣篩選出來的股票真的很猛！</p><p>下圖可以看出，假如我們持有這個方法篩選出來的股票，光是這個單一指標從2008年到現在有5倍的績效，我們可是只用了這個指標而已！算是滿難能可貴的。</p><center><img src="/絕無僅有的超強指標！/eq.png" alt="橘色為指標選股的歷史回測，藍色是大盤" title="橘色為指標選股的歷史回測，藍色是大盤"></center><p>而且選出來很多股票，還有很多過濾的空間！可以從中再繼續篩選股票，這個是我動不動就會幫策略加上的一個條件！</p><center><img src="/絕無僅有的超強指標！/ns.png" alt="橘色為指標選股的歷史回測，藍色是大盤" title="橘色為指標選股的歷史回測，藍色是大盤"></center><p>其中還可以再篩選，例如本益比、股價淨值比等等，可以自由搭配！</p><p>這個指標有兩個參數：</p><ol><li>當我們要平滑月營收曲線時，取最近的 M 個值平均，產生新的曲線</li><li>新的曲線連續 N 個月不斷變高。</li></ol><p>M 跟 N 是很難決定的，我這邊所使用的參數是 M=4 跟 N=5，是試過所有參數的結果。<br>當然大家不一定要用這麼數學的方式，每一支股票拿來慢慢算。最簡單的方法就是用眼睛感覺，股票月營收從大趨勢看，有沒有越來越高，偶爾的參差不齊可以忽略。</p><p>以上就是個人覺得超好用的，且網路上沒人在分享的方法！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天介紹一個滿常使用的指標，這套指標是我個人發明的，外面絕對看不到，然而我只講個大概，可以自己去實做，或是去拿來衡量個股。&lt;/p&gt;
&lt;p&gt;上一篇中，機器學習發現月收入是一個很好的指標，而且不能只看最近一個月，要一次看好幾個月，其實跟我做出來的實驗結論一致。月收入真的非常好用
      
    
    </summary>
    
      <category term="指標分析" scheme="https://koreal6803.github.io/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/"/>
    
      <category term="基本面" scheme="https://koreal6803.github.io/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/%E5%9F%BA%E6%9C%AC%E9%9D%A2/"/>
    
    
      <category term="選股" scheme="https://koreal6803.github.io/tags/%E9%81%B8%E8%82%A1/"/>
    
      <category term="指標" scheme="https://koreal6803.github.io/tags/%E6%8C%87%E6%A8%99/"/>
    
  </entry>
  
  <entry>
    <title>利用Machine Learning 選股新手教學</title>
    <link href="https://koreal6803.github.io/%E5%88%A9%E7%94%A8Machine-Learning-%E9%81%B8%E8%82%A1%E6%96%B0%E6%89%8B%E6%95%99%E5%AD%B8/"/>
    <id>https://koreal6803.github.io/利用Machine-Learning-選股新手教學/</id>
    <published>2017-10-20T10:58:23.000Z</published>
    <updated>2017-10-28T22:03:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直在弄Machine Learning，都快忘記寫blog了，哈！</p><p>其實要machine選股真的很簡單！這篇blog就會帶大家從頭開始，用最簡單的方式，將Machine Learning實做！這邊只是給大家一個簡單的架構，可以自己去嘗試優化，讓它更聰明！以下是用mac或是linux的command line完成的，假如有任何錯誤或不懂的地方歡迎聯絡我喔～</p><center><img src="/利用Machine-Learning-選股新手教學/thumbnail.png" alt="我們今天用的是random forest model!" title="我們今天用的是random forest model!"></center><h3 id="1-取得資料"><a href="#1-取得資料" class="headerlink" title="1. 取得資料"></a>1. 取得資料</h3><p>只要寄到我的信箱，就會免費傳給你一個data.csv檔案，裡面就是training的資料，這個只能用於學術研究，請勿用於商業用途。</p><p>為什麼要這麼麻煩？！不能直接把連結公布於網站上就好了嗎？絕對沒有要收集email的意思，最主要是因為這資料的來源比較複雜。</p><h3 id="2-架設環境"><a href="#2-架設環境" class="headerlink" title="2. 架設環境"></a>2. 架設環境</h3><p>假如你已經會使用python了，那可以直接跳過這個步驟，假如不會的話，可以照著下面的步驟完成：</p><ol><li>到<a href="https://www.python.org/downloads/" rel="external nofollow noopener noreferrer" target="_blank">官網</a>下載<strong>Python3</strong>，並且安裝</li><li>安裝<a href="https://pip.pypa.io/en/stable/" rel="external nofollow noopener noreferrer" target="_blank">pip</a></li><li>安裝<a href="https://virtualenv.pypa.io/en/stable/" rel="external nofollow noopener noreferrer" target="_blank">virtualenv</a></li></ol><h4 id="為何要安裝pip呢？"><a href="#為何要安裝pip呢？" class="headerlink" title="為何要安裝pip呢？"></a>為何要安裝pip呢？</h4><p>pip可以幫我們下載Machine Learning所需要的package（也就是python的libraries）。</p><h4 id="為何要安裝-virtualenv-呢？"><a href="#為何要安裝-virtualenv-呢？" class="headerlink" title="為何要安裝 virtualenv 呢？"></a>為何要安裝 <strong>virtualenv</strong> 呢？</h4><p><strong>virtualenv</strong>可以幫你產生project的環境，每一個project用自己的libraries，這樣比較不容易有衝突。</p><h3 id="3-建置project"><a href="#3-建置project" class="headerlink" title="3. 建置project"></a>3. 建置project</h3><p>首先，先用<strong>virtualenv</strong>創建project<br><figure class="highlight bash"><figcaption><span>create project</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">virtualenv finance_ml</div><div class="line"><span class="built_in">cd</span> finance_ml</div></pre></td></tr></table></figure></p><p>接下來必須要開啟工作環境：<br><figure class="highlight plain"><figcaption><span>activate and deactivate project</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">source bin/activate</div><div class="line">deactivate</div></pre></td></tr></table></figure></p><p>這邊有兩行，一行是開啟環境，一行是結束環境！假如你還要繼續，先不要輸入第二行。<br>將data.csv複製到當前資料夾，並且安裝python packages</p><figure class="highlight plain"><figcaption><span>install python packages</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pip install jupyter</div><div class="line">pip install pandas</div><div class="line">pip install sklearn</div><div class="line">pip install matplotlib</div></pre></td></tr></table></figure><h3 id="4-開工！"><a href="#4-開工！" class="headerlink" title="4. 開工！"></a>4. 開工！</h3><p>首先就是開啟jupyter notebook，並開一個python的環境<br><figure class="highlight plain"><figcaption><span>start notebook</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jupyter notebook</div></pre></td></tr></table></figure><br>這樣會開啟一個網頁版的GUI介面，只要新增python的notebook就可以用了！<br>接下來進入我們的主題：機器學習程式碼！</p><h4 id="A-讀入資料"><a href="#A-讀入資料" class="headerlink" title="A. 讀入資料"></a>A. 讀入資料</h4><p>這邊我們用 pandas 讀入所需要的資料，index_col可以設定要哪一個columns當作index。這邊的index選擇在 data.csv 中，第一個未命名的column。<br><figure class="highlight python"><figcaption><span>read data</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line">data = pd.read_csv(<span class="string">'data.csv'</span>, index_col=<span class="string">'Unnamed: 0'</span>)</div></pre></td></tr></table></figure></p><h4 id="B-處理資料"><a href="#B-處理資料" class="headerlink" title="B.處理資料"></a>B.處理資料</h4><p>我們將資料分成三類，一類是跑回測用的dbacktest，另一類是機器學習用的dtraning，另外一個是traning完用來評估的dtest。</p><figure class="highlight python"><figcaption><span>process data</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</div><div class="line"></div><div class="line"><span class="comment"># clear data 將爛資料去掉</span></div><div class="line">data.dropna(how=<span class="string">'any'</span>, inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment"># 選擇2015年以後的資料作為回測用</span></div><div class="line">dbacktest = data[data[<span class="string">'buy_date'</span>] &gt; <span class="string">'2015'</span>]</div><div class="line"></div><div class="line"><span class="comment"># 將其於的資料再分成兩類：dtrain 跟 dtest</span></div><div class="line">dataTrainTest = data[data[<span class="string">'sell_date'</span>] &lt; <span class="string">'2015'</span>]</div><div class="line">dtrain, dtest = train_test_split(dataTrainTest, test_size=<span class="number">0.10</span>, random_state=<span class="number">42</span>)</div><div class="line"></div><div class="line"><span class="comment"># 設定我們的feature要用哪些</span></div><div class="line">features = data.columns[<span class="number">5</span>:<span class="number">-1</span>]</div></pre></td></tr></table></figure><h4 id="C-機器學習訓練資料"><a href="#C-機器學習訓練資料" class="headerlink" title="C. 機器學習訓練資料"></a>C. 機器學習訓練資料</h4><p>這邊我們用很簡單的<a href="https://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm" rel="external nofollow noopener noreferrer" target="_blank">隨機森林</a>，來完成的，可以參考連結來學習怎麼樣調整參數，這應該算是機器學習中，前製作業最少的模型了！</p><figure class="highlight python"><figcaption><span>learning</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</div><div class="line"></div><div class="line"><span class="comment"># 創建機器學習的model</span></div><div class="line">rf = RandomForestClassifier(n_estimators=<span class="number">10</span>, criterion=<span class="string">'gini'</span>, </div><div class="line">                            max_depth=<span class="keyword">None</span>, min_samples_split=<span class="number">2</span>, </div><div class="line">                            min_samples_leaf=<span class="number">1</span>, min_weight_fraction_leaf=<span class="number">0.0</span>, </div><div class="line">                            max_features=<span class="string">'auto'</span>, max_leaf_nodes=<span class="keyword">None</span>, </div><div class="line">                            bootstrap=<span class="keyword">True</span>, oob_score=<span class="keyword">False</span>, n_jobs=<span class="number">1</span>, </div><div class="line">                            random_state=<span class="keyword">None</span>, verbose=<span class="number">0</span>, warm_start=<span class="keyword">False</span>, </div><div class="line">                            class_weight=<span class="keyword">None</span>)</div><div class="line"><span class="comment"># 分類能 獲利 &gt; 10％ 的股票</span></div><div class="line">rf.fit(dtrain[features], dtrain[<span class="string">'獲利'</span>] &gt; <span class="number">1</span>)</div><div class="line"></div></pre></td></tr></table></figure><h4 id="D-結果"><a href="#D-結果" class="headerlink" title="D. 結果"></a>D. 結果</h4><p>你說這樣就結束了！？對呀結束了。其實machine learning要簡單真的就只是這樣而已！<br>接下來我們來看一下它預測的准不準：</p><figure class="highlight python"><figcaption><span>predict</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">result = rf.predict(dtest[features])</div><div class="line"></div><div class="line">print(<span class="string">'test data'</span>)</div><div class="line">print(<span class="string">'gain before filtered'</span>, dtest[<span class="string">'獲利'</span>].mean())</div><div class="line">print(<span class="string">'gain after filtered'</span>, dtest[<span class="string">'獲利'</span>][result].mean())</div><div class="line">print(<span class="string">'num stocks'</span>, sum(result), <span class="string">'/'</span>, len(dtest))</div><div class="line"></div><div class="line">result = rf.predict(dbacktest[features])</div><div class="line"></div><div class="line">print(<span class="string">'backtest data'</span>)</div><div class="line">print(<span class="string">'gain before filtered'</span>, dbacktest[<span class="string">'獲利'</span>].mean())</div><div class="line">print(<span class="string">'gain after filtered'</span>, dbacktest[<span class="string">'獲利'</span>][result].mean())</div><div class="line">print(<span class="string">'num stocks'</span>, sum(result), <span class="string">'/'</span>, len(dbacktest))</div><div class="line"></div></pre></td></tr></table></figure><p>假如一切順利就會看到以下結果：</p><center><img src="/利用Machine-Learning-選股新手教學/result.png" alt="結果" title="結果"></center><br>這邊的gain是指平均的報酬率，也就是所有股票的價格在賣出時是否賺錢，小於一就是虧，大於一就是賺。<br><br>結果看起來還滿猛的！竟然有接近7%的報酬率！<br><br>但真的是如此嗎？我們把它畫成隨著時間，本金成長的獲利圖：<br><br><figure class="highlight python"><figcaption><span>backtest</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">%matplotlib inline</div><div class="line"></div><div class="line">dbacktest[<span class="string">'預測'</span>] = pd.Series(result, index=dbacktest.index)</div><div class="line">dates = list(set(dbacktest[<span class="string">'buy_date'</span>]))</div><div class="line">dates.sort()</div><div class="line"></div><div class="line">history = []</div><div class="line"><span class="keyword">for</span> d <span class="keyword">in</span> dates:</div><div class="line">    history.append(dbacktest[(dbacktest[<span class="string">'buy_date'</span>] == d) &amp; (dbacktest[<span class="string">'預測'</span>])][<span class="string">'獲利'</span>].mean())</div><div class="line">    </div><div class="line">pd.Series(history, index=dates).cumprod().plot()</div></pre></td></tr></table></figure><br><br><center><img src="/利用Machine-Learning-選股新手教學/eq.png" alt="權益曲線" title="權益曲線"></center><p>發現其實沒有想像中那麼好。這是意料之中的結果，畢竟我們的learning時間才幾秒鐘，假如增加n_estimator這個變數，是否可以讓結果更好？假如使用Regression會不會更好？假如改變一下機器學習的參數、或修改一下features，是否可以選到更好的股票呢？就留給各位慢慢玩！以下是可以改進的地方：</p><ol><li>feature engineering：將features做修正、刪除、normalize等</li><li>篩選能獲利X%的股票</li><li>classification vs regression：可以兩種都試試看</li><li>不同的model，可以試試SVM、NN、XGBoost等等</li><li>不同的model都有可以調整超多參數來達到優化</li><li>利用early stop 來預防overfitting。</li></ol><p>我只是列出最基本的，還有很多可以玩的，這也是我這禮拜正在弄的東西，害我都沒時間寫網誌XDD</p><p>假如你有意外的發現，可以聯絡我，我可以幫你架設一個選股平台，我們再來討論怎麼分潤之類的，但前提是結果必須要比我的好才行XDDD。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近一直在弄Machine Learning，都快忘記寫blog了，哈！&lt;/p&gt;
&lt;p&gt;其實要machine選股真的很簡單！這篇blog就會帶大家從頭開始，用最簡單的方式，將Machine Learning實做！這邊只是給大家一個簡單的架構，可以自己去嘗試優化，讓它更聰明！
      
    
    </summary>
    
      <category term="財經Pyhton教學" scheme="https://koreal6803.github.io/categories/%E8%B2%A1%E7%B6%93Pyhton%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="機器學習" scheme="https://koreal6803.github.io/tags/%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92/"/>
    
      <category term="Machine Learning" scheme="https://koreal6803.github.io/tags/Machine-Learning/"/>
    
      <category term="python" scheme="https://koreal6803.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning 表示：看季線最無用！</title>
    <link href="https://koreal6803.github.io/Machine-Learning-%E8%A1%A8%E7%A4%BA%EF%BC%9A%E7%9C%8B%E5%AD%A3%E7%B7%9A%E6%9C%80%E7%84%A1%E7%94%A8%EF%BC%81/"/>
    <id>https://koreal6803.github.io/Machine-Learning-表示：看季線最無用！/</id>
    <published>2017-10-15T16:10:12.000Z</published>
    <updated>2017-10-28T19:36:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近喜歡做 machine learning 的預測，發現機器學習看財報，預測下季收盤價還滿準的。</p><p>Alpha Go 讓人類的圍棋可以到達新境界，機器學習中學習到一些它判斷財報的方法，今天來剖開上一篇教學中，機器學習的大腦，來看一下機器人如何選股！</p><center><img src="/Machine-Learning-表示：看季線最無用！/thumbnail.jpeg" alt="機器學習" title="機器學習"></center><h3 id="Machine-Learning：季線無用！"><a href="#Machine-Learning：季線無用！" class="headerlink" title="Machine Learning：季線無用！"></a>Machine Learning：季線無用！</h3><p>機器學習的模型就像是一個黑盒子，很難知道他其中的工作原理，只能看到線性化後，每個feature的權重。發現了一個很有趣的狀況，就是 “股價在季線上” 這個條件，權重超低！</p><p>假如你買賣股票也跟我的模型一樣，是根據每一季財報來決定，那機器學習的結果，表示不用看季線，因為幾乎沒啥用。</p><p>看季線還不如看近10週收盤價！發現把週收盤價納入參考，也可以增進效果。代表長線的技術指標是有用的！</p><h3 id="重要的財報數據"><a href="#重要的財報數據" class="headerlink" title="重要的財報數據"></a>重要的財報數據</h3><p>以下features的重要程度按順序排列：</p><ol><li><strong>月營收增長率</strong>很重要，而且不能只看一個月！</li><li><strong>當季ROE</strong>跟<strong>去年同季ROE</strong>很重要！</li><li><strong>EPS季增長率</strong>也很重要！</li><li><strong>總資產轉換率</strong> 較不重要，但也不賴啦！</li><li>其它，重要程度：<strong>股價淨值比</strong> = <strong>負債比率</strong> &gt; <strong>本益比</strong> = <strong>殖利率</strong></li><li><strong>週收盤價</strong>比上面的難用，但好像可以判斷一些東西，但一定是非線性的，所以不知道其中原理XD</li><li>重要程度趨近於0的：<strong>收盤 &gt; 季線</strong></li></ol><p>真的很少網站可以像這裡一樣，告訴你哪些是比較有用的數據，哪些比較難用，我們真的要跟機器來學習，一般人都會認為股價淨值比、本益比是最重要的，但是這邊做出了一個不一樣的結論：<strong>營收是否增加</strong>才是股票漲跌的關鍵。</p><p>這樣做的用意只是給大家一個概念，也不代表機器學習的結果就得奉為聖旨。</p><h3 id="機器學習評分財報"><a href="#機器學習評分財報" class="headerlink" title="機器學習評分財報"></a>機器學習評分財報</h3><p>機器學習模型最後會幫每個股票評分，總共100分，最低0分，50分就是他覺得股票不漲不跌，所以我們將每季評分分成四組，由低到高：</p><center><img src="/Machine-Learning-表示：看季線最無用！/dis.png" alt="歷史所有財報的評分" title="歷史所有財報的評分"></center><p>可以看到有很多的評分都在0分跟100分，因為分數算法的關係，100分的部分可以想成超過一百分！（國軍online）</p><p>之後會在將 0 跟 100 分再區分清楚一點～</p><h3 id="回測！"><a href="#回測！" class="headerlink" title="回測！"></a>回測！</h3><p>接下來我們將分數由低到高分4組，分別回測：</p><center><img src="/Machine-Learning-表示：看季線最無用！/eq.png" alt="回測" title="回測"></center><p>報酬率由低到高很漂亮的一字排開！分數低果然很差，而分數高真的很好。<br>可以看到50分以上的兩組，其獲利贏過大盤（黃色），而50以下的兩組，其獲利小於大盤。</p><h3 id="財報好的公司，抗跌！"><a href="#財報好的公司，抗跌！" class="headerlink" title="財報好的公司，抗跌！"></a>財報好的公司，抗跌！</h3><p>資優生組別（灰色）幾乎每季都漲！唯一一次跌是在2015年中，當時大盤大跌，但資優生那組並沒有跌非常多。</p><h3 id="穩定的報酬率"><a href="#穩定的報酬率" class="headerlink" title="穩定的報酬率"></a>穩定的報酬率</h3><p>大盤三年1.05倍，而高分財報組1.75倍，平均報酬率20％每年。</p><h3 id="別用這個策略亂放空！"><a href="#別用這個策略亂放空！" class="headerlink" title="別用這個策略亂放空！"></a>別用這個策略亂放空！</h3><p>從上圖也可以看到一個現象：不要亂放空，不然會慘慘的。就算財報在爛，最差的那組還是沒辦法一直跌，但財報最好的那組可以漲很多！</p><p>這裡用2015年以前的資料訓練，2015年以後拿來回測，所以這個應該就會是實際策略上線的狀況！（理論上XDD）</p><p>接下來會閉關幾天，把這個策略放在雲端，大家都可以去使用！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近喜歡做 machine learning 的預測，發現機器學習看財報，預測下季收盤價還滿準的。&lt;/p&gt;
&lt;p&gt;Alpha Go 讓人類的圍棋可以到達新境界，機器學習中學習到一些它判斷財報的方法，今天來剖開上一篇教學中，機器學習的大腦，來看一下機器人如何選股！&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="AI看股票" scheme="https://koreal6803.github.io/categories/AI%E7%9C%8B%E8%82%A1%E7%A5%A8/"/>
    
    
      <category term="機器學習" scheme="https://koreal6803.github.io/tags/%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92/"/>
    
      <category term="Machine Learning" scheme="https://koreal6803.github.io/tags/Machine-Learning/"/>
    
      <category term="python" scheme="https://koreal6803.github.io/tags/python/"/>
    
      <category term="選股" scheme="https://koreal6803.github.io/tags/%E9%81%B8%E8%82%A1/"/>
    
  </entry>
  
  <entry>
    <title>讓Machine Learning幫你看財報！</title>
    <link href="https://koreal6803.github.io/%E8%AE%93Machine-Learning%E5%B9%AB%E4%BD%A0%E7%9C%8B%E8%B2%A1%E5%A0%B1%EF%BC%81/"/>
    <id>https://koreal6803.github.io/讓Machine-Learning幫你看財報！/</id>
    <published>2017-10-13T10:07:13.000Z</published>
    <updated>2017-10-28T19:36:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>機器學習不是我很專攻的領域，但幸好現在很多強大的package，可以直接使用，假如你不想深入開發model的話，只要把它當作黑箱子就好了，把它插上插頭，讓資料流進去、流出來。很簡單！</p><center><img src="/讓Machine-Learning幫你看財報！/thumbnail.jpeg" alt="機器學習" title="機器學習"></center><p>可以私下聯絡我，或留言給我email來拿到訓練資料，在坊間一定是要賣錢的，甚至連課程一起賣，一定會打著python、財經、大數據、機器學習、神經網路 等名號開課，一堂課5000元之類的。</p><p>但我想說算了啦，反正我就是個草根碼農XDD，希望大家可以一起互相切磋。</p><p>之前寫的策略，選股方式都是用條件拼湊的：</p>$$\mathbb{S}=\left\{ s\mid\text{ROE}_{s}>3\text{ and }\text{PB}_{s}<1.5\right\}$$ <p="">但是現在用machine learning的話，就會寫成這樣：<p></p>$$\mathbb{S}=\left\{ s\mid f(\text{ROE}_{s},\text{PB}_{s})=1\right\}$$<p>這邊用的是分類（classification），假如覺得會上漲，就是1，會下跌就是0。<br>上面的$f$ 就是機器學習的model，我們不太知道這個是個怎樣的函數，因為這個model不是一個公式，而是經過資料訓練而來的。這個簡單的範例只有2個features：ROE、PB。只是一個例子而已，下面會有更多的features：</p><h3 id="資料"><a href="#資料" class="headerlink" title="資料"></a>資料</h3><p>資料是從2010年底，到2017年，每次財報截止的隔天買入，並在下次財報截止前賣出。<br>至於features就是用<a href="/tags/歷史回測/">之前寫文章</a>，覺得好用的：</p><ul><li><strong>月營收</strong> 買入前12個月</li><li><strong>ROE</strong> 買入前12季財報</li><li><strong>本益比</strong> 買入前一天</li><li><strong>股價淨值比</strong> 買入前一天</li><li><strong>殖利率</strong> 最近一期</li><li>股價是否大於季線</li><li>股價是否大於半年線</li><li><strong>負債比率</strong> 買入前12季財報</li></ul><p>可以到這裡下載歷史資料，假如有人訓練的比我的好的話（應該滿簡單的），歡迎一起討論，我們可以一起合作建構一個初版的平台，或是有人想要train不同的feature，也歡迎留言給我。</p><p>除了上述的features，每筆資料還包含：</p><ul><li>stock_ID 股票的代號</li><li>buy_date 買入日期</li><li>buy_price 買入開盤價</li><li>sell_date 賣出開盤價</li><li>sell_price 賣出價格</li><li>gain 賣出價/買入價</li></ul><p>不確定這些歷史數據，有沒有錯，假如不放心，可以幫我稍微檢驗一下，另外，關於買賣日期，我是參考IFRS制度上市前後不同的財報截止日，然而有些企業遲交財報，就沒辦法了…所以會包含一點未來數據。</p><p><a href="http://www.rich01.com/2015/11/blog-post_28.html" rel="external nofollow noopener noreferrer" target="_blank">這篇文章</a>有講到財報遲交的公司，還是別買的好，而每年大約只有100檔家公司會遲交財報，以整體資料而言，未來數據應該不會太多（我覺得啦XD，但不知道資料科學家們怎麼看就是了）。</p><p>資料僅供學術發展，請勿用於商業用途！</p><h3 id="訓練model的方式"><a href="#訓練model的方式" class="headerlink" title="訓練model的方式"></a>訓練model的方式</h3><p>由於我想要弄一個快速的prototype，所以先使用random forest model，這樣就不用proprocessing了XDD</p><figure class="highlight python"><figcaption><span>Model</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</div><div class="line">rf = RandomForestClassifier(n_estimators=<span class="number">500</span>, max_leaf_nodes=<span class="keyword">None</span>, class_weight=<span class="string">'balanced'</span>)</div></pre></td></tr></table></figure><p>以上是用sklearn裡的模型，連參數什麼都沒給，這樣的效果還OK了。訓練時，training data使用2014年以前的資料，而test data是2015年以後的資料</p><h3 id="結果太好了，我不敢相信…"><a href="#結果太好了，我不敢相信…" class="headerlink" title="結果太好了，我不敢相信…"></a>結果太好了，我不敢相信…</h3><p>以下是還沒篩選前的獲利分佈圖，這邊的獲利是用倍數來衡量，也就是 賣出價格/買入價格。可以看到，這是一個對稱於1的分佈圖，大於1（賺）跟小於1（賠）其實很接近，其平均值是在1.005左右，你有看到一藍藍的地方嗎？那就是篩選後的標的：</p><center><img src="/讓Machine-Learning幫你看財報！/dis1.png" alt="2015年後獲利分佈" title="2015年後獲利分佈"></center><p>下面我們把藍色的地方直接畫一張圖，可以發現篩選後，發現結果好很多，分佈偏向大於1，也就是很多的選擇是有獲利的！</p><center><img src="/讓Machine-Learning幫你看財報！/dis2.png" alt="2015年後篩選後獲利分佈" title="2015年後篩選後獲利分佈"></center><p>平均來到了1.10左右，代表每季買一群股票，平均來說會賺10％左右。且勝率來到了70.2%</p><p>對於這樣的結果，我感到有點難過，因為成果太好代表裡面一定有什麼問題，我還是抱著懷疑的態度，各位可以做最嚴格的檢驗，機器學習不是我的範疇，願意虛心受教，或是你還希望有什麼額外的features呢？我幾乎都可以幫你生成客製的test data喔！</p></1.5\right\}$$>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;機器學習不是我很專攻的領域，但幸好現在很多強大的package，可以直接使用，假如你不想深入開發model的話，只要把它當作黑箱子就好了，把它插上插頭，讓資料流進去、流出來。很簡單！&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/讓Machine-Learning幫你看財報
      
    
    </summary>
    
      <category term="AI看股票" scheme="https://koreal6803.github.io/categories/AI%E7%9C%8B%E8%82%A1%E7%A5%A8/"/>
    
    
      <category term="機器學習" scheme="https://koreal6803.github.io/tags/%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92/"/>
    
      <category term="Machine Learning" scheme="https://koreal6803.github.io/tags/Machine-Learning/"/>
    
      <category term="python" scheme="https://koreal6803.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>回測框架介紹</title>
    <link href="https://koreal6803.github.io/%E5%9B%9E%E6%B8%AC%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%B4%B9/"/>
    <id>https://koreal6803.github.io/回測框架介紹/</id>
    <published>2017-10-12T11:39:12.000Z</published>
    <updated>2017-10-28T19:55:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>每次回測的時候，大家一定會有疑問，雖然已經寫了選股的條件，但實際上到底是怎麼運作的？這篇文章會介紹這個回測的方式。這篇比較數學一點，但用這種方法表示會比較明確，有線性代數的基礎就夠了。</p><p>首先我們先假設營業日，從1到$n^{d}$天，代表所有回測的天數：</p><p>$$d=1,…,n^{d}$$ </p><p>另外還有一群股票，是我們可能買入的對象</p><p>$$s=1,…,n^{s}$$</p><p>另外，而選股條件(constraints)叫做</p>$$c(d,s)\in\{0,1\}$$<p>假如某日 $d$ ，我們發現 $s$ 股票符合條件，那我們可以說$c(d,s)=1$，假如不符合條件，就是$c(d,s)=0$</p><p>為了方便，我們用一個向量來表示第 $d$ 天每支股票是否符合條件：</p><p>$$\boldsymbol{c}_{d}=[c(d, 1),…,c(d, n^s)]^T$$</p><p>然而我們只希望每 $n$ 天換一次手上的持股，不要每天都換，不然會花太多手續費，所以我們定義一個過 $n$ 天才檢查一次股票是否符合條件：</p>$$\boldsymbol{c}_{d}^{*}=\boldsymbol{c}_{\left\lfloor (d-1)/n\right\rfloor n+1}$$<p>於是，我們在$d$天晚上，用 $\boldsymbol{c}_{d}^{*}$ 來決定明天如何買股：</p>$$\boldsymbol{h}_{d+1} = \left(\frac{m+\boldsymbol{h}_{d}^{*T}\boldsymbol{p}_{d}}{\text{sum}(\boldsymbol{c}_{d}^{*})}\boldsymbol{c}_{d}^{*}\right)^T$$其中，$\boldsymbol{h}_{d+1}$ 代表明天每支股票要分多少錢， $\boldsymbol{h}_{d}^{*T}$ 代表今晚持股（單位為一張），而 $m$ 為帳戶資金 $\boldsymbol{p}_{d}$ 代表收盤價乘以1000。其實它只是看起來醜了點，概念很簡單，計算所有的資產，並且將資產平均分配給符合條件的股票。<p>以上的持股方式，就是一種完美分散的概念，是美好的想像，通常是blog中回測權益曲線的<strong>藍線</strong>，但現實生活中，資產不可能分散得如此完美，所以還必須算出可以買幾張股票：</p>$$\boldsymbol{h}_{d+1}^{*}=\left[\left\lfloor \frac{h_{d+1,1}}{1.1p_{d,1}}\right\rfloor ,...,\left\lfloor \frac{h_{d+1,n^{s}}}{1.1p_{d,n^{s}}}\right\rfloor \right]^{T}$$這邊有點要注意，$\boldsymbol{h}_{d+1}^{*}$ 的單位是張數，而原本的 $\boldsymbol{h}_{d+1}$ 的單位是投資金額。乘以 1.1 是為了在開盤時用漲停板買入。然而這條公式每天都會計算，所以在歷史回測中，每天的張數是浮動的，也就是說，某天我買了6張某股，隔天我可能會變成5張、或7張某股，都是有可能的。<p>考慮了張數的，更貼近真實情況，通常是blog中回測權益曲線的<strong>紅線</strong>。</p><h3 id="目前所知道的缺點"><a href="#目前所知道的缺點" class="headerlink" title="目前所知道的缺點"></a>目前所知道的缺點</h3><ol><li>長線還算堪用，但短線上這種直接平分資產的方式，手續費還是太高了，到底要怎麼降低手續費呢？有沒有辦法不要單純平均分散？可以做到智慧型的平均分散？</li><li>這個方法並沒有資產利用最大化（因為無條件捨去法），有沒有讓資產最大化、又可以考慮手續費的選股函數呢？</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;每次回測的時候，大家一定會有疑問，雖然已經寫了選股的條件，但實際上到底是怎麼運作的？這篇文章會介紹這個回測的方式。這篇比較數學一點，但用這種方法表示會比較明確，有線性代數的基礎就夠了。&lt;/p&gt;
&lt;p&gt;首先我們先假設營業日，從1到$n^{d}$天，代表所有回測的天數：&lt;/p&gt;
      
    
    </summary>
    
      <category term="選股策略" scheme="https://koreal6803.github.io/categories/%E9%81%B8%E8%82%A1%E7%AD%96%E7%95%A5/"/>
    
    
  </entry>
  
  <entry>
    <title>財報狗選股讓你免費取得價值4000元/年的策略</title>
    <link href="https://koreal6803.github.io/%E8%B2%A1%E5%A0%B1%E7%8B%97%E9%81%B8%E8%82%A1%E6%A2%9D%E4%BB%B6%E6%9C%80%E4%BD%B3%E5%8C%96/"/>
    <id>https://koreal6803.github.io/財報狗選股條件最佳化/</id>
    <published>2017-10-11T17:17:45.000Z</published>
    <updated>2017-10-28T20:02:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天滿認真的，幫大家排列組合選股條件，這些選股條件都可以從<a href="https://statementdog.com/pick/tpe" rel="external nofollow noopener noreferrer" target="_blank">財報狗的網站</a>免費取得。</p><center><img src="/財報狗選股條件最佳化/thumbnail.jpeg" alt="機器學習" title="機器學習"></center><p>基本上這個策略，結果跟CMoney的<a href="http://www.cmoney.tw/app/ItemContent.aspx?id=2032" rel="external nofollow noopener noreferrer" target="_blank">富貴滿盈價值股</a>差不多，但是人家一年要將近4000元，而財報狗是完全不用錢！</p><p>財報狗的選股條件，自己排列組合可能會很慘，我用程式幫大家找，可以看到歷史績效，可能會比較可靠一點！</p><p>分享目前自己發現最好，且可以用財報狗選股網站，免費選出股票的策略～</p><h3 id="免費的東西最貴？"><a href="#免費的東西最貴？" class="headerlink" title="免費的東西最貴？"></a>免費的東西最貴？</h3><p>免費的東西真的很貴，假如你不靠任何投資老師，不靠長輩指導，短時間學會如何買股票，並能穩定獲利，基本上不太可能。（除非你也寫程式XD）</p><p>另外一個方式就是多來這晃晃XDDD（推銷）<br>今天就來打破這個概念，從免費垃圾中挖出寶！<br>把財報狗所有條件排列組合，自己能力所及，產生的最好回測，重點是免費！</p><h3 id="回測的心得"><a href="#回測的心得" class="headerlink" title="回測的心得"></a>回測的心得</h3><p>我發現，財報狗條件，最主要就是選擇好公司，然而好公司股價不一定便宜，所以另外要用<strong>本益比</strong>跟<strong>股價淨值比</strong>來篩選出便宜股。</p><p>另外也發現<strong>本益比</strong>不是越小越好，這個策略調成15倍以下，再低就不行了，會造成波動變大，但是<strong>股價淨值比</strong>，可以調到1以下，結果還是不錯！</p><p>假如股票數目太多，可先挑<strong>股價淨值比</strong>小的，可能會比較好！（只是推測）<br><strong>但假如不想要深入研究每支股票，大前提一定是盡量分散，不然就得認真研究公司的體質！</strong></p><h3 id="回測方法"><a href="#回測方法" class="headerlink" title="回測方法"></a>回測方法</h3><p>這個策略所用到的條件（財報狗都有）：</p><ul><li>EPS近五年成長率 &gt; 1.1</li><li>ROE近四季總和 &gt; 0</li><li>流動比率1年 &gt; 200</li><li>近5年EPS &gt; 0</li><li>本益比 &lt; 15</li><li>股價淨值比 &lt; 1.5</li></ul><p>另外，我測試了60天跟120天的，發現差不多，所以大約半年換股一次就可以了<br>以下是回測結果，紅色是用100萬當起始資金，並考慮手續費、減資、利息，主要是以逼近藍色的選股策略為準，盡量平均分散，最小單位1張：</p><center><img src="/財報狗選股條件最佳化/eq.png" alt="回測結果" title="回測結果"></center><p>可以發現金融海嘯的時候，還是很可怕，海嘯完反彈也很猛！但是照這樣投資，2009年心臟要夠大顆，因為100萬就這麼沒了…</p><p>除非你的策略天生可以躲避大盤，不然一定要做大盤的篩選！之後也想寫一些預測大盤的策略，大家不妨偶爾來拜訪一下這個部落格。</p><p>接下來來看股票數：</p><center><img src="/財報狗選股條件最佳化/ns.png" alt="買股數目" title="買股數目"></center><p>有時候要買到75張不同的股票，大家應該都沒有這麼多財力吧XD，有時候覺得自己的blog根本是為了有錢人寫的？XD其實我也不想…但本金夠真的比較好買股票。</p><h3 id="小提醒"><a href="#小提醒" class="headerlink" title="小提醒"></a>小提醒</h3><p>有些地方我好像定義的跟財報狗不太一樣，例如：一年ROE，我是用4季去加總的，可能會有點誤差，畢竟我也不在財報狗裡面上班XDD，但結果應該差不了太多。</p><h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><p>那！今天分享了一個可以模仿的策略了，歡迎其它人來檢查一下，這樣的策略是否能夠獲利，畢竟我是工程師，工程師的程式裡，一定會有bug。。。歡迎大家來找碴！</p><p>今天從頭到尾，花了2個小時才寫完的，假如喜歡我的部落格，可以加一下我的最愛，每個禮拜都有兩三篇新文章喔！（不敢再說每天，上週末已破功XDD）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天滿認真的，幫大家排列組合選股條件，這些選股條件都可以從&lt;a href=&quot;https://statementdog.com/pick/tpe&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;財報狗的
      
    
    </summary>
    
      <category term="財報狗分析" scheme="https://koreal6803.github.io/categories/%E8%B2%A1%E5%A0%B1%E7%8B%97%E5%88%86%E6%9E%90/"/>
    
    
      <category term="如何買股票" scheme="https://koreal6803.github.io/tags/%E5%A6%82%E4%BD%95%E8%B2%B7%E8%82%A1%E7%A5%A8/"/>
    
      <category term="選股策略" scheme="https://koreal6803.github.io/tags/%E9%81%B8%E8%82%A1%E7%AD%96%E7%95%A5/"/>
    
  </entry>
  
  <entry>
    <title>教你用財報狗巴菲特免費選股</title>
    <link href="https://koreal6803.github.io/%E6%95%99%E4%BD%A0%E7%94%A8%E8%B2%A1%E5%A0%B1%E7%8B%97%E5%B7%B4%E8%8F%B2%E7%89%B9%E5%85%8D%E8%B2%BB%E9%81%B8%E8%82%A1/"/>
    <id>https://koreal6803.github.io/教你用財報狗巴菲特免費選股/</id>
    <published>2017-10-10T21:51:50.000Z</published>
    <updated>2017-11-01T23:30:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天來試試看<a href="https://statementdog.com/pick/tpe" rel="external nofollow noopener noreferrer" target="_blank">財報狗的巴菲特選股條件</a>，由於是免費的，任何人都可以使用他們的工具來篩選股票喔！用起來很方便，但是沒有歷史回測，不知道要怎麼選才好？繼續往下看吧！</p><h3 id="總共有九種條件、三個三個一組"><a href="#總共有九種條件、三個三個一組" class="headerlink" title="總共有九種條件、三個三個一組"></a>總共有九種條件、三個三個一組</h3><center><img src="/教你用財報狗巴菲特免費選股/conditions.png" alt="所有的條件" title="所有的條件"></center><p>但一眼看過去就知道，就算這九個全選，還是會有問題：無法選出便宜股！</p><p>沒差，今天就是給大家一個感覺，想說將 3 x 3 x 3 = 27種 回測都跑一遍，來看一下哪些條件適合幾年！</p><h3 id="回測方法"><a href="#回測方法" class="headerlink" title="回測方法"></a>回測方法</h3><p>回測每125天重新篩選一次股票，當即將減資時，會賣出股票，等到減資完才買回（方便做回測），假設資產平均分散，不計算手續費，以下是2010年到現在的獲利：</p><table><thead><tr><th>負債比率n年小於30％</th><th>ROE近n年大於15%</th><th>自由現金流n年大於0</th><th>2010到至今結果</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td><td>1.81485895666</td></tr><tr><td>1</td><td>1</td><td>3</td><td>1.80611662219</td></tr><tr><td>1</td><td>1</td><td>5</td><td>1.80843692158</td></tr><tr><td>1</td><td>3</td><td>1</td><td>1.72557247746</td></tr><tr><td>1</td><td>3</td><td>3</td><td>1.73936608665</td></tr><tr><td>1</td><td>3</td><td>5</td><td>1.74036307227</td></tr><tr><td>1</td><td>5</td><td>1</td><td>1.66120834512</td></tr><tr><td>1</td><td>5</td><td>3</td><td>1.67544848703</td></tr><tr><td>1</td><td>5</td><td>5</td><td>1.67539061791</td></tr><tr><td>3</td><td>1</td><td>1</td><td>1.86507507328</td></tr><tr><td>3</td><td>1</td><td>3</td><td>1.8550489791</td></tr><tr><td>3</td><td>1</td><td>5</td><td>1.85421160215</td></tr><tr><td>3</td><td>3</td><td>1</td><td>1.76061835832</td></tr><tr><td>3</td><td>3</td><td>3</td><td>1.7777823463</td></tr><tr><td>3</td><td>3</td><td>5</td><td>1.77461231039</td></tr><tr><td>3</td><td>5</td><td>1</td><td>1.69140364261</td></tr><tr><td>3</td><td>5</td><td>3</td><td>1.70853820166</td></tr><tr><td>3</td><td>5</td><td>5</td><td>1.704449199</td></tr><tr><td>5</td><td>1</td><td>1</td><td>1.65133067584</td></tr><tr><td>5</td><td>1</td><td>3</td><td>1.63659256796</td></tr><tr><td>5</td><td>1</td><td>5</td><td>1.6355617308</td></tr><tr><td>5</td><td>3</td><td>1</td><td>1.72904553438</td></tr><tr><td>5</td><td>3</td><td>3</td><td>1.7426988829</td></tr><tr><td>5</td><td>3</td><td>5</td><td>1.74016318508</td></tr><tr><td>5</td><td>5</td><td>1</td><td>1.641334841</td></tr><tr><td>5</td><td>5</td><td>3</td><td>1.65510389983</td></tr><tr><td>5</td><td>5</td><td>5</td><td>1.65245003808</td></tr></tbody></table><p>接下來是60天換一次股票，獲利似乎有變比較好喔！</p><table><thead><tr><th>負債比率n年小於30％</th><th>ROE近n年大於15%</th><th>自由現金流n年大於0</th><th>2010到至今結果</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td><td>2.04865034635</td></tr><tr><td>1</td><td>1</td><td>3</td><td>2.00438077419</td></tr><tr><td>1</td><td>1</td><td>5</td><td>1.86690744291</td></tr><tr><td>1</td><td>3</td><td>1</td><td>1.84763217744</td></tr><tr><td>1</td><td>3</td><td>3</td><td>1.86161269191</td></tr><tr><td>1</td><td>3</td><td>5</td><td>1.78116963449</td></tr><tr><td>1</td><td>5</td><td>1</td><td>1.74354058836</td></tr><tr><td>1</td><td>5</td><td>3</td><td>1.76992960676</td></tr><tr><td>1</td><td>5</td><td>5</td><td>1.73239549677</td></tr><tr><td>3</td><td>1</td><td>1</td><td>2.2271403266</td></tr><tr><td>3</td><td>1</td><td>3</td><td>2.12840290727</td></tr><tr><td>3</td><td>1</td><td>5</td><td>1.93661630865</td></tr><tr><td>3</td><td>3</td><td>1</td><td>1.81760398688</td></tr><tr><td>3</td><td>3</td><td>3</td><td>1.8053067449</td></tr><tr><td>3</td><td>3</td><td>5</td><td>1.70637963884</td></tr><tr><td>3</td><td>5</td><td>1</td><td>1.68466765715</td></tr><tr><td>3</td><td>5</td><td>3</td><td>1.68890106012</td></tr><tr><td>3</td><td>5</td><td>5</td><td>1.63688323755</td></tr><tr><td>5</td><td>1</td><td>1</td><td>1.99109248921</td></tr><tr><td>5</td><td>1</td><td>3</td><td>1.89184010495</td></tr><tr><td>5</td><td>1</td><td>5</td><td>1.7179670741</td></tr><tr><td>5</td><td>3</td><td>1</td><td>1.84039390361</td></tr><tr><td>5</td><td>3</td><td>3</td><td>1.84483796041</td></tr><tr><td>5</td><td>3</td><td>5</td><td>1.7357332421</td></tr><tr><td>5</td><td>5</td><td>1</td><td>1.69260093206</td></tr><tr><td>5</td><td>5</td><td>3</td><td>1.712534655</td></tr><tr><td>5</td><td>5</td><td>5</td><td>1.65978846222</td></tr></tbody></table><p>同期大盤 1.26倍</p><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>以下是我的觀察：</p><ul><li>最好約60天換一次股，比120天換一次股還要好</li><li>負債比率：三年最好，不多也不少</li><li>ROE：肯定看一年就好</li><li>自由現金流：越多年似乎越有效，但效果較不明顯</li></ul><p>然而只看這三種不同類型的條件，還是很難找到好的策略。<br>明天來看看其它的條件，能不能幫大家組合出好策略！<br>不知道大家有什麼想法？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天來試試看&lt;a href=&quot;https://statementdog.com/pick/tpe&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;財報狗的巴菲特選股條件&lt;/a&gt;，由於是免費的，任何人都
      
    
    </summary>
    
      <category term="財報狗分析" scheme="https://koreal6803.github.io/categories/%E8%B2%A1%E5%A0%B1%E7%8B%97%E5%88%86%E6%9E%90/"/>
    
    
      <category term="如何買股票" scheme="https://koreal6803.github.io/tags/%E5%A6%82%E4%BD%95%E8%B2%B7%E8%82%A1%E7%A5%A8/"/>
    
      <category term="選股策略" scheme="https://koreal6803.github.io/tags/%E9%81%B8%E8%82%A1%E7%AD%96%E7%95%A5/"/>
    
  </entry>
  
  <entry>
    <title>價值股策略</title>
    <link href="https://koreal6803.github.io/%E5%83%B9%E5%80%BC%E8%82%A1%E5%9B%9E%E6%B8%AC/"/>
    <id>https://koreal6803.github.io/價值股回測/</id>
    <published>2017-10-09T14:31:56.000Z</published>
    <updated>2017-10-28T19:38:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天剛結束期中口試（資格考），在法國99％的博士班，都可以通過，但重點是通過成績如何。<br>今天總算是落幕了！可以好好來寫網誌，但今天還是有點想要休息一下，所以把網路上的方法拿來回測XD</p><h3 id="富貴滿盈價值股"><a href="#富貴滿盈價值股" class="headerlink" title="富貴滿盈價值股"></a>富貴滿盈價值股</h3><p>今天回測了 <a href="http://www.cmoney.tw/app/ItemContent.aspx?id=2032" rel="external nofollow noopener noreferrer" target="_blank">富貴滿盈價值股</a> 這個方法，名稱有點俗氣，但是回測效果算還不錯。</p><p>以下是此策略的選股條件：</p><ul><li>本益比 &lt; 15 </li><li>股價淨值比 &lt; 2</li><li>殖利率 &gt; 4</li><li>成交量大於50％的股票</li><li>收盤價 &gt; 60日均線</li><li>收盤價 &gt; 120日均線</li><li>EPS &gt; 前季EPS</li><li>月營收 &gt; 前年同月月營收</li></ul><h3 id="廢話不多說，看結果"><a href="#廢話不多說，看結果" class="headerlink" title="廢話不多說，看結果"></a>廢話不多說，看結果</h3><center><img src="/價值股回測/eq.png" alt="回測結果" title="回測結果"></center><p>紅色線跟藍色線，感覺已經講到爛了XD，下次乾脆直接寫一篇教學，以後都直接連到那個教學…。</p><center><img src="/價值股回測/ns.png" alt="不同種股票數量" title="不同種股票數量"></center><p>這個策略適用於200萬以上的股票池，比較小的我沒有試過，有人有興趣的話，可以留言給我，我會試試看假如最多選5個公司買，會有怎樣的結果。</p><center><img src="/價值股回測/dp.png" alt="下跌幅度" title="下跌幅度"></center><p>下跌幅度還算是滿大的，但下跌情況在2013年以後好很多，是因為改用IFRS的關係嗎？這個就不清楚啦！XD</p><h3 id="回測好，沒辦法用，看這個blog做啥？"><a href="#回測好，沒辦法用，看這個blog做啥？" class="headerlink" title="回測好，沒辦法用，看這個blog做啥？"></a>回測好，沒辦法用，看這個blog做啥？</h3><p>大家可以看，用怎樣的條件選股，可以產生好策略，看越多會發現，好用的數據就那些！</p><p>而且等之後有空，會有個平台放上免費的策略，且每天更新，就跟財報狗一樣。</p><p>為何跟財報狗一樣還要做？恩～因為無聊吧～證明自己的能力。</p><p>要是我一個人可以做出跟策略狗平台不相上下，那不是很猛嗎！？可以當作自己能力記錄的證明。</p><h3 id="希望能做友善且功能強大的平台"><a href="#希望能做友善且功能強大的平台" class="headerlink" title="希望能做友善且功能強大的平台"></a>希望能做友善且功能強大的平台</h3><p>不僅限於基本面，還有籌碼面跟技術面！還有行動助手幫忙提醒該換股了！<br>另外有些厲害的策略還是得收點錢，畢竟這個平台是我吃飯的傢伙呀XD</p><h3 id="之後再寫跟machine-learning有關的策略"><a href="#之後再寫跟machine-learning有關的策略" class="headerlink" title="之後再寫跟machine learning有關的策略"></a>之後再寫跟machine learning有關的策略</h3><p>根據我們現在的介紹，本人真的覺得 machine learning 在分析財報上，有很大的潛力，之後有時間來試試看！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天剛結束期中口試（資格考），在法國99％的博士班，都可以通過，但重點是通過成績如何。&lt;br&gt;今天總算是落幕了！可以好好來寫網誌，但今天還是有點想要休息一下，所以把網路上的方法拿來回測XD&lt;/p&gt;
&lt;h3 id=&quot;富貴滿盈價值股&quot;&gt;&lt;a href=&quot;#富貴滿盈價值股&quot; cl
      
    
    </summary>
    
      <category term="選股策略" scheme="https://koreal6803.github.io/categories/%E9%81%B8%E8%82%A1%E7%AD%96%E7%95%A5/"/>
    
    
      <category term="如何買股票" scheme="https://koreal6803.github.io/tags/%E5%A6%82%E4%BD%95%E8%B2%B7%E8%82%A1%E7%A5%A8/"/>
    
      <category term="選股策略" scheme="https://koreal6803.github.io/tags/%E9%81%B8%E8%82%A1%E7%AD%96%E7%95%A5/"/>
    
      <category term="歷史回測" scheme="https://koreal6803.github.io/tags/%E6%AD%B7%E5%8F%B2%E5%9B%9E%E6%B8%AC/"/>
    
      <category term="價值股" scheme="https://koreal6803.github.io/tags/%E5%83%B9%E5%80%BC%E8%82%A1/"/>
    
  </entry>
  
  <entry>
    <title>用杜邦分析加強你的選股技巧（下）回測</title>
    <link href="https://koreal6803.github.io/%E7%94%A8%E6%9D%9C%E9%82%A6%E5%88%86%E6%9E%90%E5%8A%A0%E5%BC%B7%E4%BD%A0%E7%9A%84%E9%81%B8%E8%82%A1%E6%8A%80%E5%B7%A7%EF%BC%88%E4%B8%8B%EF%BC%89%E5%9B%9E%E6%B8%AC/"/>
    <id>https://koreal6803.github.io/用杜邦分析加強你的選股技巧（下）回測/</id>
    <published>2017-10-07T02:45:40.000Z</published>
    <updated>2017-10-28T19:32:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天介紹一個簡單至少近7年有效的方法，考慮杜邦分析的指標，排列組合後，我能得出的最好結果。</p><h3 id="選股條件："><a href="#選股條件：" class="headerlink" title="選股條件："></a>選股條件：</h3><ul><li>總資產轉換率 &gt; 0.3 （選擇獲利高的公司）</li><li>ROE &gt; 5 （選擇能真正盈利的公司）</li><li>PB &lt; 3 （選便宜一點的公司）</li></ul><p>發現 <strong>淨利率</strong> 莫名的失效，較難拿來選一小群股票，而 <strong>權益乘數</strong> 較也是，畢竟一家公司的槓桿程度，不代表公司體質好不好。我發現 <strong>總資產轉換率</strong>，是一個很好的條件，看企業是否有妥善運用自己的資產，能夠有盈利，回測的效果也比較穩定。</p><h3 id="歷史績效"><a href="#歷史績效" class="headerlink" title="歷史績效"></a>歷史績效</h3><center><img src="/用杜邦分析加強你的選股技巧（下）回測/eq.png" alt="權益曲線" title="權益曲線"></center><p>藍色是投資完美分配的狀況，而紅色是用100萬當作起始資金，考慮買賣張數。用此策略投資，資產穩定成長。</p><h3 id="適用於IFRS制度開始後"><a href="#適用於IFRS制度開始後" class="headerlink" title="適用於IFRS制度開始後"></a>適用於IFRS制度開始後</h3><center><img src="/用杜邦分析加強你的選股技巧（下）回測/ns.png" alt="每日持股數目" title="每日持股數目"></center><p>這個策略在2013之前，一次會買很多張股票，且獲利比較不穩定。我個人覺得可能是2013年時改為 IFRSs 後的關係。因為2013年後，企業可以用 “公允” 價值入帳。所以許多有很多資產的公司，淨值大幅成長。實際擁有的東西沒變，只因為遊戲規則改變，產生”看起來好像改善的”現象。</p><p>雖然淨值大幅成長，但假如營運狀況沒趕善，則<strong>總資產轉換率</strong>反而會降低，因此總資產轉換率高的公司，2013年後才被真正的篩選出來，也是此策略歷史績效開始變好的時機。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天介紹一個簡單至少近7年有效的方法，考慮杜邦分析的指標，排列組合後，我能得出的最好結果。&lt;/p&gt;
&lt;h3 id=&quot;選股條件：&quot;&gt;&lt;a href=&quot;#選股條件：&quot; class=&quot;headerlink&quot; title=&quot;選股條件：&quot;&gt;&lt;/a&gt;選股條件：&lt;/h3&gt;&lt;ul&gt;
&lt;li
      
    
    </summary>
    
      <category term="指標分析" scheme="https://koreal6803.github.io/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/"/>
    
      <category term="基本面" scheme="https://koreal6803.github.io/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/%E5%9F%BA%E6%9C%AC%E9%9D%A2/"/>
    
    
      <category term="如何買股票" scheme="https://koreal6803.github.io/tags/%E5%A6%82%E4%BD%95%E8%B2%B7%E8%82%A1%E7%A5%A8/"/>
    
      <category term="選股策略" scheme="https://koreal6803.github.io/tags/%E9%81%B8%E8%82%A1%E7%AD%96%E7%95%A5/"/>
    
      <category term="歷史回測" scheme="https://koreal6803.github.io/tags/%E6%AD%B7%E5%8F%B2%E5%9B%9E%E6%B8%AC/"/>
    
      <category term="杜邦分析" scheme="https://koreal6803.github.io/tags/%E6%9D%9C%E9%82%A6%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>用杜邦分析加強你的選股技巧（中）淨利率</title>
    <link href="https://koreal6803.github.io/%E7%94%A8%E6%9D%9C%E9%82%A6%E5%88%86%E6%9E%90%E5%8A%A0%E5%BC%B7%E4%BD%A0%E7%9A%84%E9%81%B8%E8%82%A1%E6%8A%80%E5%B7%A7%EF%BC%88%E4%B8%AD%EF%BC%89%E6%B7%A8%E5%88%A9%E7%8E%87/"/>
    <id>https://koreal6803.github.io/用杜邦分析加強你的選股技巧（中）淨利率/</id>
    <published>2017-10-05T21:07:14.000Z</published>
    <updated>2017-10-28T19:32:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>淨利率就是指企業從營業收入，真正收進口袋的錢：</p><h3 id="分佈圖"><a href="#分佈圖" class="headerlink" title="分佈圖"></a>分佈圖</h3><p>以下是淨利率的分佈圖：</p><center><img src="/用杜邦分析加強你的選股技巧（中）淨利率/netprofitmargin-d.png" alt="淨利率分佈圖" title="淨利率分佈圖"></center><table><thead><tr><th>數量</th><th>平均</th><th>標準差</th><th>0%</th><th>25%</th><th>50%</th><th>75%</th><th>100%</th></tr></thead><tbody><tr><td>1693</td><td>-100</td><td>2234</td><td>-76488.52</td><td>0.24</td><td>5.09</td><td>11.56</td><td>5458.2</td></tr></tbody></table><p>台灣有滿多企業沒有辦法賺錢！但有少數公司獲利滿驚人的，然而接近0的地方會產生一個很明顯的突波，看來滿多企業盡量讓自己的淨利大於0的，讓財報好看一點。</p><h3 id="淨利率高的企業股價更容易成長！"><a href="#淨利率高的企業股價更容易成長！" class="headerlink" title="淨利率高的企業股價更容易成長！"></a>淨利率高的企業股價更容易成長！</h3><p>我們將淨利率分五組，由低到高，低的是深色，高的是黃色，每60天重新選擇一次，每一條曲線，代表我們長期投入，買入其中一組的股票，所獲得的報酬：</p><center><img src="/用杜邦分析加強你的選股技巧（中）淨利率/netprofitmargin.png" alt="淨利率分佈圖" title="淨利率分佈圖"></center><p>我們發現，投資淨利率高的公司，比較容易獲利！</p><h3 id="杜邦分析的指標終於說完了！"><a href="#杜邦分析的指標終於說完了！" class="headerlink" title="杜邦分析的指標終於說完了！"></a>杜邦分析的指標終於說完了！</h3><p>總結一下，目前杜邦分析的系列文章中，我們講了三個重要的指標：</p><ul><li>淨利率</li><li>總資產轉換率</li><li>權益乘數</li></ul><p>目前看起來，是<strong>淨利率</strong>跟<strong>總資產轉換率</strong>比較好用，可以利用這兩個指標選股！<br>而<strong>權益乘數</strong>其實是比較難用的，因為很難斷定會借貸的公司到底好不好。</p><p>而下一篇，我們會能不能整合三個指標，找出比較好的優質股～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;淨利率就是指企業從營業收入，真正收進口袋的錢：&lt;/p&gt;
&lt;h3 id=&quot;分佈圖&quot;&gt;&lt;a href=&quot;#分佈圖&quot; class=&quot;headerlink&quot; title=&quot;分佈圖&quot;&gt;&lt;/a&gt;分佈圖&lt;/h3&gt;&lt;p&gt;以下是淨利率的分佈圖：&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/
      
    
    </summary>
    
      <category term="指標分析" scheme="https://koreal6803.github.io/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/"/>
    
      <category term="基本面" scheme="https://koreal6803.github.io/categories/%E6%8C%87%E6%A8%99%E5%88%86%E6%9E%90/%E5%9F%BA%E6%9C%AC%E9%9D%A2/"/>
    
    
      <category term="杜邦分析" scheme="https://koreal6803.github.io/tags/%E6%9D%9C%E9%82%A6%E5%88%86%E6%9E%90/"/>
    
      <category term="入門教學" scheme="https://koreal6803.github.io/tags/%E5%85%A5%E9%96%80%E6%95%99%E5%AD%B8/"/>
    
  </entry>
  
  <entry>
    <title>小資族也可以使用的選股法！</title>
    <link href="https://koreal6803.github.io/%E5%B0%8F%E8%B3%87%E6%97%8F%E4%B9%9F%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E7%9A%84%E9%81%B8%E8%82%A1%E6%B3%95%EF%BC%81/"/>
    <id>https://koreal6803.github.io/小資族也可以使用的選股法！/</id>
    <published>2017-10-04T09:40:42.000Z</published>
    <updated>2017-10-28T19:38:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>其實這篇還是<a href="/比策略狗還要安全的選股策略！/">14年14倍的選股策略！</a>一模一樣的方法XD，建議先複習一下，這篇只用本金10萬元開始，看會發生什麼問題！</p><p>原諒今天我比較混水摸魚，下禮拜要博士班資格考～～</p><h3 id="附上每天操作紀錄，證明沒在虎爛XD"><a href="#附上每天操作紀錄，證明沒在虎爛XD" class="headerlink" title="附上每天操作紀錄，證明沒在虎爛XD"></a>附上每天操作紀錄，證明沒在虎爛XD</h3><p>會寫這篇是因為有人問上次那個14年14倍選股法，怎麼可能一次買50張股票，太扯了吧！<br>被他這麼一說，突然我也覺得有點扯，該不會是回測寫錯，有bug吧！？</p><p>目前又檢查了一次，應該是沒找到什麼問題。<br><strong>策略都是考慮真實買賣（本金、張數、手續費都考慮）</strong>，至於怎麼考慮，下面會更詳細的跟大家介紹。</p><p>拉到文章下方，有歷史回測的每天操作紀錄，以示我真的沒在虎爛XD，但交易這種東西，還是自己對自己負責。</p><p>假如歷史紀錄有問題，也歡迎隨時聯絡我喔（左上角有信箱和FB），很樂意跟大家討論。</p><h3 id="為何一次買這麼多股票？"><a href="#為何一次買這麼多股票？" class="headerlink" title="為何一次買這麼多股票？"></a>為何一次買這麼多股票？</h3><p>因為我想利用空間與時間選股！</p><p>做回測到現在的心得是，自己真的是凡人，無法預測股票是漲是跌，要用時間跟空間來換取你的零用錢！</p><p>時間，就是指長線，利用一兩個月，讓基本面很好的股票發酵。<br>空間，就是指分散風險，投資多支股票，買到雷股時，才不致於太慘。</p><h3 id="Q-amp-A-時間"><a href="#Q-amp-A-時間" class="headerlink" title="Q&amp;A 時間"></a>Q&amp;A 時間</h3><h4 id="1-這個策略是上市上櫃大於100家時，只挑選上市收盤大於10元的買，上櫃的不考慮對嗎"><a href="#1-這個策略是上市上櫃大於100家時，只挑選上市收盤大於10元的買，上櫃的不考慮對嗎" class="headerlink" title="1.這個策略是上市上櫃大於100家時，只挑選上市收盤大於10元的買，上櫃的不考慮對嗎?"></a>1.這個策略是上市上櫃大於100家時，只挑選上市收盤大於10元的買，上櫃的不考慮對嗎?</h4><p>YES</p><h4 id="2-假設上市上櫃的便宜股大於100家公司，選擇收盤價10元以上的上市公司，100萬真的夠嗎"><a href="#2-假設上市上櫃的便宜股大於100家公司，選擇收盤價10元以上的上市公司，100萬真的夠嗎" class="headerlink" title="2.假設上市上櫃的便宜股大於100家公司，選擇收盤價10元以上的上市公司，100萬真的夠嗎?"></a>2.假設上市上櫃的便宜股大於100家公司，選擇收盤價10元以上的上市公司，100萬真的夠嗎?</h4><p>這些雞蛋水餃股特別便宜，下面圖一是該策略所有買入股票的價格分佈圖</p><center><img src="/小資族也可以使用的選股法！/distri.png" alt="歷史績效圖" title="歷史績效圖"></center><p>幾乎都是在10～20元，然而程式沒有設定最低買入手續費20元，但低頻率的投資應該不會造成太大的影響</p><h4 id="3-若是像2008年一樣，一堆便宜股票100萬如何足以購買符合條件的股票呢"><a href="#3-若是像2008年一樣，一堆便宜股票100萬如何足以購買符合條件的股票呢" class="headerlink" title="3.若是像2008年一樣，一堆便宜股票100萬如何足以購買符合條件的股票呢?"></a>3.若是像2008年一樣，一堆便宜股票100萬如何足以購買符合條件的股票呢?</h4><p>上一篇起始資金100萬，但到2008年已經有200萬了，這個時候買50支雞蛋水餃股是沒問題的！</p><p>為了體現買不動這個問題，另外跑了只用10萬元投資的回測：</p><center><img src="/小資族也可以使用的選股法！/eq.png" alt="歷史績效圖" title="歷史績效圖"></center><p>紅色是用10萬起始資金，並考慮手續費；而藍色則是資產完美平均、不算手續費。結論是：用10萬買當起始資金也行，但獲利倍數會減少：</p><ul><li>原本100萬起始的話，參考上篇文章，到今天可以有14倍獲利；</li><li>然而現在用10萬當起始資金，考慮真實情況（上圖紅線），到今天只有8倍，但權益曲線很相似！</li><li>假如可以完美平均分散，不真實情況（上圖藍線），不管起始資金多少，都能有近16倍獲利。</li></ul><h4 id="接下來就回答關鍵問題：2009年這麼多股票，錢那麼少，怎麼買呢？"><a href="#接下來就回答關鍵問題：2009年這麼多股票，錢那麼少，怎麼買呢？" class="headerlink" title="接下來就回答關鍵問題：2009年這麼多股票，錢那麼少，怎麼買呢？"></a>接下來就回答關鍵問題：2009年這麼多股票，錢那麼少，怎麼買呢？</h4><p>這邊的策略是：假設n張股票要買，將總資產分成n份，買不起就不買！</p><p>就這麼簡單，所以接下來，用十萬當起始資金，看每日持股數目，就會更瞭解：</p><center><img src="/小資族也可以使用的選股法！/ns.png" alt="歷史績效圖" title="歷史績效圖"></center><p>上圖可以發現，在2009年時，因為股票太多，藍色線建議購買超過50支股票，而紅線因為本金不足幾乎沒有購買任何股票。</p><p><strong>策略都是考慮真實買賣（本金、張數、手續費都考慮）</strong>，個人覺得這個策略，是有機會真倉使用，然而我自己沒在用就是了XD，這是某天好玩做出來的結果。</p><p>所以十萬理論上也是可以的，無論多少錢，回測程式都會將資產分n份，再等比例買入每一支不同的股票！</p><h4 id="4-能否列出在符合條件的年度，各買一張需要多少本金，根據此策略計算結果是符合條件的上市公司各買一張嗎-或是根據您的統計是以資金平均分配在各家公司的結果"><a href="#4-能否列出在符合條件的年度，各買一張需要多少本金，根據此策略計算結果是符合條件的上市公司各買一張嗎-或是根據您的統計是以資金平均分配在各家公司的結果" class="headerlink" title="4.能否列出在符合條件的年度，各買一張需要多少本金，根據此策略計算結果是符合條件的上市公司各買一張嗎?或是根據您的統計是以資金平均分配在各家公司的結果?"></a>4.能否列出在符合條件的年度，各買一張需要多少本金，根據此策略計算結果是符合條件的上市公司各買一張嗎?或是根據您的統計是以資金平均分配在各家公司的結果?</h4><p>附上歷史操作數據</p><p>連結一，買股票歷史紀錄：<br><a href="https://drive.google.com/file/d/0B440aEV9RNPTX2xTWUd0ZVF6Unc/view" rel="external nofollow noopener noreferrer" target="_blank">https://drive.google.com/file/d/0B440aEV9RNPTX2xTWUd0ZVF6Unc/view</a><br>連結二，每天操作的詳細記錄：<br><a href="https://drive.google.com/file/d/0B440aEV9RNPTMGpuZFNfLURwa0k/view" rel="external nofollow noopener noreferrer" target="_blank">https://drive.google.com/file/d/0B440aEV9RNPTMGpuZFNfLURwa0k/view</a></p><p>這個策略只是我學習路上，有一點小成果，跟大家分享而已，我一定也有很多不足，要向大家學習的，有什麼問題歡迎留言一起討論喔～～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;其實這篇還是&lt;a href=&quot;/比策略狗還要安全的選股策略！/&quot;&gt;14年14倍的選股策略！&lt;/a&gt;一模一樣的方法XD，建議先複習一下，這篇只用本金10萬元開始，看會發生什麼問題！&lt;/p&gt;
&lt;p&gt;原諒今天我比較混水摸魚，下禮拜要博士班資格考～～&lt;/p&gt;
&lt;h3 id=&quot;附上每
      
    
    </summary>
    
      <category term="選股策略" scheme="https://koreal6803.github.io/categories/%E9%81%B8%E8%82%A1%E7%AD%96%E7%95%A5/"/>
    
    
      <category term="如何買股票" scheme="https://koreal6803.github.io/tags/%E5%A6%82%E4%BD%95%E8%B2%B7%E8%82%A1%E7%A5%A8/"/>
    
      <category term="選股策略" scheme="https://koreal6803.github.io/tags/%E9%81%B8%E8%82%A1%E7%AD%96%E7%95%A5/"/>
    
      <category term="歷史回測" scheme="https://koreal6803.github.io/tags/%E6%AD%B7%E5%8F%B2%E5%9B%9E%E6%B8%AC/"/>
    
      <category term="本益比" scheme="https://koreal6803.github.io/tags/%E6%9C%AC%E7%9B%8A%E6%AF%94/"/>
    
      <category term="股價淨值比" scheme="https://koreal6803.github.io/tags/%E8%82%A1%E5%83%B9%E6%B7%A8%E5%80%BC%E6%AF%94/"/>
    
  </entry>
  
</feed>
